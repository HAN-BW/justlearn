{"squid:S1161": {"rule": {"key": "squid:S1161", "repo": "squid", "name": "\"@Override\" should be used on overriding and implementing methods", "createdAt": "2023-07-27T03:12:21+0000", "htmlDesc": "<p>Using the <code>@Override</code> annotation is useful for two reasons :</p>\n<ul>\n  <li> It elicits a warning from the compiler if the annotated method doesn't actually override anything, as in the case of a misspelling. </li>\n  <li> It improves the readability of the source code by making it obvious that methods are overridden. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass ParentClass {\n  public boolean doSomething(){...}\n}\nclass FirstChildClass extends ParentClass {\n  public boolean doSomething(){...}  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass ParentClass {\n  public boolean doSomething(){...}\n}\nclass FirstChildClass extends ParentClass {\n  @Override\n  public boolean doSomething(){...}  // Compliant\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule is relaxed when overriding a method from the <code>Object</code> class like <code>toString()</code>, <code>hashCode()</code>, ...</p>", "mdDesc": "<p>Using the <code>@Override</code> annotation is useful for two reasons :</p>\n<ul>\n  <li> It elicits a warning from the compiler if the annotated method doesn't actually override anything, as in the case of a misspelling. </li>\n  <li> It improves the readability of the source code by making it obvious that methods are overridden. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass ParentClass {\n  public boolean doSomething(){...}\n}\nclass FirstChildClass extends ParentClass {\n  public boolean doSomething(){...}  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass ParentClass {\n  public boolean doSomething(){...}\n}\nclass FirstChildClass extends ParentClass {\n  @Override\n  public boolean doSomething(){...}  // Compliant\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule is relaxed when overriding a method from the <code>Object</code> class like <code>toString()</code>, <code>hashCode()</code>, ...</p>", "severity": "MAJOR", "status": "READY", "isTemplate": false, "tags": [], "sysTags": ["bad-practice"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "5min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "5min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "5min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "5min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYmVVaAvqMsO3hqTZpQM", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-07-27T03:12:43+0000", "updatedAt": "2023-07-27T03:12:43+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "squid:S3752": {"rule": {"key": "squid:S3752", "repo": "squid", "name": "\"@RequestMapping\" methods should specify HTTP method", "createdAt": "2023-07-27T03:12:20+0000", "htmlDesc": "<p>A <code>@RequestMapping</code> method handles all matching requests by default. That means that a method you intended only to be\n<code>POST</code>-ed to could also be called by a <code>GET</code>, thereby allowing hackers to call the method inappropriately. For example a\n\"transferFunds\" method might be invoked like so: <code>&lt;img\nsrc=\"http://bank.com/actions/transferFunds?reciepientRouting=000000&amp;receipientAccount=11111111&amp;amount=200.00\" width=\"1\"\nheight=\"1\"/&gt;</code></p>\n<p>For that reason, you should always explicitly list the single HTTP method with which you expect your <code>@RequestMapping</code> Java method to be\ncalled. This rule raises an issue when <code>method</code> is missing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@RequestMapping(\"/greet\")  // Noncompliant\npublic String greet(String greetee) {\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n  @RequestMapping(\"/greet\", method = GET)\n  public String greet(String greetee) {\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/352.html\">MITRE, CWE-352</a> - Cross-Site Request Forgery (CSRF) </li>\n  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29\">OWASP: Cross-Site Request Forgery</a> </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat1\">SANS Top 25</a> - Insecure Interaction Between Components </li>\n  <li> <a href=\"https://docs.spring.io/spring-security/site/docs/current/reference/html/csrf.html#csrf-use-proper-verbs\">Spring Security Official\n  Documentation: Use proper HTTP verbs (CSRF protection)</a> </li>\n</ul>", "mdDesc": "<p>A <code>@RequestMapping</code> method handles all matching requests by default. That means that a method you intended only to be\n<code>POST</code>-ed to could also be called by a <code>GET</code>, thereby allowing hackers to call the method inappropriately. For example a\n\"transferFunds\" method might be invoked like so: <code>&lt;img\nsrc=\"http://bank.com/actions/transferFunds?reciepientRouting=000000&amp;receipientAccount=11111111&amp;amount=200.00\" width=\"1\"\nheight=\"1\"/&gt;</code></p>\n<p>For that reason, you should always explicitly list the single HTTP method with which you expect your <code>@RequestMapping</code> Java method to be\ncalled. This rule raises an issue when <code>method</code> is missing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@RequestMapping(\"/greet\")  // Noncompliant\npublic String greet(String greetee) {\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n  @RequestMapping(\"/greet\", method = GET)\n  public String greet(String greetee) {\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/352.html\">MITRE, CWE-352</a> - Cross-Site Request Forgery (CSRF) </li>\n  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29\">OWASP: Cross-Site Request Forgery</a> </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat1\">SANS Top 25</a> - Insecure Interaction Between Components </li>\n  <li> <a href=\"https://docs.spring.io/spring-security/site/docs/current/reference/html/csrf.html#csrf-use-proper-verbs\">Spring Security Official\n  Documentation: Use proper HTTP verbs (CSRF protection)</a> </li>\n</ul>", "severity": "BLOCKER", "status": "READY", "isTemplate": false, "tags": [], "sysTags": ["cwe", "owasp-a6", "sans-top25-insecure", "spring"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "5min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "5min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "5min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "5min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "VULNERABILITY"}, "actives": [{"qProfile": "AYmVVaAvqMsO3hqTZpQM", "inherit": "NONE", "severity": "BLOCKER", "params": [], "createdAt": "2023-07-27T03:12:43+0000", "updatedAt": "2023-07-27T03:12:43+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "BLOCKER", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "squid:S2111": {"rule": {"key": "squid:S2111", "repo": "squid", "name": "\"BigDecimal(double)\" should not be used", "createdAt": "2023-07-27T03:12:21+0000", "htmlDesc": "<p>Because of floating point imprecision, you're unlikely to get the value you expect from the <code>BigDecimal(double)</code> constructor. </p>\n<p>From <a href=\"http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html#BigDecimal(double)\">the JavaDocs</a>:</p>\n<blockquote>\n  The results of this constructor can be somewhat unpredictable. One might assume that writing new BigDecimal(0.1) in Java creates a BigDecimal which\n  is exactly equal to 0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal to\n  0.1000000000000000055511151231257827021181583404541015625. This is because 0.1 cannot be represented exactly as a double (or, for that matter, as a\n  binary fraction of any finite length). Thus, the value that is being passed in to the constructor is not exactly equal to 0.1, appearances\n  notwithstanding.\n</blockquote>\n<p>Instead, you should use <code>BigDecimal.valueOf</code>, which uses a string under the covers to eliminate floating point rounding errors, or the\nconstructor that takes a <code>String</code> argument.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndouble d = 1.1;\n\nBigDecimal bd1 = new BigDecimal(d); // Noncompliant; see comment above\nBigDecimal bd2 = new BigDecimal(1.1); // Noncompliant; same result\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndouble d = 1.1;\n\nBigDecimal bd1 = BigDecimal.valueOf(d);\nBigDecimal bd2 = new BigDecimal(\"1.1\"); // using String constructor will result in precise value\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NQAVAg\">CERT, NUM10-J.</a> - Do not construct BigDecimal objects from floating-point\n  literals </li>\n</ul>", "mdDesc": "<p>Because of floating point imprecision, you're unlikely to get the value you expect from the <code>BigDecimal(double)</code> constructor. </p>\n<p>From <a href=\"http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html#BigDecimal(double)\">the JavaDocs</a>:</p>\n<blockquote>\n  The results of this constructor can be somewhat unpredictable. One might assume that writing new BigDecimal(0.1) in Java creates a BigDecimal which\n  is exactly equal to 0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal to\n  0.1000000000000000055511151231257827021181583404541015625. This is because 0.1 cannot be represented exactly as a double (or, for that matter, as a\n  binary fraction of any finite length). Thus, the value that is being passed in to the constructor is not exactly equal to 0.1, appearances\n  notwithstanding.\n</blockquote>\n<p>Instead, you should use <code>BigDecimal.valueOf</code>, which uses a string under the covers to eliminate floating point rounding errors, or the\nconstructor that takes a <code>String</code> argument.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndouble d = 1.1;\n\nBigDecimal bd1 = new BigDecimal(d); // Noncompliant; see comment above\nBigDecimal bd2 = new BigDecimal(1.1); // Noncompliant; same result\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndouble d = 1.1;\n\nBigDecimal bd1 = BigDecimal.valueOf(d);\nBigDecimal bd2 = new BigDecimal(\"1.1\"); // using String constructor will result in precise value\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NQAVAg\">CERT, NUM10-J.</a> - Do not construct BigDecimal objects from floating-point\n  literals </li>\n</ul>", "severity": "MAJOR", "status": "READY", "isTemplate": false, "tags": [], "sysTags": ["cert"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "5min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "5min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "5min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "5min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "BUG"}, "actives": [{"qProfile": "AYmVVaAvqMsO3hqTZpQM", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-07-27T03:12:43+0000", "updatedAt": "2023-07-27T03:12:43+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "squid:S2864": {"rule": {"key": "squid:S2864", "repo": "squid", "name": "\"entrySet()\" should be iterated when both the key and value are needed", "createdAt": "2023-07-27T03:12:21+0000", "htmlDesc": "<p>When only the keys from a map are needed in a loop, iterating the <code>keySet</code> makes sense. But when both the key and the value are needed,\nit's more efficient to iterate the <code>entrySet</code>, which will give access to both the key and value, instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomethingWithMap(Map&lt;String,Object&gt; map) {\n  for (String key : map.keySet()) {  // Noncompliant; for each key the value is retrieved\n    Object value = map.get(key);\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomethingWithMap(Map&lt;String,Object&gt; map) {\n  for (Map.Entry&lt;String,Object&gt; entry : map.entrySet()) {\n    String key = entry.getKey();\n    Object value = entry.getValue();\n    // ...\n  }\n}\n</pre>", "mdDesc": "<p>When only the keys from a map are needed in a loop, iterating the <code>keySet</code> makes sense. But when both the key and the value are needed,\nit's more efficient to iterate the <code>entrySet</code>, which will give access to both the key and value, instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomethingWithMap(Map&lt;String,Object&gt; map) {\n  for (String key : map.keySet()) {  // Noncompliant; for each key the value is retrieved\n    Object value = map.get(key);\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomethingWithMap(Map&lt;String,Object&gt; map) {\n  for (Map.Entry&lt;String,Object&gt; entry : map.entrySet()) {\n    String key = entry.getKey();\n    Object value = entry.getValue();\n    // ...\n  }\n}\n</pre>", "severity": "MAJOR", "status": "READY", "isTemplate": false, "tags": [], "sysTags": ["performance"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "5min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "5min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "5min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "5min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYmVVaAvqMsO3hqTZpQM", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-07-27T03:12:43+0000", "updatedAt": "2023-07-27T03:12:43+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "squid:S2057": {"rule": {"key": "squid:S2057", "repo": "squid", "name": "\"Serializable\" classes should have a \"serialVersionUID\"", "createdAt": "2023-07-27T03:12:20+0000", "htmlDesc": "<p>A <code>serialVersionUID</code> field is strongly recommended in all <code>Serializable</code> classes. If you do not provide one, one will be\ncalculated for you by the compiler. The danger in not explicitly choosing the value is that when the class changes, the compiler will generate an\nentirely new id, and you will be suddenly unable to deserialize (read from file) objects that were serialized with the previous version of the\nclass.</p>\n<p><code>serialVersionUID</code>'s should be declared with all of these modifiers: <code>static final long</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Raspberry extends Fruit  // Noncompliant; no serialVersionUID.\n        implements Serializable {\n  private String variety;\n\n  public Raspberry(Season ripe, String variety) { ...}\n  public void setVariety(String variety) {...}\n  public String getVarity() {...}\n}\n\npublic class Raspberry extends Fruit\n        implements Serializable {\n  private final int serialVersionUID = 1; // Noncompliant; not static &amp; int rather than long\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Raspberry extends Fruit\n        implements Serializable {\n  private static final long serialVersionUID = 1;\n  private String variety;\n\n  public Raspberry(Season ripe, String variety) { ...}\n  public void setVariety(String variety) {...}\n  public String getVarity() {...}\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Swing and AWT classes, <code>abstract</code> classes, <code>Throwable</code> and its subclasses (<code>Exception</code>s and <code>Error</code>s),\nand classes marked with <code>@SuppressWarnings(\"serial\")</code> are ignored.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYCpAQ\">CERT, SER00-J.</a> - Enable serialization compatibility during class evolution\n  </li>\n</ul>", "mdDesc": "<p>A <code>serialVersionUID</code> field is strongly recommended in all <code>Serializable</code> classes. If you do not provide one, one will be\ncalculated for you by the compiler. The danger in not explicitly choosing the value is that when the class changes, the compiler will generate an\nentirely new id, and you will be suddenly unable to deserialize (read from file) objects that were serialized with the previous version of the\nclass.</p>\n<p><code>serialVersionUID</code>'s should be declared with all of these modifiers: <code>static final long</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Raspberry extends Fruit  // Noncompliant; no serialVersionUID.\n        implements Serializable {\n  private String variety;\n\n  public Raspberry(Season ripe, String variety) { ...}\n  public void setVariety(String variety) {...}\n  public String getVarity() {...}\n}\n\npublic class Raspberry extends Fruit\n        implements Serializable {\n  private final int serialVersionUID = 1; // Noncompliant; not static &amp; int rather than long\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Raspberry extends Fruit\n        implements Serializable {\n  private static final long serialVersionUID = 1;\n  private String variety;\n\n  public Raspberry(Season ripe, String variety) { ...}\n  public void setVariety(String variety) {...}\n  public String getVarity() {...}\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Swing and AWT classes, <code>abstract</code> classes, <code>Throwable</code> and its subclasses (<code>Exception</code>s and <code>Error</code>s),\nand classes marked with <code>@SuppressWarnings(\"serial\")</code> are ignored.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYCpAQ\">CERT, SER00-J.</a> - Enable serialization compatibility during class evolution\n  </li>\n</ul>", "severity": "CRITICAL", "status": "READY", "isTemplate": false, "tags": [], "sysTags": ["cert", "pitfall", "serialization"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "5min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "5min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "5min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "5min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "CRITICAL", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "squid:S2209": {"rule": {"key": "squid:S2209", "repo": "squid", "name": "\"static\" members should be accessed statically", "createdAt": "2023-07-27T03:12:21+0000", "htmlDesc": "<p>While it is <em>possible</em> to access <code>static</code> members from a class instance, it's bad form, and considered by most to be misleading\nbecause it implies to the readers of your code that there's an instance of the member per class instance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    first.counter ++;  // Noncompliant\n    second.counter ++;  // Noncompliant. A.counter is now 2, which is perhaps contrary to expectations\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    A.counter ++;  // Compliant\n    A.counter ++;  // Compliant\n  }\n}\n</pre>", "mdDesc": "<p>While it is <em>possible</em> to access <code>static</code> members from a class instance, it's bad form, and considered by most to be misleading\nbecause it implies to the readers of your code that there's an instance of the member per class instance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    first.counter ++;  // Noncompliant\n    second.counter ++;  // Noncompliant. A.counter is now 2, which is perhaps contrary to expectations\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    A.counter ++;  // Compliant\n    A.counter ++;  // Compliant\n  }\n}\n</pre>", "severity": "MAJOR", "status": "READY", "isTemplate": false, "tags": [], "sysTags": ["pitfall"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "5min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "5min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "5min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "5min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYmVVaAvqMsO3hqTZpQM", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-07-27T03:12:43+0000", "updatedAt": "2023-07-27T03:12:43+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "squid:SwitchLastCaseIsDefaultCheck": {"rule": {"key": "squid:SwitchLastCaseIsDefaultCheck", "repo": "squid", "name": "\"switch\" statements should have \"default\" clauses", "createdAt": "2023-07-27T03:12:20+0000", "htmlDesc": "<p>The requirement for a final <code>default</code> clause is defensive programming. The clause should either take appropriate action, or contain a\nsuitable comment as to why no action is taken.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (param) {  //missing default clause\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n\nswitch (param) {\n  default: // default clause should be the last one\n    error();\n    break;\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n  default:\n    error();\n    break;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>If the <code>switch</code> parameter is an <code>Enum</code> and if all the constants of this enum are used in the <code>case</code> statements,\nthen no <code>default</code> clause is expected.</p>\n<p>Example:</p>\n<pre>\npublic enum Day {\n    SUNDAY, MONDAY\n}\n...\nswitch(day) {\n  case SUNDAY:\n    doSomething();\n    break;\n  case MONDAY:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>\n  <li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause </li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>\n  <li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause </li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>\n  <li> MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label </li>\n  <li> MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement\n  </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/478.html\">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/YgE\">CERT, MSC01-C.</a> - Strive for logical completeness </li>\n</ul>", "mdDesc": "<p>The requirement for a final <code>default</code> clause is defensive programming. The clause should either take appropriate action, or contain a\nsuitable comment as to why no action is taken.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (param) {  //missing default clause\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n\nswitch (param) {\n  default: // default clause should be the last one\n    error();\n    break;\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n  default:\n    error();\n    break;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>If the <code>switch</code> parameter is an <code>Enum</code> and if all the constants of this enum are used in the <code>case</code> statements,\nthen no <code>default</code> clause is expected.</p>\n<p>Example:</p>\n<pre>\npublic enum Day {\n    SUNDAY, MONDAY\n}\n...\nswitch(day) {\n  case SUNDAY:\n    doSomething();\n    break;\n  case MONDAY:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>\n  <li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause </li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>\n  <li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause </li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>\n  <li> MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label </li>\n  <li> MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement\n  </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/478.html\">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/YgE\">CERT, MSC01-C.</a> - Strive for logical completeness </li>\n</ul>", "severity": "CRITICAL", "status": "READY", "internalKey": "S131", "isTemplate": false, "tags": [], "sysTags": ["cert", "cwe", "misra"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "5min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "5min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "5min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "5min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYmVVaAvqMsO3hqTZpQM", "inherit": "NONE", "severity": "CRITICAL", "params": [], "createdAt": "2023-07-27T03:12:43+0000", "updatedAt": "2023-07-27T03:12:43+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "CRITICAL", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "squid:S2438": {"rule": {"key": "squid:S2438", "repo": "squid", "name": "\"Threads\" should not be used where \"Runnables\" are expected", "createdAt": "2023-07-27T03:12:20+0000", "htmlDesc": "<p>While it is technically correct to use a <code>Thread</code> where a <code>Runnable</code> is called for, the semantics of the two objects are\ndifferent, and mixing them is a bad practice that will likely lead to headaches in the future.</p>\n<p>The crux of the issue is that <code>Thread</code> is a larger concept than <code>Runnable</code>. A <code>Runnable</code> is an object whose\nrunning should be managed. A <code>Thread</code> expects to manage the running of itself or other <code>Runnables</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n\tpublic static void main(String[] args) {\n\t\tThread r =new Thread() {\n\t\t\tint p;\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\twhile(true)\n\t\t\t\t\tSystem.out.println(\"a\");\n\t\t\t}\n\t\t};\n\t\tnew Thread(r).start();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n\tpublic static void main(String[] args) {\n\t\tRunnable r =new Runnable() {\n\t\t\tint p;\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\twhile(true)\n\t\t\t\t\tSystem.out.println(\"a\");\n\t\t\t}\n\t\t};\n\t\tnew Thread(r).start();\n</pre>", "mdDesc": "<p>While it is technically correct to use a <code>Thread</code> where a <code>Runnable</code> is called for, the semantics of the two objects are\ndifferent, and mixing them is a bad practice that will likely lead to headaches in the future.</p>\n<p>The crux of the issue is that <code>Thread</code> is a larger concept than <code>Runnable</code>. A <code>Runnable</code> is an object whose\nrunning should be managed. A <code>Thread</code> expects to manage the running of itself or other <code>Runnables</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n\tpublic static void main(String[] args) {\n\t\tThread r =new Thread() {\n\t\t\tint p;\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\twhile(true)\n\t\t\t\t\tSystem.out.println(\"a\");\n\t\t\t}\n\t\t};\n\t\tnew Thread(r).start();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n\tpublic static void main(String[] args) {\n\t\tRunnable r =new Runnable() {\n\t\t\tint p;\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\twhile(true)\n\t\t\t\t\tSystem.out.println(\"a\");\n\t\t\t}\n\t\t};\n\t\tnew Thread(r).start();\n</pre>", "severity": "MAJOR", "status": "READY", "isTemplate": false, "tags": [], "sysTags": ["multi-threading", "pitfall"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "15min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "15min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "15min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "15min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYmVVaAvqMsO3hqTZpQM", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-07-27T03:12:43+0000", "updatedAt": "2023-07-27T03:12:43+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "pmd:UpperEllRule": {"rule": {"key": "pmd:UpperEllRule", "repo": "pmd", "name": "[p3c]'L' instead of 'l' should be used for long or Long variable.", "createdAt": "2023-07-27T03:12:15+0000", "htmlDesc": "'L' instead of 'l' should be used for long or Long variable because 'l' is easily to be regarded as number 1 in mistake.\n<p>Examples:</p>\n<pre>\n    Negative example:\n    //It is hard to tell whether it is number 11 or Long 1.\n    Long warn = 1l;\n\n    Positive example:\n    Long notwarn = 1L;\n</pre>", "mdDesc": "'L' instead of 'l' should be used for long or Long variable because 'l' is easily to be regarded as number 1 in mistake.\n<p>Examples:</p>\n<pre>\n    Negative example:\n    //It is hard to tell whether it is number 11 or Long 1.\n    Long warn = 1l;\n\n    Positive example:\n    Long notwarn = 1L;\n</pre>", "severity": "BLOCKER", "status": "READY", "internalKey": "rulesets/java/ali-constant.xml/UpperEllRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "BLOCKER", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "pmd:ThreadShouldSetNameRule": {"rule": {"key": "pmd:ThreadShouldSetNameRule", "repo": "pmd", "name": "[p3c]A meaningful thread name is helpful to trace the error information,so assign a name when creating threads or thread pools.", "createdAt": "2023-07-27T03:12:15+0000", "htmlDesc": "A meaningful thread name is helpful to trace the error information,so assign a name when creating threads or thread pools.\n<p>Examples:</p>\n<pre>\n    Positive example 1\uff1a\n    ThreadFactory namedThreadFactory = new ThreadFactoryBuilder()\n        .setNameFormat(\"demo-pool-%d\").build();\n    ExecutorService singleThreadPool = new ThreadPoolExecutor(1, 1,\n        0L, TimeUnit.MILLISECONDS,\n        new LinkedBlockingQueue<Runnable>(1024), namedThreadFactory, new ThreadPoolExecutor.AbortPolicy());\n    singleThreadPool.execute(()-> System.out.println(Thread.currentThread().getName()));\n    singleThreadPool.shutdown();\n\n    Positive example 2\uff1a\n    public class TimerTaskThread extends Thread {\n        public TimerTaskThread(){\n        super.setName(\"TimerTaskThread\"); \u2026\n    }\n</pre>", "mdDesc": "A meaningful thread name is helpful to trace the error information,so assign a name when creating threads or thread pools.\n<p>Examples:</p>\n<pre>\n    Positive example 1\uff1a\n    ThreadFactory namedThreadFactory = new ThreadFactoryBuilder()\n        .setNameFormat(\"demo-pool-%d\").build();\n    ExecutorService singleThreadPool = new ThreadPoolExecutor(1, 1,\n        0L, TimeUnit.MILLISECONDS,\n        new LinkedBlockingQueue<Runnable>(1024), namedThreadFactory, new ThreadPoolExecutor.AbortPolicy());\n    singleThreadPool.execute(()-> System.out.println(Thread.currentThread().getName()));\n    singleThreadPool.shutdown();\n\n    Positive example 2\uff1a\n    public class TimerTaskThread extends Thread {\n        public TimerTaskThread(){\n        super.setName(\"TimerTaskThread\"); \u2026\n    }\n</pre>", "severity": "CRITICAL", "status": "READY", "internalKey": "rulesets/java/ali-concurrent.xml/ThreadShouldSetNameRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "CRITICAL", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "pmd:AbstractClassShouldStartWithAbstractNamingRule": {"rule": {"key": "pmd:AbstractClassShouldStartWithAbstractNamingRule", "repo": "pmd", "name": "[p3c]Abstract class names must start with Abstract or Base.", "createdAt": "2023-07-27T03:12:15+0000", "htmlDesc": "Abstract class names must start with Abstract or Base. Examples:\n<pre>\n    abstract class BaseControllerDemo{\n    }\n    abstract class AbstractActionDemo{\n    }\n</pre>", "mdDesc": "Abstract class names must start with Abstract or Base. Examples:\n<pre>\n    abstract class BaseControllerDemo{\n    }\n    abstract class AbstractActionDemo{\n    }\n</pre>", "severity": "CRITICAL", "status": "READY", "internalKey": "rulesets/java/ali-naming.xml/AbstractClassShouldStartWithAbstractNamingRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MINOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-09-13T07:35:43+0000"}]}, "pmd:AbstractMethodOrInterfaceMethodMustUseJavadocRule": {"rule": {"key": "pmd:AbstractMethodOrInterfaceMethodMustUseJavadocRule", "repo": "pmd", "name": "[p3c]Abstract methods (including methods in interface) should be commented by Javadoc.", "createdAt": "2023-07-27T03:12:15+0000", "htmlDesc": "Abstract methods (including methods in interface) should be commented by Javadoc. Examples:\n<pre>\n    /**\n     * fetch data by rule id\n     *\n     * @param ruleId rule id\n     * @param page page number\n     * @param jsonContext json format context\n     * @return Result &gt;XxxxDO&lt;\n     */\n    Result&lt;XxxxDO&gt; fetchDataByRuleId(Long ruleId, Integer page, String jsonContext);\n</pre>", "mdDesc": "Abstract methods (including methods in interface) should be commented by Javadoc. Examples:\n<pre>\n    /**\n     * fetch data by rule id\n     *\n     * @param ruleId rule id\n     * @param page page number\n     * @param jsonContext json format context\n     * @return Result &gt;XxxxDO&lt;\n     */\n    Result&lt;XxxxDO&gt; fetchDataByRuleId(Long ruleId, Integer page, String jsonContext);\n</pre>", "severity": "MAJOR", "status": "READY", "internalKey": "rulesets/java/ali-comment.xml/AbstractMethodOrInterfaceMethodMustUseJavadocRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MINOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "pmd:EnumConstantsMustHaveCommentRule": {"rule": {"key": "pmd:EnumConstantsMustHaveCommentRule", "repo": "pmd", "name": "[p3c]All enumeration type fields should be commented as Javadoc style.", "createdAt": "2023-07-27T03:12:15+0000", "htmlDesc": "All enumeration type fields should be commented as Javadoc style.\n<p>Examples:</p>\n<pre>\n    public enum TestEnum {\n        /**\n         * agree\n         */\n        agree(\"agree\"),\n        /**\n         * reject\n         */\n        reject(\"reject\");\n\n        private String action;\n\n        TestEnum(String action) {\n            this.action = action;\n        }\n\n        public String getAction() {\n            return action;\n        }\n    }\n</pre>", "mdDesc": "All enumeration type fields should be commented as Javadoc style.\n<p>Examples:</p>\n<pre>\n    public enum TestEnum {\n        /**\n         * agree\n         */\n        agree(\"agree\"),\n        /**\n         * reject\n         */\n        reject(\"reject\");\n\n        private String action;\n\n        TestEnum(String action) {\n            this.action = action;\n        }\n\n        public String getAction() {\n            return action;\n        }\n    }\n</pre>", "severity": "CRITICAL", "status": "READY", "internalKey": "rulesets/java/ali-comment.xml/EnumConstantsMustHaveCommentRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "INFO", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-09-04T02:31:22+0000"}]}, "pmd:AvoidStartWithDollarAndUnderLineNamingRule": {"rule": {"key": "pmd:AvoidStartWithDollarAndUnderLineNamingRule", "repo": "pmd", "name": "[p3c]All names should not start or end with an underline or a dollar sign.", "createdAt": "2023-07-27T03:12:14+0000", "htmlDesc": "All names should not start or end with an underline or a dollar sign.\nExamples:\n<pre>\n</pre>", "mdDesc": "All names should not start or end with an underline or a dollar sign.\nExamples:\n<pre>\n</pre>", "severity": "CRITICAL", "status": "READY", "internalKey": "rulesets/java/ali-naming.xml/AvoidStartWithDollarAndUnderLineNamingRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "CRITICAL", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "pmd:ServiceOrDaoClassShouldEndWithImplRule": {"rule": {"key": "pmd:ServiceOrDaoClassShouldEndWithImplRule", "repo": "pmd", "name": "[p3c]All Service and DAO classes must be interface based on SOA principle. Implementation class names should be ended with Impl.", "createdAt": "2023-07-27T03:12:15+0000", "htmlDesc": "All Service and DAO classes must be interface based on SOA principle. Implementation class names should be ended with Impl.\n<p>Examples:</p>\n<pre>\n    public interface DemoService{\n        void f();\n    }\n    public class DemoServiceImpl implements DemoService {\n        @Override\n        public void f(){\n            System.out.println(\"hello world\");\n        }\n    }\n</pre>", "mdDesc": "All Service and DAO classes must be interface based on SOA principle. Implementation class names should be ended with Impl.\n<p>Examples:</p>\n<pre>\n    public interface DemoService{\n        void f();\n    }\n    public class DemoServiceImpl implements DemoService {\n        @Override\n        public void f(){\n            System.out.println(\"hello world\");\n        }\n    }\n</pre>", "severity": "CRITICAL", "status": "READY", "internalKey": "rulesets/java/ali-naming.xml/ServiceOrDaoClassShouldEndWithImplRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MINOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-09-13T05:54:56+0000"}]}, "pmd:TransactionMustHaveRollbackRule": {"rule": {"key": "pmd:TransactionMustHaveRollbackRule", "repo": "pmd", "name": "[p3c]Attribute rollbackFor of annotation Transactional must be set.", "createdAt": "2023-07-27T03:12:15+0000", "htmlDesc": "Make sure to invoke the rollback if a method throws an Exception.\n<p>Examples:</p>\n<pre>\n    Positive example 1\uff1a\n    /**\n     * @author caikang\n     * @date 2017/04/07\n     */\n    @Service\n    @Transactional(rollbackFor = Exception.class)\n    public class UserServiceImpl implements UserService {\n        @Override\n        public void save(User user) {\n            //some code\n            //db operation\n        }\n    }\n    Positive example 2\uff1a\n    /**\n     * @author caikang\n     * @date 2017/04/07\n     */\n    @Service\n    public class UserServiceImpl implements UserService {\n        @Override\n        @Transactional(rollbackFor = Exception.class)\n        public void save(User user) {\n            //some code\n            //db operation\n        }\n    }\n    Positive example 3\uff1a\n    /**\n     * @author caikang\n     * @date 2017/04/07\n     */\n    @Service\n    public class UserServiceImpl implements UserService {\n        @Autowired\n        private DataSourceTransactionManager transactionManager;\n        @Override\n        @Transactional\n        public void save(User user) {\n            DefaultTransactionDefinition def = new DefaultTransactionDefinition();\n            // explicitly setting the transaction name is something that can only be done programmatically\n            def.setName(\"SomeTxName\");\n            def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);\n            TransactionStatus status = transactionManager.getTransaction(def);\n            try {\n                // execute your business logic here\n                //db operation\n            } catch (Exception ex) {\n                transactionManager.rollback(status);\n                throw ex;\n            }\n        }\n    }\n</pre>", "mdDesc": "Make sure to invoke the rollback if a method throws an Exception.\n<p>Examples:</p>\n<pre>\n    Positive example 1\uff1a\n    /**\n     * @author caikang\n     * @date 2017/04/07\n     */\n    @Service\n    @Transactional(rollbackFor = Exception.class)\n    public class UserServiceImpl implements UserService {\n        @Override\n        public void save(User user) {\n            //some code\n            //db operation\n        }\n    }\n    Positive example 2\uff1a\n    /**\n     * @author caikang\n     * @date 2017/04/07\n     */\n    @Service\n    public class UserServiceImpl implements UserService {\n        @Override\n        @Transactional(rollbackFor = Exception.class)\n        public void save(User user) {\n            //some code\n            //db operation\n        }\n    }\n    Positive example 3\uff1a\n    /**\n     * @author caikang\n     * @date 2017/04/07\n     */\n    @Service\n    public class UserServiceImpl implements UserService {\n        @Autowired\n        private DataSourceTransactionManager transactionManager;\n        @Override\n        @Transactional\n        public void save(User user) {\n            DefaultTransactionDefinition def = new DefaultTransactionDefinition();\n            // explicitly setting the transaction name is something that can only be done programmatically\n            def.setName(\"SomeTxName\");\n            def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);\n            TransactionStatus status = transactionManager.getTransaction(def);\n            try {\n                // execute your business logic here\n                //db operation\n            } catch (Exception ex) {\n                transactionManager.rollback(status);\n                throw ex;\n            }\n        }\n    }\n</pre>", "severity": "CRITICAL", "status": "READY", "internalKey": "rulesets/java/ali-exception.xml/TransactionMustHaveRollbackRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "CRITICAL", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "pmd:AvoidApacheBeanUtilsCopyRule": {"rule": {"key": "pmd:AvoidApacheBeanUtilsCopyRule", "repo": "pmd", "name": "[p3c]Avoid using *Apache BeanUtils* to copy attributes.", "createdAt": "2023-07-27T03:12:15+0000", "htmlDesc": "Avoid using *Apache Beanutils* to copy attributes. Examples:\n<pre>\n    TestObject a = new TestObject();\n    TestObject b = new TestObject();\n    a.setX(b.getX());\n    a.setY(b.getY());\n</pre>", "mdDesc": "Avoid using *Apache Beanutils* to copy attributes. Examples:\n<pre>\n    TestObject a = new TestObject();\n    TestObject b = new TestObject();\n    a.setX(b.getX());\n    a.setY(b.getY());\n</pre>", "severity": "BLOCKER", "status": "READY", "internalKey": "rulesets/java/ali-other.xml/AvoidApacheBeanUtilsCopyRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "BLOCKER", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "pmd:AvoidConcurrentCompetitionRandomRule": {"rule": {"key": "pmd:AvoidConcurrentCompetitionRandomRule", "repo": "pmd", "name": "[p3c]Avoid using [Math.random()] by multiple threads.", "createdAt": "2023-07-27T03:12:15+0000", "htmlDesc": "Avoid using Random instance by multiple threads. Although it is safe to share this instance, competition on the same seed will damage performance. Note: Random instance includes instances of java.util.Random and Math.random().\nExamples:\n<pre>\n    Positive example 1\uff1a\n    /**\n     * @author caikang\n     * @date 2017/04/07\n     */\n    public class RandomInThread extends Thread {\n        private Random random = new Random();\n        @Override\n        public void run() {\n            long t = random.nextLong();\n        }\n    }\n    Positive example 2\uff1a\n    /**\n     * @author caikang\n     * @date 2017/04/07\n     */\n    public class RandomInThread extends Thread {\n        private Random random = ThreadLocalRandom.current();\n        @Override\n        public void run() {\n            long t = random.nextLong();\n        }\n    }\n</pre>", "mdDesc": "Avoid using Random instance by multiple threads. Although it is safe to share this instance, competition on the same seed will damage performance. Note: Random instance includes instances of java.util.Random and Math.random().\nExamples:\n<pre>\n    Positive example 1\uff1a\n    /**\n     * @author caikang\n     * @date 2017/04/07\n     */\n    public class RandomInThread extends Thread {\n        private Random random = new Random();\n        @Override\n        public void run() {\n            long t = random.nextLong();\n        }\n    }\n    Positive example 2\uff1a\n    /**\n     * @author caikang\n     * @date 2017/04/07\n     */\n    public class RandomInThread extends Thread {\n        private Random random = ThreadLocalRandom.current();\n        @Override\n        public void run() {\n            long t = random.nextLong();\n        }\n    }\n</pre>", "severity": "MAJOR", "status": "READY", "internalKey": "rulesets/java/ali-concurrent.xml/AvoidConcurrentCompetitionRandomRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "pmd:BigDecimalAvoidDoubleConstructorRule": {"rule": {"key": "pmd:BigDecimalAvoidDoubleConstructorRule", "repo": "pmd", "name": "[p3c]Avoid using the constructor BigDecimal(double) to convert double value to a BigDecimal object.", "createdAt": "2023-08-31T08:26:02+0000", "htmlDesc": "<p>\u8bf4\u660e\uff1aBigDecimal(double)\u5b58\u5728\u7cbe\u5ea6\u635f\u5931\u98ce\u9669\uff0c\u5728\u7cbe\u786e\u8ba1\u7b97\u6216\u503c\u6bd4\u8f83\u7684\u573a\u666f\u4e2d\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4e1a\u52a1\u903b\u8f91\u5f02\u5e38\u3002</p>\n  Negative example:\n<pre>\n  BigDecimal good1 = new BigDecimal(0.1);\n</pre>\n  Positive example:\n<pre>\n  BigDecimal good1 = new BigDecimal(\"0.1\");\n  BigDecimal good2 = BigDecimal.valueOf(0.1);\n</pre>", "mdDesc": "<p>\u8bf4\u660e\uff1aBigDecimal(double)\u5b58\u5728\u7cbe\u5ea6\u635f\u5931\u98ce\u9669\uff0c\u5728\u7cbe\u786e\u8ba1\u7b97\u6216\u503c\u6bd4\u8f83\u7684\u573a\u666f\u4e2d\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4e1a\u52a1\u903b\u8f91\u5f02\u5e38\u3002</p>\n  Negative example:\n<pre>\n  BigDecimal good1 = new BigDecimal(0.1);\n</pre>\n  Positive example:\n<pre>\n  BigDecimal good1 = new BigDecimal(\"0.1\");\n  BigDecimal good2 = BigDecimal.valueOf(0.1);\n</pre>", "severity": "MAJOR", "status": "READY", "internalKey": "rulesets/java/ali-oop.xml/BigDecimalAvoidDoubleConstructorRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "debtOverloaded": false, "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "pmd:NeedBraceRule": {"rule": {"key": "pmd:NeedBraceRule", "repo": "pmd", "name": "[p3c]Braces are used with if, else, for, do and while statements, even if the body contains only a single statement.", "createdAt": "2023-07-27T03:12:14+0000", "htmlDesc": "Braces are used with if, else, for, do and while statements, even if the body contains only a single statement. Avoid using the following example: if (condition) statements;\n<p>Examples:</p>\n<pre>\n    if (flag) {\n            System.out.println(\"hello world\");\n    }\n</pre>", "mdDesc": "Braces are used with if, else, for, do and while statements, even if the body contains only a single statement. Avoid using the following example: if (condition) statements;\n<p>Examples:</p>\n<pre>\n    if (flag) {\n            System.out.println(\"hello world\");\n    }\n</pre>", "severity": "BLOCKER", "status": "READY", "internalKey": "rulesets/java/ali-flowcontrol.xml/NeedBraceRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "BLOCKER", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "pmd:ArrayNamingShouldHaveBracketRule": {"rule": {"key": "pmd:ArrayNamingShouldHaveBracketRule", "repo": "pmd", "name": "[p3c]Brackets are a part of an Array type. The definition could be: String[] args", "createdAt": "2023-07-27T03:12:15+0000", "htmlDesc": "Brackets are a part of an Array type. The definition could be: String[] args. Examples:\n<pre>\n   String[] a = new String[3];\n</pre>", "mdDesc": "Brackets are a part of an Array type. The definition could be: String[] args. Examples:\n<pre>\n   String[] a = new String[3];\n</pre>", "severity": "MAJOR", "status": "READY", "internalKey": "rulesets/java/ali-naming.xml/ArrayNamingShouldHaveBracketRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "pmd:ClassNamingShouldBeCamelRule": {"rule": {"key": "pmd:ClassNamingShouldBeCamelRule", "repo": "pmd", "name": "[p3c]Class names should be nouns in UpperCamelCase except domain models: DO, BO, DTO, VO, etc.", "createdAt": "2023-07-27T03:12:15+0000", "htmlDesc": "Class names should be nouns in UpperCamelCase except domain models: DO, BO, DTO, VO, etc.\n<p>Examples:</p>\n<pre>\n</pre>", "mdDesc": "Class names should be nouns in UpperCamelCase except domain models: DO, BO, DTO, VO, etc.\n<p>Examples:</p>\n<pre>\n</pre>", "severity": "MAJOR", "status": "READY", "internalKey": "rulesets/java/ali-naming.xml/ClassNamingShouldBeCamelRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MINOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-09-12T03:32:11+0000"}]}, "pmd:RemoveCommentedCodeRule": {"rule": {"key": "pmd:RemoveCommentedCodeRule", "repo": "pmd", "name": "[p3c]Codes or configuration that is noticed to be obsoleted should be resolutely removed from projects.", "createdAt": "2023-07-27T03:12:15+0000", "htmlDesc": "Codes or configuration that is noticed to be obsoleted should be resolutely removed from projects.\n<p>Examples:</p>\n<pre>\n public static void hello() {\n    /// Business is stopped temporarily by the owner.\n    // Business business = new Business();\n    // business.active();\n    System.out.println(\"it's finished\");\n }\n</pre>", "mdDesc": "Codes or configuration that is noticed to be obsoleted should be resolutely removed from projects.\n<p>Examples:</p>\n<pre>\n public static void hello() {\n    /// Business is stopped temporarily by the owner.\n    // Business business = new Business();\n    // business.active();\n    System.out.println(\"it's finished\");\n }\n</pre>", "severity": "MAJOR", "status": "READY", "internalKey": "rulesets/java/ali-comment.xml/RemoveCommentedCodeRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MINOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-10-09T02:52:57+0000"}]}, "pmd:ConstantFieldShouldBeUpperCaseRule": {"rule": {"key": "pmd:ConstantFieldShouldBeUpperCaseRule", "repo": "pmd", "name": "[p3c]Constant variable names should be written in upper characters separated by underscores.", "createdAt": "2023-07-27T03:12:15+0000", "htmlDesc": "Constant variable names should be written in upper characters separated by underscores. These names should be semantically complete and clear\n<p>Examples:</p>\n<pre>\n    public class ConstantNameDemo {\n    /**\n    * max stock count\n    */\n    public static final Long MAX_STOCK_COUNT = 50000L;\n</pre>", "mdDesc": "Constant variable names should be written in upper characters separated by underscores. These names should be semantically complete and clear\n<p>Examples:</p>\n<pre>\n    public class ConstantNameDemo {\n    /**\n    * max stock count\n    */\n    public static final Long MAX_STOCK_COUNT = 50000L;\n</pre>", "severity": "CRITICAL", "status": "READY", "internalKey": "rulesets/java/ali-naming.xml/ConstantFieldShouldBeUpperCaseRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MINOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-09-13T06:50:31+0000"}]}, "pmd:UseRightCaseForDateFormatRule": {"rule": {"key": "pmd:UseRightCaseForDateFormatRule", "repo": "pmd", "name": "[p3c]Date format string [%s] is error,When doing date formatting, 'y' should be written in lowercase for 'year'.", "createdAt": "2023-07-27T03:12:15+0000", "htmlDesc": "When doing date formatting, \"yyyy\" represents the day in which year, while \"YYYY\" represents the week in which\n * year (a concept introduced in JDK7). If a week is across two years, the returning \"YYYY\"represents the next year.\n<p>Examples:</p>\n<pre>\nNegative example:\n    SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n    \nPositive example:\n        SimpleDateFormat format = new SimpleDateFormat(\"YYYY-mm-dd HH:mm:ss\");\n</pre>", "mdDesc": "When doing date formatting, \"yyyy\" represents the day in which year, while \"YYYY\" represents the week in which\n * year (a concept introduced in JDK7). If a week is across two years, the returning \"YYYY\"represents the next year.\n<p>Examples:</p>\n<pre>\nNegative example:\n    SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n    \nPositive example:\n        SimpleDateFormat format = new SimpleDateFormat(\"YYYY-mm-dd HH:mm:ss\");\n</pre>", "severity": "CRITICAL", "status": "READY", "internalKey": "rulesets/java/ali-other.xml/UseRightCaseForDateFormatRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "CRITICAL", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "pmd:BooleanPropertyShouldNotStartWithIsRule": {"rule": {"key": "pmd:BooleanPropertyShouldNotStartWithIsRule", "repo": "pmd", "name": "[p3c]Do not add 'is' as prefix while defining Boolean variable.", "createdAt": "2023-07-27T03:12:15+0000", "htmlDesc": "Do not add 'is' as prefix while defining Boolean variable, since it may cause a serialization exception in some Java Frameworks\n<p>Examples:</p>\n<pre>\n    public class DemoDO{\n        Boolean success;\n        Boolean delete;\n    }\n</pre>", "mdDesc": "Do not add 'is' as prefix while defining Boolean variable, since it may cause a serialization exception in some Java Frameworks\n<p>Examples:</p>\n<pre>\n    public class DemoDO{\n        Boolean success;\n        Boolean delete;\n    }\n</pre>", "severity": "CRITICAL", "status": "READY", "internalKey": "rulesets/java/ali-naming.xml/BooleanPropertyShouldNotStartWithIsRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "CRITICAL", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "pmd:ClassCastExceptionWithSubListToArrayListRule": {"rule": {"key": "pmd:ClassCastExceptionWithSubListToArrayListRule", "repo": "pmd", "name": "[p3c]Do not cast subList in class ArrayList, otherwise ClassCastException will be thrown.", "createdAt": "2023-07-27T03:12:15+0000", "htmlDesc": "Do not cast subList in class ArrayList, otherwise ClassCastException will be thrown.\n<p>Examples:</p>\n<pre>\n    Negative example:\n    List<String> list = new ArrayList<String>();\n    list.add(\"22\");\n    //warn\n    List<String> test = (ArrayList<String>) list.subList(0, 1);\n\n    Positive example:\n    List<String> list2 = new ArrayList<String>(list.subList(0, 1));\n</pre>", "mdDesc": "Do not cast subList in class ArrayList, otherwise ClassCastException will be thrown.\n<p>Examples:</p>\n<pre>\n    Negative example:\n    List<String> list = new ArrayList<String>();\n    list.add(\"22\");\n    //warn\n    List<String> test = (ArrayList<String>) list.subList(0, 1);\n\n    Positive example:\n    List<String> list2 = new ArrayList<String>(list.subList(0, 1));\n</pre>", "severity": "CRITICAL", "status": "READY", "internalKey": "rulesets/java/ali-set.xml/ClassCastExceptionWithSubListToArrayListRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "CRITICAL", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "pmd:DontModifyInForeachCircleRule": {"rule": {"key": "pmd:DontModifyInForeachCircleRule", "repo": "pmd", "name": "[p3c]Do not remove or add elements to a collection in a foreach loop.", "createdAt": "2023-07-27T03:12:15+0000", "htmlDesc": "Do not remove or add elements to a collection in a foreach loop. Please use Iterator to remove an item. Iterator object should be synchronized when executing concurrent operations.\n<p>Examples:</p>\n<pre>\n    Negative example:\n    List<String> originList = new ArrayList<String>();\n    originList.add(\"22\");\n    for (String item : originList) {\n      //warn\n      list.add(\"bb\");\n    }\n\n    Positive example:\n    Iterator<Integer> it=b.iterator();\n    while(it.hasNext()){\n    Integer temp =  it.next();\n        if (delCondition) {\n          it.remove();\n        }\n    }\n</pre>", "mdDesc": "Do not remove or add elements to a collection in a foreach loop. Please use Iterator to remove an item. Iterator object should be synchronized when executing concurrent operations.\n<p>Examples:</p>\n<pre>\n    Negative example:\n    List<String> originList = new ArrayList<String>();\n    originList.add(\"22\");\n    for (String item : originList) {\n      //warn\n      list.add(\"bb\");\n    }\n\n    Positive example:\n    Iterator<Integer> it=b.iterator();\n    while(it.hasNext()){\n    Integer temp =  it.next();\n        if (delCondition) {\n          it.remove();\n        }\n    }\n</pre>", "severity": "BLOCKER", "status": "READY", "internalKey": "rulesets/java/ali-set.xml/DontModifyInForeachCircleRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "BLOCKER", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "pmd:AvoidComplexConditionRule": {"rule": {"key": "pmd:AvoidComplexConditionRule", "repo": "pmd", "name": "[p3c]Do not use complicated statements in conditional statements.", "createdAt": "2023-07-27T03:12:15+0000", "htmlDesc": "Do not use complicated statements in conditional statements (except for frequently used methods like getXxx/isXxx). Use boolean variables to store results of complicated statements temporarily will increase the code's readability.\n<p>Examples:</p>\n<pre>\n    Negative example:\n    if ((file.open(fileName, \"w\") != null) && (...) || (...)) {\n        // ...\n    }\n\n    Positive example:\n    boolean existed = (file.open(fileName, \"w\") != null) && (...) || (...);\n    if (existed) {\n        //...\n    }\n</pre>", "mdDesc": "Do not use complicated statements in conditional statements (except for frequently used methods like getXxx/isXxx). Use boolean variables to store results of complicated statements temporarily will increase the code's readability.\n<p>Examples:</p>\n<pre>\n    Negative example:\n    if ((file.open(fileName, \"w\") != null) && (...) || (...)) {\n        // ...\n    }\n\n    Positive example:\n    boolean existed = (file.open(fileName, \"w\") != null) && (...) || (...);\n    if (existed) {\n        //...\n    }\n</pre>", "severity": "MAJOR", "status": "READY", "internalKey": "rulesets/java/ali-flowcontrol.xml/AvoidComplexConditionRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "pmd:UnsupportedExceptionWithModifyAsListRule": {"rule": {"key": "pmd:UnsupportedExceptionWithModifyAsListRule", "repo": "pmd", "name": "[p3c]Do not use methods which will modify the list after using Arrays.asList to convert array to list.", "createdAt": "2023-07-27T03:12:15+0000", "htmlDesc": "Do not use methods which will modify the list after using Arrays.asList to convert array to list, otherwise methods like add/remove/clear will throw UnsupportedOperationException. \n<p>Examples:</p>\n<pre>\n    Positive example:\n    List<String> t   = Arrays.asList(\"a\",\"b\",\"c\");\n    //warn\n    t.add(\"22\");\n    //warn\n    t.remove(\"22\");\n    //warn\n    t.clear();\n\n</pre>", "mdDesc": "Do not use methods which will modify the list after using Arrays.asList to convert array to list, otherwise methods like add/remove/clear will throw UnsupportedOperationException. \n<p>Examples:</p>\n<pre>\n    Positive example:\n    List<String> t   = Arrays.asList(\"a\",\"b\",\"c\");\n    //warn\n    t.add(\"22\");\n    //warn\n    t.remove(\"22\");\n    //warn\n    t.clear();\n\n</pre>", "severity": "CRITICAL", "status": "READY", "internalKey": "rulesets/java/ali-set.xml/UnsupportedExceptionWithModifyAsListRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "CRITICAL", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "pmd:ClassCastExceptionWithToArrayRule": {"rule": {"key": "pmd:ClassCastExceptionWithToArrayRule", "repo": "pmd", "name": "[p3c]Do not use toArray method without arguments.", "createdAt": "2023-07-27T03:12:15+0000", "htmlDesc": "Do not use toArray method without arguments. Since the return type is Object[], ClassCastException will be thrown when casting it to a different array type.\n<p>Examples:</p>\n<pre>\n    Negative example:\n    Integer[] a = (Integer [])c.toArray();\n\n    Positive example\uff1a\n    Integer[] b = (Integer [])c.toArray(new Integer[c.size()]);\n</pre>", "mdDesc": "Do not use toArray method without arguments. Since the return type is Object[], ClassCastException will be thrown when casting it to a different array type.\n<p>Examples:</p>\n<pre>\n    Negative example:\n    Integer[] a = (Integer [])c.toArray();\n\n    Positive example\uff1a\n    Integer[] b = (Integer [])c.toArray(new Integer[c.size()]);\n</pre>", "severity": "CRITICAL", "status": "READY", "internalKey": "rulesets/java/ali-set.xml/ClassCastExceptionWithToArrayRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "CRITICAL", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "pmd:EqualsAvoidNullRule": {"rule": {"key": "pmd:EqualsAvoidNullRule", "repo": "pmd", "name": "[p3c]Equals should be invoked by a constant or an object that is definitely not null.", "createdAt": "2023-07-27T03:12:15+0000", "htmlDesc": "Since NullPointerException can possibly be thrown while calling the equals method of Object, equals should be invoked by a constant or an object that is definitely not null.\n<p>Examples:</p>\n<pre>\n    public void f(String str){\n        String inner = \"hi\";\n        if (inner.equals(str)) {\n            System.out.println(\"hello world\");\n        }\n    }\n</pre>", "mdDesc": "Since NullPointerException can possibly be thrown while calling the equals method of Object, equals should be invoked by a constant or an object that is definitely not null.\n<p>Examples:</p>\n<pre>\n    public void f(String str){\n        String inner = \"hi\";\n        if (inner.equals(str)) {\n            System.out.println(\"hello world\");\n        }\n    }\n</pre>", "severity": "CRITICAL", "status": "READY", "internalKey": "rulesets/java/ali-oop.xml/EqualsAvoidNullRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MINOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-09-13T07:34:44+0000"}]}, "pmd:ClassMustHaveAuthorRule": {"rule": {"key": "pmd:ClassMustHaveAuthorRule", "repo": "pmd", "name": "[p3c]Every class should include information of author(s) and date.", "createdAt": "2023-07-27T03:12:15+0000", "htmlDesc": "Every class should include information of author(s) and date.<br>\nNote: When setting template in IDE, the format of author in IDEA is ${USER}, while in Eclipse is ${user} (Case sensitive).\nThe format of date is 'yyyy/MM/dd'.\n<p>Examples:</p>\n<pre>\n    /**\n     * Demo class\n     *\n     * @author keriezhang\n     * @date 2016/10/31\n     */\n    public class CodeNoteDemo {\n    }\n</pre>", "mdDesc": "Every class should include information of author(s) and date.<br>\nNote: When setting template in IDE, the format of author in IDEA is ${USER}, while in Eclipse is ${user} (Case sensitive).\nThe format of date is 'yyyy/MM/dd'.\n<p>Examples:</p>\n<pre>\n    /**\n     * Demo class\n     *\n     * @author keriezhang\n     * @date 2016/10/31\n     */\n    public class CodeNoteDemo {\n    }\n</pre>", "severity": "MAJOR", "status": "READY", "internalKey": "rulesets/java/ali-comment.xml/ClassMustHaveAuthorRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MINOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "pmd:AvoidManuallyCreateThreadRule": {"rule": {"key": "pmd:AvoidManuallyCreateThreadRule", "repo": "pmd", "name": "[p3c]Explicitly creating threads is not allowed, use thread pool instead.", "createdAt": "2023-08-31T08:26:02+0000", "htmlDesc": "Threads should be provided by thread pools. Explicitly creating threads is not allowed. Examples:\n<pre>\n    ThreadFactory namedThreadFactory = new ThreadFactoryBuilder()\n        .setNameFormat(\"demo-pool-%d\").build();\n    ExecutorService singleThreadPool = new ThreadPoolExecutor(1, 1,\n        0L, TimeUnit.MILLISECONDS,\n        new LinkedBlockingQueue<Runnable>(1024), namedThreadFactory, new ThreadPoolExecutor.AbortPolicy());\n\n    singleThreadPool.execute(()-> System.out.println(Thread.currentThread().getName()));\n    singleThreadPool.shutdown();\n</pre>", "mdDesc": "Threads should be provided by thread pools. Explicitly creating threads is not allowed. Examples:\n<pre>\n    ThreadFactory namedThreadFactory = new ThreadFactoryBuilder()\n        .setNameFormat(\"demo-pool-%d\").build();\n    ExecutorService singleThreadPool = new ThreadPoolExecutor(1, 1,\n        0L, TimeUnit.MILLISECONDS,\n        new LinkedBlockingQueue<Runnable>(1024), namedThreadFactory, new ThreadPoolExecutor.AbortPolicy());\n\n    singleThreadPool.execute(()-> System.out.println(Thread.currentThread().getName()));\n    singleThreadPool.shutdown();\n</pre>", "severity": "CRITICAL", "status": "READY", "internalKey": "rulesets/java/ali-concurrent.xml/AvoidManuallyCreateThreadRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MINOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-10-10T01:48:54+0000"}]}, "pmd:CollectionInitShouldAssignCapacityRule": {"rule": {"key": "pmd:CollectionInitShouldAssignCapacityRule", "repo": "pmd", "name": "[p3c]HashMap should set a size when initializing.", "createdAt": "2023-07-27T03:12:15+0000", "htmlDesc": "Set a size when initializing a collection if possible.\n<p>Examples:</p>\n<pre>\n    Negative example:\n    Map<String, String> map = new HashMap<String, String>();\n\n    Positive example:\n    Map<String, String> map = new HashMap<String, String>(16);\n</pre>", "mdDesc": "Set a size when initializing a collection if possible.\n<p>Examples:</p>\n<pre>\n    Negative example:\n    Map<String, String> map = new HashMap<String, String>();\n\n    Positive example:\n    Map<String, String> map = new HashMap<String, String>(16);\n</pre>", "severity": "MAJOR", "status": "READY", "internalKey": "rulesets/java/ali-set.xml/CollectionInitShouldAssignCapacityRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MINOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-09-12T03:31:24+0000"}]}, "pmd:IbatisMethodQueryForListRule": {"rule": {"key": "pmd:IbatisMethodQueryForListRule", "repo": "pmd", "name": "[p3c]iBatis built in com.ibatis.sqlmap.client.SqlMapClient.queryForList(String statementName,int start,int size) is not recommended", "createdAt": "2023-08-31T08:26:01+0000", "htmlDesc": "iBatis built in queryForList(String statementName, int start, int size) is not recommended.", "mdDesc": "iBatis built in queryForList(String statementName, int start, int size) is not recommended.", "severity": "MAJOR", "status": "READY", "internalKey": "rulesets/java/ali-orm.xml/IbatisMethodQueryForListRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "pmd:MethodReturnWrapperTypeRule": {"rule": {"key": "pmd:MethodReturnWrapperTypeRule", "repo": "pmd", "name": "[p3c]If the return type is primitive, return a value of wrapper class may cause NullPointerException.", "createdAt": "2023-07-27T03:12:14+0000", "htmlDesc": "If the return type is primitive, return a value of wrapper class may cause NullPointerException.\n<p>Examples:</p>\n<pre>\n    public int method() {\n        Integer a = null;\n        return a;\n    }\n</pre>", "mdDesc": "If the return type is primitive, return a value of wrapper class may cause NullPointerException.\n<p>Examples:</p>\n<pre>\n    public int method() {\n        Integer a = null;\n        return a;\n    }\n</pre>", "severity": "MAJOR", "status": "READY", "internalKey": "rulesets/java/ali-exception.xml/MethodReturnWrapperTypeRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "pmd:SwitchStatementRule": {"rule": {"key": "pmd:SwitchStatementRule", "repo": "pmd", "name": "[p3c]In a switch block, each case should be finished by break/return.", "createdAt": "2023-07-27T03:12:15+0000", "htmlDesc": "In a switch block, each case should be finished by break/return. If not, a note should be included to describe at which case it will stop. Within every switch block, a default statement must be present, even if it is empty.\n<p>Examples:</p>\n<pre>\n    switch (x) {\n        case 1:\n            break;\n        case 2:\n            break;\n        default:\n    }\n</pre>", "mdDesc": "In a switch block, each case should be finished by break/return. If not, a note should be included to describe at which case it will stop. Within every switch block, a default statement must be present, even if it is empty.\n<p>Examples:</p>\n<pre>\n    switch (x) {\n        case 1:\n            break;\n        case 2:\n            break;\n        default:\n    }\n</pre>", "severity": "CRITICAL", "status": "READY", "internalKey": "rulesets/java/ali-flowcontrol.xml/SwitchStatementRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "CRITICAL", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "pmd:CommentsMustBeJavadocFormatRule": {"rule": {"key": "pmd:CommentsMustBeJavadocFormatRule", "repo": "pmd", "name": "[p3c]Javadoc should be used for classes, class variables and methods. The format should be '/** comment **/', rather than '// xxx'.", "createdAt": "2023-07-27T03:12:15+0000", "htmlDesc": "Javadoc should be used for classes, class variables and methods. The format should be '/** comment **/', rather than '// xxx'.\n<p>Examples:</p>\n<pre>\n/**\n*\n* XXX class function description.\n*\n*/\npublic class XxClass implements Serializable {\n   private static final long serialVersionUID = 113323427779853001L;\n   /**\n   * id\n   */\n   private Long id;\n   /**\n   * title\n   */\n   private String title;\n   /**\n   * find by id\n   *\n   * @param ruleId rule id\n   * @param page start from 1\n   * @return Result<Xxxx>\n   */\n   public Result<Xxxx> funcA(Long ruleId, Integer page) {\n       return null;\n   }\n}\n</pre>", "mdDesc": "Javadoc should be used for classes, class variables and methods. The format should be '/** comment **/', rather than '// xxx'.\n<p>Examples:</p>\n<pre>\n/**\n*\n* XXX class function description.\n*\n*/\npublic class XxClass implements Serializable {\n   private static final long serialVersionUID = 113323427779853001L;\n   /**\n   * id\n   */\n   private Long id;\n   /**\n   * title\n   */\n   private String title;\n   /**\n   * find by id\n   *\n   * @param ruleId rule id\n   * @param page start from 1\n   * @return Result<Xxxx>\n   */\n   public Result<Xxxx> funcA(Long ruleId, Integer page) {\n       return null;\n   }\n}\n</pre>", "severity": "MAJOR", "status": "READY", "internalKey": "rulesets/java/ali-comment.xml/CommentsMustBeJavadocFormatRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MINOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-09-04T01:28:31+0000"}]}, "pmd:LockShouldWithTryFinallyRule": {"rule": {"key": "pmd:LockShouldWithTryFinallyRule", "repo": "pmd", "name": "[p3c]Lock operation [%s] must immediately follow by try block, and unlock operation must be placed in the first line of finally block.", "createdAt": "2023-08-31T08:26:01+0000", "htmlDesc": "<p>\n\u5728\u4f7f\u7528\u963b\u585e\u7b49\u5f85\u83b7\u53d6\u9501\u7684\u65b9\u5f0f\u4e2d\uff0c\u5fc5\u987b\u5728try\u4ee3\u7801\u5757\u4e4b\u5916\uff0c\u5e76\u4e14\u5728\u52a0\u9501\u65b9\u6cd5\u4e0etry\u4ee3\u7801\u5757\u4e4b\u95f4\u6ca1\u6709\u4efb\u4f55\u53ef\u80fd\u629b\u51fa\u5f02\u5e38\u7684\u65b9\u6cd5\u8c03\u7528\uff0c\u907f\u514d\u52a0\u9501\u6210\u529f\u540e\uff0c\u5728finally\u4e2d\u65e0\u6cd5\u89e3\u9501\u3002\n\u8bf4\u660e\u4e00\uff1a\u5982\u679c\u5728lock\u65b9\u6cd5\u4e0etry\u4ee3\u7801\u5757\u4e4b\u95f4\u7684\u65b9\u6cd5\u8c03\u7528\u629b\u51fa\u5f02\u5e38\uff0c\u90a3\u4e48\u65e0\u6cd5\u89e3\u9501\uff0c\u9020\u6210\u5176\u5b83\u7ebf\u7a0b\u65e0\u6cd5\u6210\u529f\u83b7\u53d6\u9501\u3002\n\u8bf4\u660e\u4e8c\uff1a\u5982\u679clock\u65b9\u6cd5\u5728try\u4ee3\u7801\u5757\u4e4b\u5185\uff0c\u53ef\u80fd\u7531\u4e8e\u5176\u5b83\u65b9\u6cd5\u629b\u51fa\u5f02\u5e38\uff0c\u5bfc\u81f4\u5728finally\u4ee3\u7801\u5757\u4e2d\uff0cunlock\u5bf9\u672a\u52a0\u9501\u7684\u5bf9\u8c61\u89e3\u9501\uff0c\u5b83\u4f1a\u8c03\u7528AQS\u7684tryRelease\u65b9\u6cd5\uff08\u53d6\u51b3\u4e8e\u5177\u4f53\u5b9e\u73b0\u7c7b\uff09\uff0c\u629b\u51faIllegalMonitorStateException\u5f02\u5e38\u3002\n\u8bf4\u660e\u4e09\uff1a\u5728Lock\u5bf9\u8c61\u7684lock\u65b9\u6cd5\u5b9e\u73b0\u4e2d\u53ef\u80fd\u629b\u51faunchecked\u5f02\u5e38\uff0c\u4ea7\u751f\u7684\u540e\u679c\u4e0e\u8bf4\u660e\u4e8c\u76f8\u540c\u3002\n</p>\nexample:\n<pre>\nPositive example\uff1a\nLock lock = new XxxLock();\n// ...\nlock.lock();\ntry {\ndoSomething();\ndoOthers();\n} finally {\nlock.unlock();\n}\n\n  Negative example\uff1a\n  Lock lock = new XxxLock();\n  // ...\n  try {\n  // If an exception is thrown here, the finally block is executed directly\n  doSomething();\n  // The finally block executes regardless of whether the lock is successful or not\n  lock.lock();\n  doOthers();\n\n  } finally {\n  lock.unlock();\n  }\n\n  </pre>", "mdDesc": "<p>\n\u5728\u4f7f\u7528\u963b\u585e\u7b49\u5f85\u83b7\u53d6\u9501\u7684\u65b9\u5f0f\u4e2d\uff0c\u5fc5\u987b\u5728try\u4ee3\u7801\u5757\u4e4b\u5916\uff0c\u5e76\u4e14\u5728\u52a0\u9501\u65b9\u6cd5\u4e0etry\u4ee3\u7801\u5757\u4e4b\u95f4\u6ca1\u6709\u4efb\u4f55\u53ef\u80fd\u629b\u51fa\u5f02\u5e38\u7684\u65b9\u6cd5\u8c03\u7528\uff0c\u907f\u514d\u52a0\u9501\u6210\u529f\u540e\uff0c\u5728finally\u4e2d\u65e0\u6cd5\u89e3\u9501\u3002\n\u8bf4\u660e\u4e00\uff1a\u5982\u679c\u5728lock\u65b9\u6cd5\u4e0etry\u4ee3\u7801\u5757\u4e4b\u95f4\u7684\u65b9\u6cd5\u8c03\u7528\u629b\u51fa\u5f02\u5e38\uff0c\u90a3\u4e48\u65e0\u6cd5\u89e3\u9501\uff0c\u9020\u6210\u5176\u5b83\u7ebf\u7a0b\u65e0\u6cd5\u6210\u529f\u83b7\u53d6\u9501\u3002\n\u8bf4\u660e\u4e8c\uff1a\u5982\u679clock\u65b9\u6cd5\u5728try\u4ee3\u7801\u5757\u4e4b\u5185\uff0c\u53ef\u80fd\u7531\u4e8e\u5176\u5b83\u65b9\u6cd5\u629b\u51fa\u5f02\u5e38\uff0c\u5bfc\u81f4\u5728finally\u4ee3\u7801\u5757\u4e2d\uff0cunlock\u5bf9\u672a\u52a0\u9501\u7684\u5bf9\u8c61\u89e3\u9501\uff0c\u5b83\u4f1a\u8c03\u7528AQS\u7684tryRelease\u65b9\u6cd5\uff08\u53d6\u51b3\u4e8e\u5177\u4f53\u5b9e\u73b0\u7c7b\uff09\uff0c\u629b\u51faIllegalMonitorStateException\u5f02\u5e38\u3002\n\u8bf4\u660e\u4e09\uff1a\u5728Lock\u5bf9\u8c61\u7684lock\u65b9\u6cd5\u5b9e\u73b0\u4e2d\u53ef\u80fd\u629b\u51faunchecked\u5f02\u5e38\uff0c\u4ea7\u751f\u7684\u540e\u679c\u4e0e\u8bf4\u660e\u4e8c\u76f8\u540c\u3002\n</p>\nexample:\n<pre>\nPositive example\uff1a\nLock lock = new XxxLock();\n// ...\nlock.lock();\ntry {\ndoSomething();\ndoOthers();\n} finally {\nlock.unlock();\n}\n\n  Negative example\uff1a\n  Lock lock = new XxxLock();\n  // ...\n  try {\n  // If an exception is thrown here, the finally block is executed directly\n  doSomething();\n  // The finally block executes regardless of whether the lock is successful or not\n  lock.lock();\n  doOthers();\n\n  } finally {\n  lock.unlock();\n  }\n\n  </pre>", "severity": "MAJOR", "status": "READY", "internalKey": "rulesets/java/ali-concurrent.xml/LockShouldWithTryFinallyRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "debtOverloaded": false, "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "pmd:UndefineMagicConstantRule": {"rule": {"key": "pmd:UndefineMagicConstantRule", "repo": "pmd", "name": "[p3c]Magic values, except for predefined, are forbidden in coding.", "createdAt": "2023-07-27T03:12:14+0000", "htmlDesc": "Magic values, except for predefined, are forbidden in coding.\n<p>Examples:</p>\n<pre>\n    Negative example:\n    //Magic values, except for predefined, are forbidden in coding.\n    if (key.equals(\"Id#taobao_1\")) {\n            //...\n    }\n    Positive example:\n    String KEY_PRE = \"Id#taobao_1\";\n    if (KEY_PRE.equals(key)) {\n            //...\n    }\n</pre>", "mdDesc": "Magic values, except for predefined, are forbidden in coding.\n<p>Examples:</p>\n<pre>\n    Negative example:\n    //Magic values, except for predefined, are forbidden in coding.\n    if (key.equals(\"Id#taobao_1\")) {\n            //...\n    }\n    Positive example:\n    String KEY_PRE = \"Id#taobao_1\";\n    if (KEY_PRE.equals(key)) {\n            //...\n    }\n</pre>", "severity": "MAJOR", "status": "READY", "internalKey": "rulesets/java/ali-constant.xml/UndefineMagicConstantRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MINOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-09-04T01:32:41+0000"}]}, "pmd:ThreadPoolCreationRule": {"rule": {"key": "pmd:ThreadPoolCreationRule", "repo": "pmd", "name": "[p3c]Manually create thread pool is better.", "createdAt": "2023-07-27T03:12:15+0000", "htmlDesc": "A thread pool should be created by ThreadPoolExecutor rather than Executors. These would make the parameters of the thread pool understandable. It would also reduce the risk of running out of system resource.\n<p>Examples:</p>\n<pre>\n    Positive example 1\uff1a\n    //org.apache.commons.lang3.concurrent.BasicThreadFactory\n    ScheduledExecutorService executorService = new ScheduledThreadPoolExecutor(1, new BasicThreadFactory.Builder().namingPattern(\"example-schedule-pool-%d\").daemon(true).build());\n\n    Positive example 2\uff1a\n    ThreadFactory namedThreadFactory = new ThreadFactoryBuilder()\n        .setNameFormat(\"demo-pool-%d\").build();\n    //Common Thread Pool\n    ExecutorService pool = new ThreadPoolExecutor(5, 200,\n        0L, TimeUnit.MILLISECONDS,\n        new LinkedBlockingQueue<Runnable>(1024), namedThreadFactory, new ThreadPoolExecutor.AbortPolicy());\n    pool.execute(()-> System.out.println(Thread.currentThread().getName()));\n    pool.shutdown();//gracefully shutdown\n\n    Positive example 3\uff1a\n    <bean id=\"userThreadPool\"\n          class=\"org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor\">\n        <property name=\"corePoolSize\" value=\"10\" />\n        <property name=\"maxPoolSize\" value=\"100\" />\n        <property name=\"queueCapacity\" value=\"2000\" />\n    <property name=\"threadFactory\" value= threadFactory />\n        <property name=\"rejectedExecutionHandler\">\n            <ref local=\"rejectedExecutionHandler\" />\n        </property>\n    </bean>\n    //in code\n    userThreadPool.execute(thread);\n</pre>", "mdDesc": "A thread pool should be created by ThreadPoolExecutor rather than Executors. These would make the parameters of the thread pool understandable. It would also reduce the risk of running out of system resource.\n<p>Examples:</p>\n<pre>\n    Positive example 1\uff1a\n    //org.apache.commons.lang3.concurrent.BasicThreadFactory\n    ScheduledExecutorService executorService = new ScheduledThreadPoolExecutor(1, new BasicThreadFactory.Builder().namingPattern(\"example-schedule-pool-%d\").daemon(true).build());\n\n    Positive example 2\uff1a\n    ThreadFactory namedThreadFactory = new ThreadFactoryBuilder()\n        .setNameFormat(\"demo-pool-%d\").build();\n    //Common Thread Pool\n    ExecutorService pool = new ThreadPoolExecutor(5, 200,\n        0L, TimeUnit.MILLISECONDS,\n        new LinkedBlockingQueue<Runnable>(1024), namedThreadFactory, new ThreadPoolExecutor.AbortPolicy());\n    pool.execute(()-> System.out.println(Thread.currentThread().getName()));\n    pool.shutdown();//gracefully shutdown\n\n    Positive example 3\uff1a\n    <bean id=\"userThreadPool\"\n          class=\"org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor\">\n        <property name=\"corePoolSize\" value=\"10\" />\n        <property name=\"maxPoolSize\" value=\"100\" />\n        <property name=\"queueCapacity\" value=\"2000\" />\n    <property name=\"threadFactory\" value= threadFactory />\n        <property name=\"rejectedExecutionHandler\">\n            <ref local=\"rejectedExecutionHandler\" />\n        </property>\n    </bean>\n    //in code\n    userThreadPool.execute(thread);\n</pre>", "severity": "BLOCKER", "status": "READY", "internalKey": "rulesets/java/ali-concurrent.xml/ThreadPoolCreationRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "BLOCKER", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "pmd:LowerCamelCaseVariableNamingRule": {"rule": {"key": "pmd:LowerCamelCaseVariableNamingRule", "repo": "pmd", "name": "[p3c]Method names, parameter names, member variable names, and local variable names should be written in lowerCamelCase.", "createdAt": "2023-07-27T03:12:15+0000", "htmlDesc": "Method names, parameter names, member variable names, and local variable names should be written in lowerCamelCase\n<p>Examples:</p>\n<pre>\n\n</pre>", "mdDesc": "Method names, parameter names, member variable names, and local variable names should be written in lowerCamelCase\n<p>Examples:</p>\n<pre>\n\n</pre>", "severity": "CRITICAL", "status": "READY", "internalKey": "rulesets/java/ali-naming.xml/LowerCamelCaseVariableNamingRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MINOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-09-12T03:22:42+0000"}]}, "pmd:ExceptionClassShouldEndWithExceptionRule": {"rule": {"key": "pmd:ExceptionClassShouldEndWithExceptionRule", "repo": "pmd", "name": "[p3c]Must be ended with Exception.", "createdAt": "2023-07-27T03:12:15+0000", "htmlDesc": "Exception class names must be ended with Exception\n<p>Examples:</p>\n<pre>\n    public class CacheDemoException extends Exception{\n    }\n</pre>", "mdDesc": "Exception class names must be ended with Exception\n<p>Examples:</p>\n<pre>\n    public class CacheDemoException extends Exception{\n    }\n</pre>", "severity": "CRITICAL", "status": "READY", "internalKey": "rulesets/java/ali-naming.xml/ExceptionClassShouldEndWithExceptionRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "CRITICAL", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "pmd:AvoidReturnInFinallyRule": {"rule": {"key": "pmd:AvoidReturnInFinallyRule", "repo": "pmd", "name": "[p3c]Never use return within a finally block.", "createdAt": "2023-07-27T03:12:15+0000", "htmlDesc": "Never use return within a finally block. A return statement in a finally block will cause exceptions or result in a discarded return value in the try-catch block. Examples:\n<pre>\n    Negative example:\n    public static Long readFileLength(String fileName) {\n        try {\n            File file = new File(fileName);\n            RandomAccessFile randomAccessFile = new RandomAccessFile(file, \"r\");\n            return randomAccessFile.length();\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        } finally {\n            countDownLatch.countDown();\n            return 0L;\n        }\n    }\n</pre>", "mdDesc": "Never use return within a finally block. A return statement in a finally block will cause exceptions or result in a discarded return value in the try-catch block. Examples:\n<pre>\n    Negative example:\n    public static Long readFileLength(String fileName) {\n        try {\n            File file = new File(fileName);\n            RandomAccessFile randomAccessFile = new RandomAccessFile(file, \"r\");\n            return randomAccessFile.length();\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        } finally {\n            countDownLatch.countDown();\n            return 0L;\n        }\n    }\n</pre>", "severity": "CRITICAL", "status": "READY", "internalKey": "rulesets/java/ali-exception.xml/AvoidReturnInFinallyRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "CRITICAL", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "pmd:PackageNamingRule": {"rule": {"key": "pmd:PackageNamingRule", "repo": "pmd", "name": "[p3c]Package should be named in lowercase characters.", "createdAt": "2023-07-27T03:12:14+0000", "htmlDesc": "Package should be named in lowercase characters. There should be only one English word after each dot. Package names are always in singular format while class name can be in plural format if necessary.\n<p>Examples:</p>\n<pre>\n    com.alibaba.mpp.util / com.taobao.tddl.domain.dto\n</pre>", "mdDesc": "Package should be named in lowercase characters. There should be only one English word after each dot. Package names are always in singular format while class name can be in plural format if necessary.\n<p>Examples:</p>\n<pre>\n    com.alibaba.mpp.util / com.taobao.tddl.domain.dto\n</pre>", "severity": "MAJOR", "status": "READY", "internalKey": "rulesets/java/ali-naming.xml/PackageNamingRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MINOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-11-07T09:56:47+0000"}]}, "pmd:PojoMustUsePrimitiveFieldRule": {"rule": {"key": "pmd:PojoMustUsePrimitiveFieldRule", "repo": "pmd", "name": "[p3c]Rules for using primitive data types and wrapper classes.", "createdAt": "2023-07-27T03:12:15+0000", "htmlDesc": "<p>\nRules for using primitive data types and wrapper classes:\n\u20031) Members of a POJO class must be wrapper classes.\n\u20032) The return value and arguments of a RPC method must be wrapper classes.\n\u20033) [Recommended] Local variables should be primitive data types.\n<p>\n<p>Examples:</p>\n<pre>\n    public class DemoDO {\n        String str;\n        Integer a;\n    }\n</pre>", "mdDesc": "<p>\nRules for using primitive data types and wrapper classes:\n\u20031) Members of a POJO class must be wrapper classes.\n\u20032) The return value and arguments of a RPC method must be wrapper classes.\n\u20033) [Recommended] Local variables should be primitive data types.\n<p>\n<p>Examples:</p>\n<pre>\n    public class DemoDO {\n        String str;\n        Integer a;\n    }\n</pre>", "severity": "MAJOR", "status": "READY", "internalKey": "rulesets/java/ali-oop.xml/PojoMustUsePrimitiveFieldRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "pmd:CountDownShouldInFinallyRule": {"rule": {"key": "pmd:CountDownShouldInFinallyRule", "repo": "pmd", "name": "[p3c]should be called in finally block.", "createdAt": "2023-07-27T03:12:15+0000", "htmlDesc": "When using CountDownLatch to convert asynchronous operations to synchronous ones,each thread must call countdown method before quitting. Make sure to catch any exception during thread running, to let countdown method be executed. If main thread cannot reach await method, program will return until timeout.\n<p>Examples:</p>\n<pre>\n    /**\n     * @author caikang\n     * @date 2017/04/07\n     */\n    public class CountDownExample {\n        public void operate(CountDownLatch countDownLatch){\n            try{\n                System.out.println(\"business logic\");\n            }catch (RuntimeException e){\n                // do something\n            }finally {\n                countDownLatch.countDown();\n            }\n        }\n    }\n</pre>", "mdDesc": "When using CountDownLatch to convert asynchronous operations to synchronous ones,each thread must call countdown method before quitting. Make sure to catch any exception during thread running, to let countdown method be executed. If main thread cannot reach await method, program will return until timeout.\n<p>Examples:</p>\n<pre>\n    /**\n     * @author caikang\n     * @date 2017/04/07\n     */\n    public class CountDownExample {\n        public void operate(CountDownLatch countDownLatch){\n            try{\n                System.out.println(\"business logic\");\n            }catch (RuntimeException e){\n                // do something\n            }finally {\n                countDownLatch.countDown();\n            }\n        }\n    }\n</pre>", "severity": "MAJOR", "status": "READY", "internalKey": "rulesets/java/ali-concurrent.xml/CountDownShouldInFinallyRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "pmd:AvoidCallStaticSimpleDateFormatRule": {"rule": {"key": "pmd:AvoidCallStaticSimpleDateFormatRule", "repo": "pmd", "name": "[p3c]SimpleDataFormat is unsafe, do not define it as a static variable. If have to, lock or DateUtils class must be used.", "createdAt": "2023-07-27T03:12:14+0000", "htmlDesc": "SimpleDataFormat is unsafe, do not define it as a static variable. If have to, lock or DateUtils class must be used. <br/>\nNote: In JDK8, Instant can be used to replace Date, Calendar is replaced by LocalDateTime, SimpleDateFormat is replaced by DateTimeFormatter.<br/>\nExamples:\n<pre>\n    Positive example 1\uff1a\n    private static final String FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n    public String getFormat(Date date){\n        SimpleDateFormat dateFormat = new SimpleDateFormat(FORMAT);\n        return sdf.format(date);\n    }\n\n    Positive example 2\uff1a\n    private static final SimpleDateFormat SIMPLE_DATE_FORMAT = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n    public void getFormat(){\n        synchronized (sdf){\n        sdf.format(new Date());\n        \u2026.;\n    }\n\n    Positive example 3\uff1a\n    private static final ThreadLocal<DateFormat> DATE_FORMATTER = new ThreadLocal<DateFormat>() {\n        @Override\n        protected DateFormat initialValue() {\n            return new SimpleDateFormat(\"yyyy-MM-dd\");\n        }\n    };\n</pre>", "mdDesc": "SimpleDataFormat is unsafe, do not define it as a static variable. If have to, lock or DateUtils class must be used. <br/>\nNote: In JDK8, Instant can be used to replace Date, Calendar is replaced by LocalDateTime, SimpleDateFormat is replaced by DateTimeFormatter.<br/>\nExamples:\n<pre>\n    Positive example 1\uff1a\n    private static final String FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n    public String getFormat(Date date){\n        SimpleDateFormat dateFormat = new SimpleDateFormat(FORMAT);\n        return sdf.format(date);\n    }\n\n    Positive example 2\uff1a\n    private static final SimpleDateFormat SIMPLE_DATE_FORMAT = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n    public void getFormat(){\n        synchronized (sdf){\n        sdf.format(new Date());\n        \u2026.;\n    }\n\n    Positive example 3\uff1a\n    private static final ThreadLocal<DateFormat> DATE_FORMATTER = new ThreadLocal<DateFormat>() {\n        @Override\n        protected DateFormat initialValue() {\n            return new SimpleDateFormat(\"yyyy-MM-dd\");\n        }\n    };\n</pre>", "severity": "CRITICAL", "status": "READY", "internalKey": "rulesets/java/ali-concurrent.xml/AvoidCallStaticSimpleDateFormatRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "CRITICAL", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "pmd:AvoidCommentBehindStatementRule": {"rule": {"key": "pmd:AvoidCommentBehindStatementRule", "repo": "pmd", "name": "[p3c]Single line comments in a method should be put above the code to be commented, by using // and multiple lines by using /* */.", "createdAt": "2023-07-27T03:12:14+0000", "htmlDesc": "Single line comments in a method should be put above the code to be commented, by using // and multiple lines by using /* */.\nExamples:\n<pre>\n    public void method() {\n        // Put single line comment above code. (Note: align '//' comment with code)\n        int a = 3;\n\n        /**\n        * Some description about follow code. (Note: align '/**' comment with code)\n        */\n        int b = 4;\n    }\n</pre>", "mdDesc": "Single line comments in a method should be put above the code to be commented, by using // and multiple lines by using /* */.\nExamples:\n<pre>\n    public void method() {\n        // Put single line comment above code. (Note: align '//' comment with code)\n        int a = 3;\n\n        /**\n        * Some description about follow code. (Note: align '/**' comment with code)\n        */\n        int b = 4;\n    }\n</pre>", "severity": "MAJOR", "status": "READY", "internalKey": "rulesets/java/ali-comment.xml/AvoidCommentBehindStatementRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "INFO", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-09-04T01:32:09+0000"}]}, "pmd:TestClassShouldEndWithTestNamingRule": {"rule": {"key": "pmd:TestClassShouldEndWithTestNamingRule", "repo": "pmd", "name": "[p3c]Test cases should be ended with Test.", "createdAt": "2023-07-27T03:12:15+0000", "htmlDesc": "Test cases shall be started with the class names to be tested and ended with Test.\n<p>Examples:</p>\n<pre>\n    public class DemoTest {\n    }\n</pre>", "mdDesc": "Test cases shall be started with the class names to be tested and ended with Test.\n<p>Examples:</p>\n<pre>\n    public class DemoTest {\n    }\n</pre>", "severity": "MAJOR", "status": "READY", "internalKey": "rulesets/java/ali-naming.xml/TestClassShouldEndWithTestNamingRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "pmd:AvoidNegationOperatorRule": {"rule": {"key": "pmd:AvoidNegationOperatorRule", "repo": "pmd", "name": "[p3c]The negation operator is not easy to be quickly understood.", "createdAt": "2023-07-27T03:12:15+0000", "htmlDesc": "Avoid using the negation operator '!'.\n<p>Examples:</p>\n<pre>\nNegative example:\n    // Use\u00a0`if (!(x >= 628))`\u00a0to represent that x is less than 628.\n    if (!(x >= 628)) {\n        // ...\n    }\n    \nPositive example:\n    // Use\u00a0`if (x < 628)`\u00a0to represent that x is less than 628.\n    if (x < 628)) {\n        // ...\n    }\n</pre>", "mdDesc": "Avoid using the negation operator '!'.\n<p>Examples:</p>\n<pre>\nNegative example:\n    // Use\u00a0`if (!(x >= 628))`\u00a0to represent that x is less than 628.\n    if (!(x >= 628)) {\n        // ...\n    }\n    \nPositive example:\n    // Use\u00a0`if (x < 628)`\u00a0to represent that x is less than 628.\n    if (x < 628)) {\n        // ...\n    }\n</pre>", "severity": "MAJOR", "status": "READY", "internalKey": "rulesets/java/ali-flowcontrol.xml/AvoidNegationOperatorRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "pmd:AvoidMissUseOfMathRandomRule": {"rule": {"key": "pmd:AvoidMissUseOfMathRandomRule", "repo": "pmd", "name": "[p3c]The return type of Math.random() is double, value range is 0<=x<1 (0 is possible).", "createdAt": "2023-07-27T03:12:15+0000", "htmlDesc": "The return type of Math.random() is double, value range is 0&gt;=x&gt;1 (0 is possible). If a random integer is required, do not multiply x by 10 then round the result. The correct way is to use nextInt or nextLong method which belong to Random Object.\nExamples:\n<pre>\n    Negative example:\n    Long randomLong =(long) (Math.random() * 10);\n    Positive example:\n    Long randomLong = new Random().nextLong();\n</pre>", "mdDesc": "The return type of Math.random() is double, value range is 0&gt;=x&gt;1 (0 is possible). If a random integer is required, do not multiply x by 10 then round the result. The correct way is to use nextInt or nextLong method which belong to Random Object.\nExamples:\n<pre>\n    Negative example:\n    Long randomLong =(long) (Math.random() * 10);\n    Positive example:\n    Long randomLong = new Random().nextLong();\n</pre>", "severity": "MAJOR", "status": "READY", "internalKey": "rulesets/java/ali-other.xml/AvoidMissUseOfMathRandomRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "pmd:MethodTooLongRule": {"rule": {"key": "pmd:MethodTooLongRule", "repo": "pmd", "name": "[p3c]The total number of lines for a method should not be more than 80.", "createdAt": "2023-07-27T03:12:15+0000", "htmlDesc": "The total number of lines, including the method signature, closing brace, codes, comments, blank lines, line breaks and any invisible lines, should not be more than 80.", "mdDesc": "The total number of lines, including the method signature, closing brace, codes, comments, blank lines, line breaks and any invisible lines, should not be more than 80.", "severity": "MAJOR", "status": "READY", "internalKey": "rulesets/java/ali-other.xml/MethodTooLongRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "INFO", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-09-12T07:41:43+0000"}]}, "pmd:WrapperTypeEqualityRule": {"rule": {"key": "pmd:WrapperTypeEqualityRule", "repo": "pmd", "name": "[p3c]The wrapper classes should be compared by equals method rather than by symbol of '==' directly.", "createdAt": "2023-07-27T03:12:15+0000", "htmlDesc": "The wrapper classes should be compared by equals method rather than by symbol of '==' directly.\n<p>Examples:</p>\n<pre>\n    Integer a = 235;\n    Integer b = 235;\n    if (a.equals(b)) {\n        // code\n    }\n</pre>", "mdDesc": "The wrapper classes should be compared by equals method rather than by symbol of '==' directly.\n<p>Examples:</p>\n<pre>\n    Integer a = 235;\n    Integer b = 235;\n    if (a.equals(b)) {\n        // code\n    }\n</pre>", "severity": "BLOCKER", "status": "READY", "internalKey": "rulesets/java/ali-oop.xml/WrapperTypeEqualityRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "BLOCKER", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "pmd:AvoidDoubleOrFloatEqualCompareRule": {"rule": {"key": "pmd:AvoidDoubleOrFloatEqualCompareRule", "repo": "pmd", "name": "[p3c]To judge the equivalence of floating-point numbers, == cannot be used for primitive types, while equals cannot be used for wrapper classes.", "createdAt": "2023-08-31T08:26:02+0000", "htmlDesc": "<p>\u6d6e\u70b9\u6570\u4e4b\u95f4\u7684\u7b49\u503c\u5224\u65ad\uff0c\u57fa\u672c\u6570\u636e\u7c7b\u578b\u4e0d\u80fd\u7528==\u6765\u6bd4\u8f83\uff0c\u5305\u88c5\u6570\u636e\u7c7b\u578b\u4e0d\u80fd\u7528equals\u6765\u5224\u65ad</p>\n<pre>\n  \u6d6e\u70b9\u6570\u91c7\u7528\u201c\u5c3e\u6570+\u9636\u7801\u201d\u7684\u7f16\u7801\u65b9\u5f0f\uff0c\u7c7b\u4f3c\u4e8e\u79d1\u5b66\u8ba1\u6570\u6cd5\u7684\u201c\u6709\u6548\u6570\u5b57+\u6307\u6570\u201d\u7684\u8868\u793a\u65b9\u5f0f\u3002\u4e8c\u8fdb\u5236\u65e0\u6cd5\u7cbe\u786e\u8868\u793a\u5927\u90e8\u5206\u7684\u5341\u8fdb\u5236\u5c0f\u6570\uff0c\u5177\u4f53\u539f\u7406\u53c2\u8003\u300a\u7801\u51fa\u9ad8\u6548\u300b\n\u6539\u8fdb\u65b9\u5f0f:\n1\uff09\u6307\u5b9a\u4e00\u4e2a\u8bef\u5dee\u8303\u56f4\uff0c\u4e24\u4e2a\u6d6e\u70b9\u6570\u7684\u5dee\u503c\u5728\u6b64\u8303\u56f4\u4e4b\u5185\uff0c\u5219\u8ba4\u4e3a\u662f\u76f8\u7b49\u7684\n    float a = 1.0f - 0.9f;\n    float b = 0.9f - 0.8f;\n    float diff = 1e-6f;\n\n    if (Math.abs(a - b) < diff) {\n        System.out.println(\"true\");\n    }\n2) \u4f7f\u7528BigDecimal\u6765\u5b9a\u4e49\u503c\uff0c\u518d\u8fdb\u884c\u6d6e\u70b9\u6570\u7684\u8fd0\u7b97\u64cd\u4f5c\n    BigDecimal a = new BigDecimal(\"1.0\");\n    BigDecimal b = new BigDecimal(\"0.9\");\n    BigDecimal c = new BigDecimal(\"0.8\");\n\n    BigDecimal x = a.subtract(b);\n    BigDecimal y = b.subtract(c);\n\n    if (x.equals(y)) {\n        System.out.println(\"true\");\n    }\n</pre>\n<pre>\n  Negative example:\n  float g = 0.7f-0.6f;\n  float h = 0.8f-0.7f;\n  if (g == h) {\n  System.out.println(\"true\");\n</pre>\n<pre>\n  Positive example:\n  double dis = 1e-6;\n  double d1 = 0.0000001d;\n  double d2 = 0d;\n  System.out.println(Math.abs(d1 - d2) < dis);\n</pre>", "mdDesc": "<p>\u6d6e\u70b9\u6570\u4e4b\u95f4\u7684\u7b49\u503c\u5224\u65ad\uff0c\u57fa\u672c\u6570\u636e\u7c7b\u578b\u4e0d\u80fd\u7528==\u6765\u6bd4\u8f83\uff0c\u5305\u88c5\u6570\u636e\u7c7b\u578b\u4e0d\u80fd\u7528equals\u6765\u5224\u65ad</p>\n<pre>\n  \u6d6e\u70b9\u6570\u91c7\u7528\u201c\u5c3e\u6570+\u9636\u7801\u201d\u7684\u7f16\u7801\u65b9\u5f0f\uff0c\u7c7b\u4f3c\u4e8e\u79d1\u5b66\u8ba1\u6570\u6cd5\u7684\u201c\u6709\u6548\u6570\u5b57+\u6307\u6570\u201d\u7684\u8868\u793a\u65b9\u5f0f\u3002\u4e8c\u8fdb\u5236\u65e0\u6cd5\u7cbe\u786e\u8868\u793a\u5927\u90e8\u5206\u7684\u5341\u8fdb\u5236\u5c0f\u6570\uff0c\u5177\u4f53\u539f\u7406\u53c2\u8003\u300a\u7801\u51fa\u9ad8\u6548\u300b\n\u6539\u8fdb\u65b9\u5f0f:\n1\uff09\u6307\u5b9a\u4e00\u4e2a\u8bef\u5dee\u8303\u56f4\uff0c\u4e24\u4e2a\u6d6e\u70b9\u6570\u7684\u5dee\u503c\u5728\u6b64\u8303\u56f4\u4e4b\u5185\uff0c\u5219\u8ba4\u4e3a\u662f\u76f8\u7b49\u7684\n    float a = 1.0f - 0.9f;\n    float b = 0.9f - 0.8f;\n    float diff = 1e-6f;\n\n    if (Math.abs(a - b) < diff) {\n        System.out.println(\"true\");\n    }\n2) \u4f7f\u7528BigDecimal\u6765\u5b9a\u4e49\u503c\uff0c\u518d\u8fdb\u884c\u6d6e\u70b9\u6570\u7684\u8fd0\u7b97\u64cd\u4f5c\n    BigDecimal a = new BigDecimal(\"1.0\");\n    BigDecimal b = new BigDecimal(\"0.9\");\n    BigDecimal c = new BigDecimal(\"0.8\");\n\n    BigDecimal x = a.subtract(b);\n    BigDecimal y = b.subtract(c);\n\n    if (x.equals(y)) {\n        System.out.println(\"true\");\n    }\n</pre>\n<pre>\n  Negative example:\n  float g = 0.7f-0.6f;\n  float h = 0.8f-0.7f;\n  if (g == h) {\n  System.out.println(\"true\");\n</pre>\n<pre>\n  Positive example:\n  double dis = 1e-6;\n  double d1 = 0.0000001d;\n  double d2 = 0d;\n  System.out.println(Math.abs(d1 - d2) < dis);\n</pre>", "severity": "CRITICAL", "status": "READY", "internalKey": "rulesets/java/ali-other.xml/AvoidDoubleOrFloatEqualCompareRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "debtOverloaded": false, "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "CRITICAL", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "pmd:ThreadLocalShouldRemoveRule": {"rule": {"key": "pmd:ThreadLocalShouldRemoveRule", "repo": "pmd", "name": "[p3c]type 'ThreadLocal' must call remove() method at least one times.", "createdAt": "2023-07-27T03:12:15+0000", "htmlDesc": "Customized ThreadLocal variables must be recycled,especially when using thread pools in which threads are often reused. Otherwise, it may affect subsequent business logic and cause unexpected problems such as memory leak.\n<p>Examples:</p>\n<pre>\n    /**\n     * @author caikang\n     * @date 2017/04/07\n     */\n    public class UserHolder {\n        private static final ThreadLocal<User> userThreadLocal = new ThreadLocal<User>();\n        public static void set(User user){\n            userThreadLocal.set(user);\n        }\n        public static User get(){\n            return userThreadLocal.get();\n        }\n        public static void remove(){\n            userThreadLocal.remove();\n        }\n    }\n    /**\n     * @author caikang\n     * @date 2017/04/07\n     */\n    public class UserInterceptor extends HandlerInterceptorAdapter {\n        @Override\n        public boolean preHandle(HttpServletRequest request,\n            HttpServletResponse response, Object handler) throws Exception {\n            UserHolder.set(new User());\n            return true;\n        }\n        @Override\n        public void afterCompletion(HttpServletRequest request,\n            HttpServletResponse response, Object handler, Exception ex) throws Exception {\n            UserHolder.remove();\n        }\n    }\n</pre>", "mdDesc": "Customized ThreadLocal variables must be recycled,especially when using thread pools in which threads are often reused. Otherwise, it may affect subsequent business logic and cause unexpected problems such as memory leak.\n<p>Examples:</p>\n<pre>\n    /**\n     * @author caikang\n     * @date 2017/04/07\n     */\n    public class UserHolder {\n        private static final ThreadLocal<User> userThreadLocal = new ThreadLocal<User>();\n        public static void set(User user){\n            userThreadLocal.set(user);\n        }\n        public static User get(){\n            return userThreadLocal.get();\n        }\n        public static void remove(){\n            userThreadLocal.remove();\n        }\n    }\n    /**\n     * @author caikang\n     * @date 2017/04/07\n     */\n    public class UserInterceptor extends HandlerInterceptorAdapter {\n        @Override\n        public boolean preHandle(HttpServletRequest request,\n            HttpServletResponse response, Object handler) throws Exception {\n            UserHolder.set(new User());\n            return true;\n        }\n        @Override\n        public void afterCompletion(HttpServletRequest request,\n            HttpServletResponse response, Object handler, Exception ex) throws Exception {\n            UserHolder.remove();\n        }\n    }\n</pre>", "severity": "CRITICAL", "status": "READY", "internalKey": "rulesets/java/ali-concurrent.xml/ThreadLocalShouldRemoveRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "CRITICAL", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "pmd:AvoidUseTimerRule": {"rule": {"key": "pmd:AvoidUseTimerRule", "repo": "pmd", "name": "[p3c]Use ScheduledExecutorService instead.", "createdAt": "2023-07-27T03:12:15+0000", "htmlDesc": "Run multiple TimeTask by using ScheduledExecutorService rather than Timer because Timer will kill all running threads in case of failing to catch exceptions.\n<p>Examples:</p>\n<pre>\n    //org.apache.commons.lang3.concurrent.BasicThreadFactory\n    ScheduledExecutorService executorService = new ScheduledThreadPoolExecutor(1,\n        new BasicThreadFactory.Builder().namingPattern(\"example-schedule-pool-%d\").daemon(true).build());\n    executorService.scheduleAtFixedRate(new Runnable() {\n        @Override\n        public void run() {\n            //do something\n        }\n    },initialDelay,period, TimeUnit.HOURS);\n</pre>", "mdDesc": "Run multiple TimeTask by using ScheduledExecutorService rather than Timer because Timer will kill all running threads in case of failing to catch exceptions.\n<p>Examples:</p>\n<pre>\n    //org.apache.commons.lang3.concurrent.BasicThreadFactory\n    ScheduledExecutorService executorService = new ScheduledThreadPoolExecutor(1,\n        new BasicThreadFactory.Builder().namingPattern(\"example-schedule-pool-%d\").daemon(true).build());\n    executorService.scheduleAtFixedRate(new Runnable() {\n        @Override\n        public void run() {\n            //do something\n        }\n    },initialDelay,period, TimeUnit.HOURS);\n</pre>", "severity": "BLOCKER", "status": "READY", "internalKey": "rulesets/java/ali-concurrent.xml/AvoidUseTimerRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "BLOCKER", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "pmd:AvoidNewDateGetTimeRule": {"rule": {"key": "pmd:AvoidNewDateGetTimeRule", "repo": "pmd", "name": "[p3c]Use System.currentTimeMillis() to get the current millisecond. Do not use new Date().getTime().", "createdAt": "2023-07-27T03:12:15+0000", "htmlDesc": "Use System.currentTimeMillis() to get the current millisecond. Do not use new Date().getTime(). <br/>\nNote: In order to get a more accurate time, use System.nanoTime(). In JDK8, use Instant class to deal with situations like time statistics.\nExamples:\n<pre>\n    public class TimeMillisDemo {\n        public static void main(String args[]) {\n            // Positive example:\n            long a = System.currentTimeMillis();\n            // Negative example:\n            long b = new Date().getTime();\n\n            System.out.println(a);\n            System.out.println(b);\n        }\n    }\n</pre>", "mdDesc": "Use System.currentTimeMillis() to get the current millisecond. Do not use new Date().getTime(). <br/>\nNote: In order to get a more accurate time, use System.nanoTime(). In JDK8, use Instant class to deal with situations like time statistics.\nExamples:\n<pre>\n    public class TimeMillisDemo {\n        public static void main(String args[]) {\n            // Positive example:\n            long a = System.currentTimeMillis();\n            // Negative example:\n            long b = new Date().getTime();\n\n            System.out.println(a);\n            System.out.println(b);\n        }\n    }\n</pre>", "severity": "BLOCKER", "status": "READY", "internalKey": "rulesets/java/ali-other.xml/AvoidNewDateGetTimeRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "BLOCKER", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "pmd:StringConcatRule": {"rule": {"key": "pmd:StringConcatRule", "repo": "pmd", "name": "[p3c]Use the append method in StringBuilder inside a loop body when concatenating multiple strings.", "createdAt": "2023-07-27T03:12:14+0000", "htmlDesc": "Use the append method in StringBuilder inside a loop body when concatenating multiple strings.\n<p>Examples:</p>\n<pre>\n    Negative example:\n    String result;\n    for (String string : tagNameList) {\n        result = result + string;\n    }\n\n    Positive example:\n    StringBuilder stringBuilder = new StringBuilder();\n    for (String string : tagNameList) {\n        stringBuilder.append(string);\n    }\n    String result = stringBuilder.toString();\n</pre>", "mdDesc": "Use the append method in StringBuilder inside a loop body when concatenating multiple strings.\n<p>Examples:</p>\n<pre>\n    Negative example:\n    String result;\n    for (String string : tagNameList) {\n        result = result + string;\n    }\n\n    Positive example:\n    StringBuilder stringBuilder = new StringBuilder();\n    for (String string : tagNameList) {\n        stringBuilder.append(string);\n    }\n    String result = stringBuilder.toString();\n</pre>", "severity": "MAJOR", "status": "READY", "internalKey": "rulesets/java/ali-oop.xml/PojoMustOverrideToStringRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "pmd:PojoMustOverrideToStringRule": {"rule": {"key": "pmd:PojoMustOverrideToStringRule", "repo": "pmd", "name": "[p3c]We can call the toString method in a POJO directly to print property values.", "createdAt": "2023-07-27T03:12:15+0000", "htmlDesc": "The toString method must be implemented in a POJO class. The super.toString method should be called in front of the whole implementation if the current class extends another POJO class.\n<p>Examples:</p>\n<pre>\n    public class ToStringDemo extends Super{\n        private String secondName;\n        @Override\n        public String toString() {\n            return super.toString() + \"ToStringDemo{\" + \"secondName='\" + secondName + '\\'' + '}';\n        }\n    }\n    class Super {\n        private String firstName;\n        @Override\n        public String toString() {\n            return \"Super{\" + \"firstName=\" + firstName + '\\'' + '}';\n        }\n    }\n</pre>", "mdDesc": "The toString method must be implemented in a POJO class. The super.toString method should be called in front of the whole implementation if the current class extends another POJO class.\n<p>Examples:</p>\n<pre>\n    public class ToStringDemo extends Super{\n        private String secondName;\n        @Override\n        public String toString() {\n            return super.toString() + \"ToStringDemo{\" + \"secondName='\" + secondName + '\\'' + '}';\n        }\n    }\n    class Super {\n        private String firstName;\n        @Override\n        public String toString() {\n            return \"Super{\" + \"firstName=\" + firstName + '\\'' + '}';\n        }\n    }\n</pre>", "severity": "MAJOR", "status": "READY", "internalKey": "rulesets/java/ali-oop.xml/PojoMustOverrideToStringRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MINOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-09-04T02:34:23+0000"}]}, "pmd:AvoidPatternCompileInMethodRule": {"rule": {"key": "pmd:AvoidPatternCompileInMethodRule", "repo": "pmd", "name": "[p3c]When using regex, precompile needs to be done in order to increase the matching performance.", "createdAt": "2023-07-27T03:12:15+0000", "htmlDesc": "When using regex, precompile needs to be done in order to increase the matching performance. Examples:\n<pre>\n    public class XxxClass {\n        // Use precompile\n        private static Pattern NUMBER_PATTERN = Pattern.compile(\"[0-9]+\");\n        public Pattern getNumberPattern() {\n            // Avoid use Pattern.compile in method body.\n            Pattern localPattern = Pattern.compile(\"[0-9]+\");\n            return localPattern;\n        }\n    }\n</pre>", "mdDesc": "When using regex, precompile needs to be done in order to increase the matching performance. Examples:\n<pre>\n    public class XxxClass {\n        // Use precompile\n        private static Pattern NUMBER_PATTERN = Pattern.compile(\"[0-9]+\");\n        public Pattern getNumberPattern() {\n            // Avoid use Pattern.compile in method body.\n            Pattern localPattern = Pattern.compile(\"[0-9]+\");\n            return localPattern;\n        }\n    }\n</pre>", "severity": "BLOCKER", "status": "READY", "internalKey": "rulesets/java/ali-other.xml/AvoidPatternCompileInMethodRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "BLOCKER", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "pmd:ConcurrentExceptionWithModifyOriginSubListRule": {"rule": {"key": "pmd:ConcurrentExceptionWithModifyOriginSubListRule", "repo": "pmd", "name": "[p3c]When using subList, be careful to modify the size of original list.", "createdAt": "2023-07-27T03:12:15+0000", "htmlDesc": "When using subList, be careful to modify the size of original list. It might cause ConcurrentModificationException when performing traversing, adding or deleting on the subList.\n<p>Examples:</p>\n<pre>\n    Negative example:\n    List<String> originList = new ArrayList<String>();\n    originList.add(\"22\");\n    List<String> subList = originList.subList(0, 1);\n    //warn\n    originList.add(\"22\");\n</pre>", "mdDesc": "When using subList, be careful to modify the size of original list. It might cause ConcurrentModificationException when performing traversing, adding or deleting on the subList.\n<p>Examples:</p>\n<pre>\n    Negative example:\n    List<String> originList = new ArrayList<String>();\n    originList.add(\"22\");\n    List<String> subList = originList.subList(0, 1);\n    //warn\n    originList.add(\"22\");\n</pre>", "severity": "CRITICAL", "status": "READY", "internalKey": "rulesets/java/ali-set.xml/ConcurrentExceptionWithModifyOriginSubListRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "CRITICAL", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "pmd:PojoNoDefaultValueRule": {"rule": {"key": "pmd:PojoNoDefaultValueRule", "repo": "pmd", "name": "[p3c]While defining POJO classes like DO, DTO, VO, etc., do not assign any default values to the members.", "createdAt": "2023-07-27T03:12:15+0000", "htmlDesc": "While defining POJO classes like DO, DTO, VO, etc., do not assign any default values to the members.\n<p>Examples:</p>\n<pre>\n    public class DemoDO {\n        String str;\n        Integer a;\n    }\n</pre>", "mdDesc": "While defining POJO classes like DO, DTO, VO, etc., do not assign any default values to the members.\n<p>Examples:</p>\n<pre>\n    public class DemoDO {\n        String str;\n        Integer a;\n    }\n</pre>", "severity": "MAJOR", "status": "READY", "internalKey": "rulesets/java/ali-oop.xml/PojoNoDefaultValueRule", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MINOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-09-13T07:18:55+0000"}]}, "squid:S3973": {"rule": {"key": "squid:S3973", "repo": "squid", "name": "A conditionally executed single line should be denoted by indentation", "createdAt": "2023-07-27T03:12:20+0000", "htmlDesc": "<p>In the absence of enclosing curly braces, the line immediately after a conditional is the one that is conditionally executed. By both convention\nand good practice, such lines are indented. In the absence of both curly braces and indentation the intent of the original programmer is entirely\nunclear and perhaps not actually what is executed. Additionally, such code is highly likely to be confusing to maintainers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)  // Noncompliant\ndoTheThing();\n\ndoTheOtherThing();\nsomethingElseEntirely();\n\nfoo();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition)\n  doTheThing();\n\ndoTheOtherThing();\nsomethingElseEntirely();\n\nfoo();\n</pre>", "mdDesc": "<p>In the absence of enclosing curly braces, the line immediately after a conditional is the one that is conditionally executed. By both convention\nand good practice, such lines are indented. In the absence of both curly braces and indentation the intent of the original programmer is entirely\nunclear and perhaps not actually what is executed. Additionally, such code is highly likely to be confusing to maintainers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)  // Noncompliant\ndoTheThing();\n\ndoTheOtherThing();\nsomethingElseEntirely();\n\nfoo();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition)\n  doTheThing();\n\ndoTheOtherThing();\nsomethingElseEntirely();\n\nfoo();\n</pre>", "severity": "CRITICAL", "status": "READY", "isTemplate": false, "tags": [], "sysTags": ["confusing", "suspicious"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "10min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "10min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "10min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "10min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYmVVaAvqMsO3hqTZpQM", "inherit": "NONE", "severity": "CRITICAL", "params": [], "createdAt": "2023-07-27T03:12:43+0000", "updatedAt": "2023-07-27T03:12:43+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MINOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "squid:S1700": {"rule": {"key": "squid:S1700", "repo": "squid", "name": "A field should not duplicate the name of its containing class", "createdAt": "2023-07-27T03:12:20+0000", "htmlDesc": "<p>It's confusing to have a class member with the same name (case differences aside) as its enclosing class. This is particularly so when you consider\nthe common practice of naming a class instance for the class itself.</p>\n<p>Best practice dictates that any field or member with the same name as the enclosing class be renamed to be more descriptive of the particular\naspect of the class it represents or holds.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  private String foo;\n\n  public String getFoo() { }\n}\n\nFoo foo = new Foo();\nfoo.getFoo() // what does this return?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n  private String name;\n\n  public String getName() { }\n}\n\n//...\n\nFoo foo = new Foo();\nfoo.getName()\n\n</pre>\n<h2>Exceptions</h2>\n<p>When the type of the field is the containing class and that field is static, no issue is raised to allow singletons named like the type. </p>\n<pre>\npublic class Foo {\n  ...\n  private static Foo foo;\n  public Foo getInstance() {\n    if(foo==null) {\n      foo = new Foo();\n    }\n    return foo;\n  }\n  ...\n}\n</pre>", "mdDesc": "<p>It's confusing to have a class member with the same name (case differences aside) as its enclosing class. This is particularly so when you consider\nthe common practice of naming a class instance for the class itself.</p>\n<p>Best practice dictates that any field or member with the same name as the enclosing class be renamed to be more descriptive of the particular\naspect of the class it represents or holds.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  private String foo;\n\n  public String getFoo() { }\n}\n\nFoo foo = new Foo();\nfoo.getFoo() // what does this return?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n  private String name;\n\n  public String getName() { }\n}\n\n//...\n\nFoo foo = new Foo();\nfoo.getName()\n\n</pre>\n<h2>Exceptions</h2>\n<p>When the type of the field is the containing class and that field is static, no issue is raised to allow singletons named like the type. </p>\n<pre>\npublic class Foo {\n  ...\n  private static Foo foo;\n  public Foo getInstance() {\n    if(foo==null) {\n      foo = new Foo();\n    }\n    return foo;\n  }\n  ...\n}\n</pre>", "severity": "MAJOR", "status": "READY", "isTemplate": false, "tags": [], "sysTags": ["brain-overload"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "10min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "10min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "10min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "10min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYmVVaAvqMsO3hqTZpQM", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-07-27T03:12:43+0000", "updatedAt": "2023-07-27T03:12:43+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "squid:S3923": {"rule": {"key": "squid:S3923", "repo": "squid", "name": "All branches in a conditional structure should not have exactly the same implementation", "createdAt": "2023-07-27T03:12:20+0000", "htmlDesc": "<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made\nand something different should be executed, or there shouldn't be a <code>switch</code>/<code>if</code> chain at all.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (b == 0) {  // Noncompliant\n  doOneMoreThing();\n} else {\n  doOneMoreThing();\n}\n\nint b = a &gt; 12 ? 4 : 4;  // Noncompliant\n\nswitch (i) {  // Noncompliant\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomething();\n    break;\n  case 3:\n    doSomething();\n    break;\n  default:\n    doSomething();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without <code>default</code>\nclauses.</p>\n<pre>\nif(b == 0) {    //no issue, this could have been done on purpose to make the code more readable\n  doSomething();\n} else if(b == 1) {\n  doSomething();\n}\n</pre>", "mdDesc": "<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made\nand something different should be executed, or there shouldn't be a <code>switch</code>/<code>if</code> chain at all.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (b == 0) {  // Noncompliant\n  doOneMoreThing();\n} else {\n  doOneMoreThing();\n}\n\nint b = a &gt; 12 ? 4 : 4;  // Noncompliant\n\nswitch (i) {  // Noncompliant\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomething();\n    break;\n  case 3:\n    doSomething();\n    break;\n  default:\n    doSomething();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without <code>default</code>\nclauses.</p>\n<pre>\nif(b == 0) {    //no issue, this could have been done on purpose to make the code more readable\n  doSomething();\n} else if(b == 1) {\n  doSomething();\n}\n</pre>", "severity": "MAJOR", "status": "READY", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "15min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "15min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "15min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "15min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "BUG"}, "actives": [{"qProfile": "AYmVVaAvqMsO3hqTZpQM", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-07-27T03:12:43+0000", "updatedAt": "2023-07-27T03:12:43+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "squid:AssignmentInSubExpressionCheck": {"rule": {"key": "squid:AssignmentInSubExpressionCheck", "repo": "squid", "name": "Assignments should not be made from within sub-expressions", "createdAt": "2023-07-27T03:12:21+0000", "htmlDesc": "<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have\nside-effects.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ((str = cont.substring(pos1, pos2)).isEmpty()) {  // Noncompliant\n  //...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nstr = cont.substring(pos1, pos2);\nif (str.isEmpty()) {\n  //...\n</pre>\n<h2>Exceptions</h2>\n<p>Assignments in <code>while</code> statement conditions, and assignments enclosed in relational expressions are ignored.</p>\n<pre>\nBufferedReader br = new BufferedReader(/* ... */);\nString line;\nwhile ((line = br.readLine()) != null) {...}\n</pre>\n<p>Chained assignments, including compound assignments, are ignored.</p>\n<pre>\nint i = j = 0;\nint k = (j += 1);\nresult = (bresult = new byte[len]);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.1 - Assignment operators shall not be used in expressions that yield a Boolean value </li>\n  <li> MISRA C++:2008, 6-2-1 - Assignment operators shall not be used in sub-expressions </li>\n  <li> MISRA C:2012, 13.4 - The result of an assignment operator should not be used </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/481.html\">MITRE, CWE-481</a> - Assigning instead of Comparing </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/nYFtAg\">CERT, EXP45-C.</a> - Do not perform assignments in selection statements </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/1gCTAw\">CERT, EXP51-J.</a> - Do not perform assignments in conditional expressions\n  </li>\n</ul>", "mdDesc": "<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have\nside-effects.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ((str = cont.substring(pos1, pos2)).isEmpty()) {  // Noncompliant\n  //...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nstr = cont.substring(pos1, pos2);\nif (str.isEmpty()) {\n  //...\n</pre>\n<h2>Exceptions</h2>\n<p>Assignments in <code>while</code> statement conditions, and assignments enclosed in relational expressions are ignored.</p>\n<pre>\nBufferedReader br = new BufferedReader(/* ... */);\nString line;\nwhile ((line = br.readLine()) != null) {...}\n</pre>\n<p>Chained assignments, including compound assignments, are ignored.</p>\n<pre>\nint i = j = 0;\nint k = (j += 1);\nresult = (bresult = new byte[len]);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.1 - Assignment operators shall not be used in expressions that yield a Boolean value </li>\n  <li> MISRA C++:2008, 6-2-1 - Assignment operators shall not be used in sub-expressions </li>\n  <li> MISRA C:2012, 13.4 - The result of an assignment operator should not be used </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/481.html\">MITRE, CWE-481</a> - Assigning instead of Comparing </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/nYFtAg\">CERT, EXP45-C.</a> - Do not perform assignments in selection statements </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/1gCTAw\">CERT, EXP51-J.</a> - Do not perform assignments in conditional expressions\n  </li>\n</ul>", "severity": "MAJOR", "status": "READY", "internalKey": "S1121", "isTemplate": false, "tags": [], "sysTags": ["cert", "cwe", "misra", "suspicious"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "5min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "5min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "5min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "5min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYmVVaAvqMsO3hqTZpQM", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-07-27T03:12:43+0000", "updatedAt": "2023-07-27T03:12:43+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MINOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "squid:S4165": {"rule": {"key": "squid:S4165", "repo": "squid", "name": "Assignments should not be redundant", "createdAt": "2023-07-27T03:12:20+0000", "htmlDesc": "<p>The transitive property says that if <code>a == b</code> and <code>b == c</code>, then <code>a == c</code>. In such cases, there's no point in\nassigning <code>a</code> to <code>c</code> or vice versa because they're already equivalent. </p>\n<p>This rule raises an issue when an assignment is useless because the assigned-to variable already holds the value on all execution paths.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = b;\nc = a;\nb = c; // Noncompliant: c and b are already the same\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = b;\nc = a;\n</pre>", "mdDesc": "<p>The transitive property says that if <code>a == b</code> and <code>b == c</code>, then <code>a == c</code>. In such cases, there's no point in\nassigning <code>a</code> to <code>c</code> or vice versa because they're already equivalent. </p>\n<p>This rule raises an issue when an assignment is useless because the assigned-to variable already holds the value on all execution paths.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = b;\nc = a;\nb = c; // Noncompliant: c and b are already the same\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = b;\nc = a;\n</pre>", "severity": "MAJOR", "status": "READY", "isTemplate": false, "tags": [], "sysTags": ["redundant"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "5min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "5min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "5min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "5min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYmVVaAvqMsO3hqTZpQM", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-07-27T03:12:43+0000", "updatedAt": "2023-07-27T03:12:43+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "findbugs:NM_CLASS_NAMING_CONVENTION": {"rule": {"key": "findbugs:NM_CLASS_NAMING_CONVENTION", "repo": "findbugs", "name": "Bad practice - Class names should start with an upper case letter", "createdAt": "2023-07-27T03:12:20+0000", "htmlDesc": "<p> Class names should be nouns, in mixed case with the first letter of each internal word capitalized. Try to keep your class names simple and descriptive. Use whole words-avoid acronyms and abbreviations (unless the abbreviation is much more widely used than the long form, such as URL or HTML).\n</p>", "mdDesc": "<p> Class names should be nouns, in mixed case with the first letter of each internal word capitalized. Try to keep your class names simple and descriptive. Use whole words-avoid acronyms and abbreviations (unless the abbreviation is much more widely used than the long form, such as URL or HTML).\n</p>", "severity": "MAJOR", "status": "READY", "internalKey": "NM_CLASS_NAMING_CONVENTION", "isTemplate": false, "tags": [], "sysTags": ["bad-practice"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "30min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "30min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "30min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "30min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYmVVZVoqMsO3hqTZolI", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-07-27T03:12:40+0000", "updatedAt": "2023-07-27T03:12:40+0000"}, {"qProfile": "AYmVVZolqMsO3hqTZo3u", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-07-27T03:12:42+0000", "updatedAt": "2023-07-27T03:12:42+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "findbugs:ES_COMPARING_STRINGS_WITH_EQ": {"rule": {"key": "findbugs:ES_COMPARING_STRINGS_WITH_EQ", "repo": "findbugs", "name": "Bad practice - Comparison of String objects using == or !=", "createdAt": "2023-07-27T03:12:20+0000", "htmlDesc": "<p>This code compares <code>java.lang.String</code> objects for reference\nequality using the == or != operators.\nUnless both strings are either constants in a source file, or have been\ninterned using the <code>String.intern()</code> method, the same string\nvalue may be represented by two different String objects. Consider\nusing the <code>equals(Object)</code> method instead.</p>", "mdDesc": "<p>This code compares <code>java.lang.String</code> objects for reference\nequality using the == or != operators.\nUnless both strings are either constants in a source file, or have been\ninterned using the <code>String.intern()</code> method, the same string\nvalue may be represented by two different String objects. Consider\nusing the <code>equals(Object)</code> method instead.</p>", "severity": "MAJOR", "status": "READY", "internalKey": "ES_COMPARING_STRINGS_WITH_EQ", "isTemplate": false, "tags": [], "sysTags": ["bad-practice"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "1h", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "1h", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "1h", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "1h", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYmVVZVoqMsO3hqTZolI", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-07-27T03:12:40+0000", "updatedAt": "2023-07-27T03:12:40+0000"}, {"qProfile": "AYmVVZolqMsO3hqTZo3u", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-07-27T03:12:42+0000", "updatedAt": "2023-07-27T03:12:42+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "findbugs:ES_COMPARING_PARAMETER_STRING_WITH_EQ": {"rule": {"key": "findbugs:ES_COMPARING_PARAMETER_STRING_WITH_EQ", "repo": "findbugs", "name": "Bad practice - Comparison of String parameter using == or !=", "createdAt": "2023-07-27T03:12:20+0000", "htmlDesc": "<p>This code compares a <code>java.lang.String</code> parameter for reference\nequality using the == or != operators. Requiring callers to\npass only String constants or interned strings to a method is unnecessarily\nfragile, and rarely leads to measurable performance gains. Consider\nusing the <code>equals(Object)</code> method instead.</p>", "mdDesc": "<p>This code compares a <code>java.lang.String</code> parameter for reference\nequality using the == or != operators. Requiring callers to\npass only String constants or interned strings to a method is unnecessarily\nfragile, and rarely leads to measurable performance gains. Consider\nusing the <code>equals(Object)</code> method instead.</p>", "severity": "MAJOR", "status": "READY", "internalKey": "ES_COMPARING_PARAMETER_STRING_WITH_EQ", "isTemplate": false, "tags": [], "sysTags": ["bad-practice"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "1h", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "1h", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "1h", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "1h", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYmVVZVoqMsO3hqTZolI", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-07-27T03:12:40+0000", "updatedAt": "2023-07-27T03:12:40+0000"}, {"qProfile": "AYmVVZolqMsO3hqTZo3u", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-07-27T03:12:42+0000", "updatedAt": "2023-07-27T03:12:42+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "findbugs:OS_OPEN_STREAM": {"rule": {"key": "findbugs:OS_OPEN_STREAM", "repo": "findbugs", "name": "Bad practice - Method may fail to close stream", "createdAt": "2023-07-27T03:12:20+0000", "htmlDesc": "<p> The method creates an IO stream object, does not assign it to any\nfields, pass it to other methods that might close it,\nor return it, and does not appear to close\nthe stream on all paths out of the method.&nbsp; This may result in\na file descriptor leak.&nbsp; It is generally a good\nidea to use a <code>finally</code> block to ensure that streams are\nclosed.</p>", "mdDesc": "<p> The method creates an IO stream object, does not assign it to any\nfields, pass it to other methods that might close it,\nor return it, and does not appear to close\nthe stream on all paths out of the method.&nbsp; This may result in\na file descriptor leak.&nbsp; It is generally a good\nidea to use a <code>finally</code> block to ensure that streams are\nclosed.</p>", "severity": "MAJOR", "status": "READY", "internalKey": "OS_OPEN_STREAM", "isTemplate": false, "tags": [], "sysTags": ["bad-practice"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "1h", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "1h", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "1h", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "1h", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYmVVZVoqMsO3hqTZolI", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-07-27T03:12:40+0000", "updatedAt": "2023-07-27T03:12:40+0000"}, {"qProfile": "AYmVVZolqMsO3hqTZo3u", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-07-27T03:12:42+0000", "updatedAt": "2023-07-27T03:12:42+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "pmd:BooleanGetMethodName": {"rule": {"key": "pmd:BooleanGetMethodName", "repo": "pmd", "name": "Boolean Get Method Name", "createdAt": "2023-07-27T03:12:15+0000", "htmlDesc": "Looks for methods named \"getX()\" with \"boolean\" as the return type. The convention is to name these methods \"isX()\".", "mdDesc": "Looks for methods named \"getX()\" with \"boolean\" as the return type. The convention is to name these methods \"isX()\".", "severity": "MAJOR", "status": "READY", "internalKey": "category/java/codestyle.xml/BooleanGetMethodName", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [{"key": "checkParameterizedMethods", "htmlDesc": "Check parameterized methods. Default is false.", "defaultValue": "false", "type": "BOOLEAN"}], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "10min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "10min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "10min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "10min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [{"key": "checkParameterizedMethods", "value": "false"}], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "squid:S2147": {"rule": {"key": "squid:S2147", "repo": "squid", "name": "Catches should be combined", "createdAt": "2023-07-27T03:12:21+0000", "htmlDesc": "<p>Since Java 7 it has been possible to catch multiple exceptions at once. Therefore, when multiple <code>catch</code> blocks have the same code, they\nshould be combined for better readability.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ncatch (IOException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (SQLException e) {  // Noncompliant\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {  // Compliant; block contents are different\n  doCleanup();\n  throw e;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ncatch (IOException|SQLException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {\n  doCleanup();\n  throw e;\n}\n</pre>", "mdDesc": "<p>Since Java 7 it has been possible to catch multiple exceptions at once. Therefore, when multiple <code>catch</code> blocks have the same code, they\nshould be combined for better readability.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ncatch (IOException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (SQLException e) {  // Noncompliant\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {  // Compliant; block contents are different\n  doCleanup();\n  throw e;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ncatch (IOException|SQLException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {\n  doCleanup();\n  throw e;\n}\n</pre>", "severity": "MINOR", "status": "READY", "isTemplate": false, "tags": [], "sysTags": ["clumsy"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "5min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "5min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "5min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "5min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYmVVaAvqMsO3hqTZpQM", "inherit": "NONE", "severity": "MINOR", "params": [], "createdAt": "2023-07-27T03:12:43+0000", "updatedAt": "2023-07-27T03:12:43+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MINOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "squid:S2387": {"rule": {"key": "squid:S2387", "repo": "squid", "name": "Child class fields should not shadow parent class fields", "createdAt": "2023-07-27T03:12:21+0000", "htmlDesc": "<p>Having a variable with the same name in two unrelated classes is fine, but do the same thing within a class hierarchy and you'll get confusion at\nbest, chaos at worst. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n  protected Season ripe;\n  protected Color flesh;\n\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private boolean ripe;  // Noncompliant\n  private static Color FLESH; // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit {\n  protected Season ripe;\n  protected Color flesh;\n\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private boolean ripened;\n  private static Color FLESH_COLOR;\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores same-name fields that are <code>static</code> in both the parent and child classes. This rule ignores <code>private</code> parent\nclass fields, but in all other such cases, the child class field should be renamed.</p>\n<pre>\npublic class Fruit {\n  private Season ripe;\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private Season ripe;  // Compliant as parent field 'ripe' is anyway not visible from Raspberry\n  // ...\n}\n</pre>", "mdDesc": "<p>Having a variable with the same name in two unrelated classes is fine, but do the same thing within a class hierarchy and you'll get confusion at\nbest, chaos at worst. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n  protected Season ripe;\n  protected Color flesh;\n\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private boolean ripe;  // Noncompliant\n  private static Color FLESH; // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit {\n  protected Season ripe;\n  protected Color flesh;\n\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private boolean ripened;\n  private static Color FLESH_COLOR;\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores same-name fields that are <code>static</code> in both the parent and child classes. This rule ignores <code>private</code> parent\nclass fields, but in all other such cases, the child class field should be renamed.</p>\n<pre>\npublic class Fruit {\n  private Season ripe;\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private Season ripe;  // Compliant as parent field 'ripe' is anyway not visible from Raspberry\n  // ...\n}\n</pre>", "severity": "BLOCKER", "status": "READY", "isTemplate": false, "tags": [], "sysTags": ["confusing"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "5min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "5min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "5min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "5min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYmVVaAvqMsO3hqTZpQM", "inherit": "NONE", "severity": "BLOCKER", "params": [], "createdAt": "2023-07-27T03:12:43+0000", "updatedAt": "2023-07-27T03:12:43+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MINOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-09-27T08:04:11+0000"}]}, "squid:S1191": {"rule": {"key": "squid:S1191", "repo": "squid", "name": "Classes from \"sun.*\" packages should not be used", "createdAt": "2023-07-27T03:12:20+0000", "htmlDesc": "<p>Classes in the <code>sun.*</code> or <code>com.sun.*</code> packages are considered implementation details, and are not part of the Java API.</p>\n<p>They can cause problems when moving to new versions of Java because there is no backwards compatibility guarantee. Similarly, they can cause\nproblems when moving to a different Java vendor, such as OpenJDK.</p>\n<p>Such classes are almost always wrapped by Java API classes that should be used instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport com.sun.jna.Native;     // Noncompliant\nimport sun.misc.BASE64Encoder; // Noncompliant\n</pre>", "mdDesc": "<p>Classes in the <code>sun.*</code> or <code>com.sun.*</code> packages are considered implementation details, and are not part of the Java API.</p>\n<p>They can cause problems when moving to new versions of Java because there is no backwards compatibility guarantee. Similarly, they can cause\nproblems when moving to a different Java vendor, such as OpenJDK.</p>\n<p>Such classes are almost always wrapped by Java API classes that should be used instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport com.sun.jna.Native;     // Noncompliant\nimport sun.misc.BASE64Encoder; // Noncompliant\n</pre>", "severity": "MAJOR", "status": "READY", "isTemplate": false, "tags": [], "sysTags": ["lock-in", "pitfall"], "lang": "java", "langName": "Java", "params": [{"key": "Exclude", "htmlDesc": "Comma separated list of Sun packages to be ignored by this rule. Example: com.sun.jna,sun.misc", "type": "STRING"}], "defaultDebtRemFnType": "LINEAR", "defaultDebtRemFnCoeff": "20min", "effortToFixDescription": "per \"sun\" import", "debtOverloaded": false, "debtRemFnType": "LINEAR", "debtRemFnCoeff": "20min", "defaultRemFnType": "LINEAR", "defaultRemFnGapMultiplier": "20min", "remFnType": "LINEAR", "remFnGapMultiplier": "20min", "remFnOverloaded": false, "gapDescription": "per \"sun\" import", "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYmVVaAvqMsO3hqTZpQM", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-07-27T03:12:43+0000", "updatedAt": "2023-07-27T03:12:43+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "squid:S3972": {"rule": {"key": "squid:S3972", "repo": "squid", "name": "Conditionals should start on new lines", "createdAt": "2023-07-27T03:12:20+0000", "htmlDesc": "<p>Code is clearest when each statement has its own line. Nonetheless, it is a common pattern to combine on the same line an <code>if</code> and its\nresulting <em>then</em> statement. However, when an <code>if</code> is placed on the same line as the closing <code>} </code> from a preceding\n<code>else</code> or <code>else if</code>, it is either an error - <code>else</code> is missing - or the invitation to a future error as maintainers\nfail to understand that the two statements are unconnected.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition1) {\n  // ...\n} if (condition2) {  // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition1) {\n  // ...\n} else if (condition2) {\n  //...\n}\n</pre>\n<p>Or</p>\n<pre>\nif (condition1) {\n  // ...\n}\n\nif (condition2) {\n  //...\n}\n</pre>", "mdDesc": "<p>Code is clearest when each statement has its own line. Nonetheless, it is a common pattern to combine on the same line an <code>if</code> and its\nresulting <em>then</em> statement. However, when an <code>if</code> is placed on the same line as the closing <code>} </code> from a preceding\n<code>else</code> or <code>else if</code>, it is either an error - <code>else</code> is missing - or the invitation to a future error as maintainers\nfail to understand that the two statements are unconnected.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition1) {\n  // ...\n} if (condition2) {  // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition1) {\n  // ...\n} else if (condition2) {\n  //...\n}\n</pre>\n<p>Or</p>\n<pre>\nif (condition1) {\n  // ...\n}\n\nif (condition2) {\n  //...\n}\n</pre>", "severity": "CRITICAL", "status": "READY", "isTemplate": false, "tags": [], "sysTags": ["suspicious"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "10min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "10min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "10min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "10min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYmVVaAvqMsO3hqTZpQM", "inherit": "NONE", "severity": "CRITICAL", "params": [], "createdAt": "2023-07-27T03:12:43+0000", "updatedAt": "2023-07-27T03:12:43+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "CRITICAL", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "pmd:ConsecutiveAppendsShouldReuse": {"rule": {"key": "pmd:ConsecutiveAppendsShouldReuse", "repo": "pmd", "name": "Consecutive Appends Should Reuse", "createdAt": "2023-07-27T03:12:15+0000", "htmlDesc": "Consecutively calls to StringBuffer/StringBuilder .append should reuse the target object. This can improve the performance. Example:\n<pre>\nString foo = \" \";\n\nStringBuffer buf = new StringBuffer();\nbuf.append(\"Hello\"); // poor\nbuf.append(foo);\nbuf.append(\"World\");\n\nStringBuffer buf = new StringBuffer();\nbuf.append(\"Hello\").append(foo).append(\"World\"); // good\n</pre>", "mdDesc": "Consecutively calls to StringBuffer/StringBuilder .append should reuse the target object. This can improve the performance. Example:\n<pre>\nString foo = \" \";\n\nStringBuffer buf = new StringBuffer();\nbuf.append(\"Hello\"); // poor\nbuf.append(foo);\nbuf.append(\"World\");\n\nStringBuffer buf = new StringBuffer();\nbuf.append(\"Hello\").append(foo).append(\"World\"); // good\n</pre>", "severity": "MAJOR", "status": "READY", "internalKey": "category/java/performance.xml/ConsecutiveAppendsShouldReuse", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "5min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "5min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "5min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "5min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MINOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-09-04T01:55:08+0000"}]}, "squid:S00115": {"rule": {"key": "squid:S00115", "repo": "squid", "name": "Constant names should comply with a naming convention", "createdAt": "2023-07-27T03:12:21+0000", "htmlDesc": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>\n<pre>\npublic class MyClass {\n  public static final int first = 1;\n}\n\npublic enum MyEnum {\n  first;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public static final int FIRST = 1;\n}\n\npublic enum MyEnum {\n  FIRST;\n}\n</pre>", "mdDesc": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>\n<pre>\npublic class MyClass {\n  public static final int first = 1;\n}\n\npublic enum MyEnum {\n  first;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public static final int FIRST = 1;\n}\n\npublic enum MyEnum {\n  FIRST;\n}\n</pre>", "severity": "CRITICAL", "status": "READY", "internalKey": "S115", "isTemplate": false, "tags": [], "sysTags": ["convention"], "lang": "java", "langName": "Java", "params": [{"key": "format", "htmlDesc": "Regular expression used to check the constant names against.", "defaultValue": "^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$", "type": "STRING"}], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYmVVaAvqMsO3hqTZpQM", "inherit": "NONE", "severity": "CRITICAL", "params": [{"key": "format", "value": "^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$"}], "createdAt": "2023-07-27T03:12:43+0000", "updatedAt": "2023-07-27T03:12:43+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MINOR", "params": [{"key": "format", "value": "^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$"}], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-09-12T03:27:01+0000"}]}, "squid:S2129": {"rule": {"key": "squid:S2129", "repo": "squid", "name": "Constructors should not be used to instantiate \"String\", \"BigInteger\", \"BigDecimal\" and primitive-wrapper classes", "createdAt": "2023-07-27T03:12:21+0000", "htmlDesc": "<p>Constructors for <code>String</code>, <code>BigInteger</code>, <code>BigDecimal</code> and the objects used to wrap primitives should never be\nused. Doing so is less clear and uses more memory than simply using the desired value in the case of strings, and using <code>valueOf</code> for\neverything else.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString empty = new String(); // Noncompliant; yields essentially \"\", so just use that.\nString nonempty = new String(\"Hello world\"); // Noncompliant\nDouble myDouble = new Double(1.1); // Noncompliant; use valueOf\nInteger integer = new Integer(1); // Noncompliant\nBoolean bool = new Boolean(true); // Noncompliant\nBigInteger bigInteger1 = new BigInteger(\"3\"); // Noncompliant\nBigInteger bigInteger2 = new BigInteger(\"9223372036854775807\"); // Noncompliant\nBigInteger bigInteger3 = new BigInteger(\"111222333444555666777888999\"); // Compliant, greater than Long.MAX_VALUE\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString empty = \"\";\nString nonempty = \"Hello world\";\nDouble myDouble = Double.valueOf(1.1);\nInteger integer = Integer.valueOf(1);\nBoolean bool = Boolean.valueOf(true);\nBigInteger bigInteger1 = BigInteger.valueOf(3);\nBigInteger bigInteger2 = BigInteger.valueOf(9223372036854775807L);\nBigInteger bigInteger3 = new BigInteger(\"111222333444555666777888999\");\n</pre>\n<h2>Exceptions</h2>\n<p><code>BigDecimal</code> constructor with <code>double</code> argument is ignored as using <code>valueOf</code> instead might change resulting\nvalue. See <a href='/coding_rules#rule_key=squid%3AS2111'>S2111</a>.</p>", "mdDesc": "<p>Constructors for <code>String</code>, <code>BigInteger</code>, <code>BigDecimal</code> and the objects used to wrap primitives should never be\nused. Doing so is less clear and uses more memory than simply using the desired value in the case of strings, and using <code>valueOf</code> for\neverything else.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString empty = new String(); // Noncompliant; yields essentially \"\", so just use that.\nString nonempty = new String(\"Hello world\"); // Noncompliant\nDouble myDouble = new Double(1.1); // Noncompliant; use valueOf\nInteger integer = new Integer(1); // Noncompliant\nBoolean bool = new Boolean(true); // Noncompliant\nBigInteger bigInteger1 = new BigInteger(\"3\"); // Noncompliant\nBigInteger bigInteger2 = new BigInteger(\"9223372036854775807\"); // Noncompliant\nBigInteger bigInteger3 = new BigInteger(\"111222333444555666777888999\"); // Compliant, greater than Long.MAX_VALUE\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString empty = \"\";\nString nonempty = \"Hello world\";\nDouble myDouble = Double.valueOf(1.1);\nInteger integer = Integer.valueOf(1);\nBoolean bool = Boolean.valueOf(true);\nBigInteger bigInteger1 = BigInteger.valueOf(3);\nBigInteger bigInteger2 = BigInteger.valueOf(9223372036854775807L);\nBigInteger bigInteger3 = new BigInteger(\"111222333444555666777888999\");\n</pre>\n<h2>Exceptions</h2>\n<p><code>BigDecimal</code> constructor with <code>double</code> argument is ignored as using <code>valueOf</code> instead might change resulting\nvalue. See {rule:squid:S2111}.</p>", "severity": "MAJOR", "status": "READY", "isTemplate": false, "tags": [], "sysTags": ["performance"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "5min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "5min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "5min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "5min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYmVVaAvqMsO3hqTZpQM", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-07-27T03:12:43+0000", "updatedAt": "2023-07-27T03:12:43+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "findbugs:DMI_BIGDECIMAL_CONSTRUCTED_FROM_DOUBLE": {"rule": {"key": "findbugs:DMI_BIGDECIMAL_CONSTRUCTED_FROM_DOUBLE", "repo": "findbugs", "name": "Correctness - BigDecimal constructed from double that isn't represented precisely", "createdAt": "2023-07-27T03:12:20+0000", "htmlDesc": "<p>\nThis code creates a BigDecimal from a double value that doesn't translate well to a\ndecimal number.\nFor example, one might assume that writing new BigDecimal(0.1) in Java creates a BigDecimal which is exactly equal to 0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal to 0.1000000000000000055511151231257827021181583404541015625.\nYou probably want to use the BigDecimal.valueOf(double d) method, which uses the String representation\nof the double to create the BigDecimal (e.g., BigDecimal.valueOf(0.1) gives 0.1).\n</p>", "mdDesc": "<p>\nThis code creates a BigDecimal from a double value that doesn't translate well to a\ndecimal number.\nFor example, one might assume that writing new BigDecimal(0.1) in Java creates a BigDecimal which is exactly equal to 0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal to 0.1000000000000000055511151231257827021181583404541015625.\nYou probably want to use the BigDecimal.valueOf(double d) method, which uses the String representation\nof the double to create the BigDecimal (e.g., BigDecimal.valueOf(0.1) gives 0.1).\n</p>", "severity": "MAJOR", "status": "READY", "internalKey": "DMI_BIGDECIMAL_CONSTRUCTED_FROM_DOUBLE", "isTemplate": false, "tags": [], "sysTags": ["correctness"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "1h", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "1h", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "1h", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "1h", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "BUG"}, "actives": [{"qProfile": "AYmVVZVoqMsO3hqTZolI", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-07-27T03:12:40+0000", "updatedAt": "2023-07-27T03:12:40+0000"}, {"qProfile": "AYmVVZolqMsO3hqTZo3u", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-07-27T03:12:42+0000", "updatedAt": "2023-07-27T03:12:42+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "findbugs:EC_UNRELATED_TYPES": {"rule": {"key": "findbugs:EC_UNRELATED_TYPES", "repo": "findbugs", "name": "Correctness - Call to equals() comparing different types", "createdAt": "2023-07-27T03:12:20+0000", "htmlDesc": "<p> This method calls equals(Object) on two references of different\nclass types and analysis suggests they will be to objects of different classes\nat runtime. Further, examination of the equals methods that would be invoked suggest that either\nthis call will always return false, or else the equals method is not be symmetric (which is\na property required by the contract\nfor equals in class Object).\n</p>", "mdDesc": "<p> This method calls equals(Object) on two references of different\nclass types and analysis suggests they will be to objects of different classes\nat runtime. Further, examination of the equals methods that would be invoked suggest that either\nthis call will always return false, or else the equals method is not be symmetric (which is\na property required by the contract\nfor equals in class Object).\n</p>", "severity": "MAJOR", "status": "READY", "internalKey": "EC_UNRELATED_TYPES", "isTemplate": false, "tags": [], "sysTags": ["correctness"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "1h", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "1h", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "1h", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "1h", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "BUG"}, "actives": [{"qProfile": "AYmVVZVoqMsO3hqTZolI", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-07-27T03:12:40+0000", "updatedAt": "2023-07-27T03:12:40+0000"}, {"qProfile": "AYmVVZolqMsO3hqTZo3u", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-07-27T03:12:42+0000", "updatedAt": "2023-07-27T03:12:42+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "findbugs:RC_REF_COMPARISON": {"rule": {"key": "findbugs:RC_REF_COMPARISON", "repo": "findbugs", "name": "Correctness - Suspicious reference comparison", "createdAt": "2023-07-27T03:12:20+0000", "htmlDesc": "<p> This method compares two reference values using the == or != operator,\nwhere the correct way to compare instances of this type is generally\nwith the equals() method.\nIt is possible to create distinct instances that are equal but do not compare as == since\nthey are different objects.\nExamples of classes which should generally\nnot be compared by reference are java.lang.Integer, java.lang.Float, etc.</p>", "mdDesc": "<p> This method compares two reference values using the == or != operator,\nwhere the correct way to compare instances of this type is generally\nwith the equals() method.\nIt is possible to create distinct instances that are equal but do not compare as == since\nthey are different objects.\nExamples of classes which should generally\nnot be compared by reference are java.lang.Integer, java.lang.Float, etc.</p>", "severity": "MAJOR", "status": "READY", "internalKey": "RC_REF_COMPARISON", "isTemplate": false, "tags": [], "sysTags": ["correctness"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "1h", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "1h", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "1h", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "1h", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "BUG"}, "actives": [{"qProfile": "AYmVVZVoqMsO3hqTZolI", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-07-27T03:12:40+0000", "updatedAt": "2023-07-27T03:12:40+0000"}, {"qProfile": "AYmVVZolqMsO3hqTZo3u", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-07-27T03:12:42+0000", "updatedAt": "2023-07-27T03:12:42+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "squid:MissingDeprecatedCheck": {"rule": {"key": "squid:MissingDeprecatedCheck", "repo": "squid", "name": "Deprecated elements should have both the annotation and the Javadoc tag", "createdAt": "2023-07-27T03:12:20+0000", "htmlDesc": "<p>Deprecation should be marked with both the <code>@Deprecated</code> annotation and @deprecated Javadoc tag. The annotation enables tools such as\nIDEs to warn about referencing deprecated elements, and the tag can be used to explain when it was deprecated, why, and how references should be\nrefactored. </p>\n<p>Further, Java 9 adds two additional arguments to the annotation:</p>\n<ul>\n  <li> <code>since</code> allows you to describe when the deprecation took place </li>\n  <li> <code>forRemoval</code>, indicates whether the deprecated element will be removed at some future date </li>\n</ul>\n<p>If your compile level is Java 9 or higher, you should be using one or both of these arguments.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n\n  @Deprecated\n  public void foo1() {\n  }\n\n  /**\n    * @deprecated\n    */\n  public void foo2() {    // Noncompliant\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n\n  /**\n    * @deprecated (when, why, refactoring advice...)\n    */\n  @Deprecated\n  public void foo1() {\n  }\n\n  /**\n    * Java &gt;= 9\n    * @deprecated (when, why, refactoring advice...)\n    */\n  @Deprecated(since=\"5.1\")\n  public void foo2() {\n  }\n\n  /**\n    * Java &gt;= 9\n    * @deprecated (when, why, refactoring advice...)\n    */\n  @Deprecated(since=\"4.2\", forRemoval=true)\n  public void foo3() {\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The members and methods of a deprecated class or interface are ignored by this rule. The classes and interfaces themselves are still subject to\nit.</p>\n<pre>\n/**\n * @deprecated (when, why, etc...)\n */\n@Deprecated\nclass Qix  {\n\n  public void foo() {} // Compliant; class is deprecated\n\n}\n\n/**\n * @deprecated (when, why, etc...)\n */\n@Deprecated\ninterface Plop {\n\n  void bar();\n\n}\n</pre>", "mdDesc": "<p>Deprecation should be marked with both the <code>@Deprecated</code> annotation and @deprecated Javadoc tag. The annotation enables tools such as\nIDEs to warn about referencing deprecated elements, and the tag can be used to explain when it was deprecated, why, and how references should be\nrefactored. </p>\n<p>Further, Java 9 adds two additional arguments to the annotation:</p>\n<ul>\n  <li> <code>since</code> allows you to describe when the deprecation took place </li>\n  <li> <code>forRemoval</code>, indicates whether the deprecated element will be removed at some future date </li>\n</ul>\n<p>If your compile level is Java 9 or higher, you should be using one or both of these arguments.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n\n  @Deprecated\n  public void foo1() {\n  }\n\n  /**\n    * @deprecated\n    */\n  public void foo2() {    // Noncompliant\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n\n  /**\n    * @deprecated (when, why, refactoring advice...)\n    */\n  @Deprecated\n  public void foo1() {\n  }\n\n  /**\n    * Java &gt;= 9\n    * @deprecated (when, why, refactoring advice...)\n    */\n  @Deprecated(since=\"5.1\")\n  public void foo2() {\n  }\n\n  /**\n    * Java &gt;= 9\n    * @deprecated (when, why, refactoring advice...)\n    */\n  @Deprecated(since=\"4.2\", forRemoval=true)\n  public void foo3() {\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The members and methods of a deprecated class or interface are ignored by this rule. The classes and interfaces themselves are still subject to\nit.</p>\n<pre>\n/**\n * @deprecated (when, why, etc...)\n */\n@Deprecated\nclass Qix  {\n\n  public void foo() {} // Compliant; class is deprecated\n\n}\n\n/**\n * @deprecated (when, why, etc...)\n */\n@Deprecated\ninterface Plop {\n\n  void bar();\n\n}\n</pre>", "severity": "MAJOR", "status": "READY", "internalKey": "S1123", "isTemplate": false, "tags": [], "sysTags": ["bad-practice", "obsolete"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "5min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "5min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "5min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "5min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYmVVaAvqMsO3hqTZpQM", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-07-27T03:12:43+0000", "updatedAt": "2023-07-27T03:12:43+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MINOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-09-12T05:37:17+0000"}]}, "checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck": {"rule": {"key": "checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck", "repo": "checkstyle", "name": "Equals Avoid Null", "createdAt": "2023-07-27T03:12:18+0000", "htmlDesc": "<p>Checks that any combination of String literals with optional assignment is on the left side of an equals() comparison.</p>\n<p>Rationale: Calling the equals() method on String literals will avoid a potential NullPointerException. Also, it is pretty common to see null check right before equals comparisons which is not necessary in the below example.</p>\n<p>For example:</p>\n<pre>\n  String nullString = null;\n  nullString.equals(\"My_Sweet_String\");\n</pre>\n\n<p>should be refactored to:</p>\n<pre>\n  String nullString = null;\n  \"My_Sweet_String\".equals(nullString);\n</pre>\n<p>Limitations: If the equals method is overridden or a covariant equals method is defined and the implementation is incorrect (where s.equals(t) does not return the same result as t.equals(s)) then rearranging the called on object and parameter may have unexpected results.</p>\n<p>Java's Autoboxing feature has an affect on how this check is implemented. Pre Java 5 all IDENT + IDENT object concatenations would not cause a NullPointerException even if null. Those situations could have been included in this check. They would simply act as if they surrounded by String.valueof() which would concatenate the String null.</p>\n<p>The following example will cause a NullPointerException as a result of what autoboxing does.</p>\n<pre>\n  Integer i = null, j = null;\n  String number = \"5\"\n  number.equals(i + j);\n</pre>\n<p>Since, it is difficult to determine what kind of Object is being concatenated all ident concatenation is considered unsafe.</p>\n\n<p>\n</p>", "mdDesc": "<p>Checks that any combination of String literals with optional assignment is on the left side of an equals() comparison.</p>\n<p>Rationale: Calling the equals() method on String literals will avoid a potential NullPointerException. Also, it is pretty common to see null check right before equals comparisons which is not necessary in the below example.</p>\n<p>For example:</p>\n<pre>\n  String nullString = null;\n  nullString.equals(\"My_Sweet_String\");\n</pre>\n\n<p>should be refactored to:</p>\n<pre>\n  String nullString = null;\n  \"My_Sweet_String\".equals(nullString);\n</pre>\n<p>Limitations: If the equals method is overridden or a covariant equals method is defined and the implementation is incorrect (where s.equals(t) does not return the same result as t.equals(s)) then rearranging the called on object and parameter may have unexpected results.</p>\n<p>Java's Autoboxing feature has an affect on how this check is implemented. Pre Java 5 all IDENT + IDENT object concatenations would not cause a NullPointerException even if null. Those situations could have been included in this check. They would simply act as if they surrounded by String.valueof() which would concatenate the String null.</p>\n<p>The following example will cause a NullPointerException as a result of what autoboxing does.</p>\n<pre>\n  Integer i = null, j = null;\n  String number = \"5\"\n  number.equals(i + j);\n</pre>\n<p>Since, it is difficult to determine what kind of Object is being concatenated all ident concatenation is considered unsafe.</p>\n\n<p>\n</p>", "severity": "MAJOR", "status": "READY", "internalKey": "Checker/TreeWalker/EqualsAvoidNull", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [{"key": "ignoreEqualsIgnoreCase", "htmlDesc": "whether to ignore String.equalsIgnoreCase() invocations. Default is false.", "defaultValue": "false", "type": "BOOLEAN"}], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "10min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "10min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "10min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "10min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [{"key": "ignoreEqualsIgnoreCase", "value": "false"}], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "squid:S1166": {"rule": {"key": "squid:S1166", "repo": "squid", "name": "Exception handlers should preserve the original exceptions", "createdAt": "2023-07-27T03:12:21+0000", "htmlDesc": "<p>When handling a caught exception, the original exception's message and stack trace should be logged or passed forward.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* ... */\n} catch (Exception e) {   // Noncompliant - exception is lost\n  LOGGER.info(\"context\");\n}\n\ntry {\n  /* ... */\n} catch (Exception e) {  // Noncompliant - exception is lost (only message is preserved)\n  LOGGER.info(e.getMessage());\n}\n\ntry {\n  /* ... */\n} catch (Exception e) {  // Noncompliant - original exception is lost\n  throw new RuntimeException(\"context\");\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* ... */\n} catch (Exception e) {\n  LOGGER.info(e);  // exception is logged\n}\n\ntry {\n  /* ... */\n} catch (Exception e) {\n  throw new RuntimeException(e);   // exception stack trace is propagated\n}\n\ntry {\n  /* ... */\n} catch (RuntimeException e) {\n  doSomething();\n  throw e;  // original exception passed forward\n} catch (Exception e) {\n  throw new RuntimeException(e);  // Conversion into unchecked exception is also allowed\n}\n</pre>\n<h2>Exceptions</h2>\n<p><code>InterruptedException</code>, <code>NumberFormatException</code>, <code>DateTimeParseException</code>, <code>ParseException</code> and\n<code>MalformedURLException</code> exceptions are arguably used to indicate nonexceptional outcomes. Similarly, handling\n<code>NoSuchMethodException</code> is often required when dealing with the Java reflection API.</p>\n<p>Because they are part of Java, developers have no choice but to deal with them. This rule does not verify that those particular exceptions are\ncorrectly handled.</p>\n<pre>\nint myInteger;\ntry {\n  myInteger = Integer.parseInt(myString);\n} catch (NumberFormatException e) {\n  // It is perfectly acceptable to not handle \"e\" here\n  myInteger = 0;\n}\n</pre>\n<p>Furthermore, no issue will be raised if the exception message is logged with additional information, as it shows that the developer added some\ncontext to the error message.</p>\n<pre>\ntry {\n  /* ... */\n} catch (Exception e) {\n  String message = \"Exception raised while authenticating user: \" + e.getMessage();\n  LOGGER.warn(message); // Compliant - exception message logged with some contextual information\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/6gEqAQ\">CERT, ERR00-J.</a> - Do not suppress or ignore checked exceptions </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/778.html\">MITRE, CWE-778</a> - Insufficient Logging </li>\n  <li> OWASP Top 10 2017 Category A10 - Insufficient Logging &amp; Monitoring </li>\n</ul>", "mdDesc": "<p>When handling a caught exception, the original exception's message and stack trace should be logged or passed forward.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* ... */\n} catch (Exception e) {   // Noncompliant - exception is lost\n  LOGGER.info(\"context\");\n}\n\ntry {\n  /* ... */\n} catch (Exception e) {  // Noncompliant - exception is lost (only message is preserved)\n  LOGGER.info(e.getMessage());\n}\n\ntry {\n  /* ... */\n} catch (Exception e) {  // Noncompliant - original exception is lost\n  throw new RuntimeException(\"context\");\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* ... */\n} catch (Exception e) {\n  LOGGER.info(e);  // exception is logged\n}\n\ntry {\n  /* ... */\n} catch (Exception e) {\n  throw new RuntimeException(e);   // exception stack trace is propagated\n}\n\ntry {\n  /* ... */\n} catch (RuntimeException e) {\n  doSomething();\n  throw e;  // original exception passed forward\n} catch (Exception e) {\n  throw new RuntimeException(e);  // Conversion into unchecked exception is also allowed\n}\n</pre>\n<h2>Exceptions</h2>\n<p><code>InterruptedException</code>, <code>NumberFormatException</code>, <code>DateTimeParseException</code>, <code>ParseException</code> and\n<code>MalformedURLException</code> exceptions are arguably used to indicate nonexceptional outcomes. Similarly, handling\n<code>NoSuchMethodException</code> is often required when dealing with the Java reflection API.</p>\n<p>Because they are part of Java, developers have no choice but to deal with them. This rule does not verify that those particular exceptions are\ncorrectly handled.</p>\n<pre>\nint myInteger;\ntry {\n  myInteger = Integer.parseInt(myString);\n} catch (NumberFormatException e) {\n  // It is perfectly acceptable to not handle \"e\" here\n  myInteger = 0;\n}\n</pre>\n<p>Furthermore, no issue will be raised if the exception message is logged with additional information, as it shows that the developer added some\ncontext to the error message.</p>\n<pre>\ntry {\n  /* ... */\n} catch (Exception e) {\n  String message = \"Exception raised while authenticating user: \" + e.getMessage();\n  LOGGER.warn(message); // Compliant - exception message logged with some contextual information\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/6gEqAQ\">CERT, ERR00-J.</a> - Do not suppress or ignore checked exceptions </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/778.html\">MITRE, CWE-778</a> - Insufficient Logging </li>\n  <li> OWASP Top 10 2017 Category A10 - Insufficient Logging &amp; Monitoring </li>\n</ul>", "severity": "MAJOR", "status": "READY", "isTemplate": false, "tags": [], "sysTags": ["cert", "error-handling", "owasp-a10", "suspicious"], "lang": "java", "langName": "Java", "params": [{"key": "exceptions", "htmlDesc": "List of exceptions which should not be checked", "defaultValue": "java.lang.InterruptedException, java.lang.NumberFormatException, java.lang.NoSuchMethodException, java.text.ParseException, java.net.MalformedURLException, java.time.format.DateTimeParseException", "type": "STRING"}], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "10min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "10min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "10min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "10min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [{"key": "exceptions", "value": "java.lang.InterruptedException, java.lang.NumberFormatException, java.lang.NoSuchMethodException, java.text.ParseException, java.net.MalformedURLException, java.time.format.DateTimeParseException"}], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-09-21T03:17:39+0000"}]}, "squid:S1193": {"rule": {"key": "squid:S1193", "repo": "squid", "name": "Exception types should not be tested using \"instanceof\" in catch blocks", "createdAt": "2023-07-27T03:12:20+0000", "htmlDesc": "<p>Multiple catch blocks of the appropriate type should be used instead of catching a general exception, and then testing on the type.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* ... */\n} catch (Exception e) {\n  if(e instanceof IOException) { /* ... */ }         // Noncompliant\n  if(e instanceof NullPointerException{ /* ... */ }  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* ... */\n} catch (IOException e) { /* ... */ }                // Compliant\n} catch (NullPointerException e) { /* ... */ }       // Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/5gFFB\">CERT, ERR51-J.</a> - Prefer user-defined exceptions over more general exception\n  types </li>\n</ul>", "mdDesc": "<p>Multiple catch blocks of the appropriate type should be used instead of catching a general exception, and then testing on the type.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* ... */\n} catch (Exception e) {\n  if(e instanceof IOException) { /* ... */ }         // Noncompliant\n  if(e instanceof NullPointerException{ /* ... */ }  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* ... */\n} catch (IOException e) { /* ... */ }                // Compliant\n} catch (NullPointerException e) { /* ... */ }       // Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/5gFFB\">CERT, ERR51-J.</a> - Prefer user-defined exceptions over more general exception\n  types </li>\n</ul>", "severity": "MAJOR", "status": "READY", "isTemplate": false, "tags": [], "sysTags": ["cert", "clumsy", "error-handling"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "10min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "10min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "10min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "10min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYmVVaAvqMsO3hqTZpQM", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-07-27T03:12:43+0000", "updatedAt": "2023-07-27T03:12:43+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "squid:S1948": {"rule": {"key": "squid:S1948", "repo": "squid", "name": "Fields in a \"Serializable\" class should either be transient or serializable", "createdAt": "2023-07-27T03:12:20+0000", "htmlDesc": "<p>Fields in a <code>Serializable</code> class must themselves be either <code>Serializable</code> or <code>transient</code> even if the class is\nnever explicitly serialized or deserialized. For instance, under load, most J2EE application frameworks flush objects to disk, and an allegedly\n<code>Serializable</code> object with non-transient, non-serializable data members could cause program crashes, and open the door to attackers. In\ngeneral a <code>Serializable</code> class is expected to fulfil its contract and not have an unexpected behaviour when an instance is serialized. </p>\n<p>This rule raises an issue on non-<code>Serializable</code> fields, and on collection fields when they are not <code>private</code> (because they\ncould be assigned non-<code>Serializable</code> values externally), and when they are assigned non-<code>Serializable</code> types within the\nclass.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Address {\n  //...\n}\n\npublic class Person implements Serializable {\n  private static final long serialVersionUID = 1905122041950251207L;\n\n  private String name;\n  private Address address;  // Noncompliant; Address isn't serializable\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Address implements Serializable {\n  private static final long serialVersionUID = 2405172041950251807L;\n}\n\npublic class Person implements Serializable {\n  private static final long serialVersionUID = 1905122041950251207L;\n\n  private String name;\n  private Address address;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The alternative to making all members <code>serializable</code> or <code>transient</code> is to implement special methods which take on the\nresponsibility of properly serializing and de-serializing the object. This rule ignores classes which implement the following methods:</p>\n<pre>\n private void writeObject(java.io.ObjectOutputStream out)\n     throws IOException\n private void readObject(java.io.ObjectInputStream in)\n     throws IOException, ClassNotFoundException;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/594.html\">MITRE, CWE-594</a> - Saving Unserializable Objects to Disk </li>\n  <li> <a href=\"http://docs.oracle.com/javase/6/docs/api/java/io/Serializable.html\">Oracle Java 6, Serializable</a> </li>\n  <li> <a href=\"http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html\">Oracle Java 7, Serializable</a> </li>\n</ul>", "mdDesc": "<p>Fields in a <code>Serializable</code> class must themselves be either <code>Serializable</code> or <code>transient</code> even if the class is\nnever explicitly serialized or deserialized. For instance, under load, most J2EE application frameworks flush objects to disk, and an allegedly\n<code>Serializable</code> object with non-transient, non-serializable data members could cause program crashes, and open the door to attackers. In\ngeneral a <code>Serializable</code> class is expected to fulfil its contract and not have an unexpected behaviour when an instance is serialized. </p>\n<p>This rule raises an issue on non-<code>Serializable</code> fields, and on collection fields when they are not <code>private</code> (because they\ncould be assigned non-<code>Serializable</code> values externally), and when they are assigned non-<code>Serializable</code> types within the\nclass.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Address {\n  //...\n}\n\npublic class Person implements Serializable {\n  private static final long serialVersionUID = 1905122041950251207L;\n\n  private String name;\n  private Address address;  // Noncompliant; Address isn't serializable\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Address implements Serializable {\n  private static final long serialVersionUID = 2405172041950251807L;\n}\n\npublic class Person implements Serializable {\n  private static final long serialVersionUID = 1905122041950251207L;\n\n  private String name;\n  private Address address;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The alternative to making all members <code>serializable</code> or <code>transient</code> is to implement special methods which take on the\nresponsibility of properly serializing and de-serializing the object. This rule ignores classes which implement the following methods:</p>\n<pre>\n private void writeObject(java.io.ObjectOutputStream out)\n     throws IOException\n private void readObject(java.io.ObjectInputStream in)\n     throws IOException, ClassNotFoundException;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/594.html\">MITRE, CWE-594</a> - Saving Unserializable Objects to Disk </li>\n  <li> <a href=\"http://docs.oracle.com/javase/6/docs/api/java/io/Serializable.html\">Oracle Java 6, Serializable</a> </li>\n  <li> <a href=\"http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html\">Oracle Java 7, Serializable</a> </li>\n</ul>", "severity": "CRITICAL", "status": "READY", "isTemplate": false, "tags": [], "sysTags": ["cwe", "serialization"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "30min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "30min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "30min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "30min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYmVVaAvqMsO3hqTZpQM", "inherit": "NONE", "severity": "CRITICAL", "params": [], "createdAt": "2023-07-27T03:12:43+0000", "updatedAt": "2023-07-27T03:12:43+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MINOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-09-13T07:19:32+0000"}]}, "squid:S1244": {"rule": {"key": "squid:S1244", "repo": "squid", "name": "Floating point numbers should not be tested for equality", "createdAt": "2023-07-27T03:12:21+0000", "htmlDesc": "<p>Floating point math is imprecise because of the challenges of storing such values in a binary representation. Even worse, floating point math is\nnot associative; push a <code>float</code> or a <code>double</code> through a series of simple mathematical operations and the answer will be\ndifferent based on the order of those operation because of the rounding that takes place at each step.</p>\n<p>Even simple floating point assignments are not simple:</p>\n<pre>\nfloat f = 0.1; // 0.100000001490116119384765625\ndouble d = 0.1; // 0.1000000000000000055511151231257827021181583404541015625\n</pre>\n<p>(Results will vary based on compiler and compiler settings);</p>\n<p>Therefore, the use of the equality (<code>==</code>) and inequality (<code>!=</code>) operators on <code>float</code> or <code>double</code> values\nis almost always an error. Instead the best course is to avoid floating point comparisons altogether. When that is not possible, you should consider\nusing one of Java's float-handling <code>Numbers</code> such as <code>BigDecimal</code> which can properly handle floating point comparisons. A third\noption is to look not for equality but for whether the value is close enough. I.e. compare the absolute value of the difference between the stored\nvalue and the expected value against a margin of acceptable error. Note that this does not cover all cases (<code>NaN</code> and <code>Infinity</code>\nfor instance).</p>\n<p>This rule checks for the use of direct and indirect equality/inequailty tests on floats and doubles.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfloat myNumber = 3.146;\nif ( myNumber == 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be false\n  // ...\n}\nif ( myNumber != 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be true\n  // ...\n}\n\nif (myNumber &lt; 4 || myNumber &gt; 4) { // Noncompliant; indirect inequality test\n  // ...\n}\n\nfloat zeroFloat = 0.0f;\nif (zeroFloat == 0) {  // Noncompliant. Computations may end up with a value close but not equal to zero.\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Since <code>NaN</code> is not equal to itself, the specific case of testing a floating point value against itself is a valid test for\n<code>NaN</code> and is therefore ignored. Though using <code>Double.isNaN</code> method should be preferred instead, as intent is more explicit.</p>\n<pre>\nfloat f;\ndouble d;\nif(f != f) { // Compliant; test for NaN value\n  System.out.println(\"f is NaN\");\n} else if (f != d) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.3 - Floating-point expressions shall not be tested for equality or inequality. </li>\n  <li> MISRA C++:2008, 6-2-2 - Floating-point expressions shall not be directly or indirectly tested for equality or inequality </li>\n</ul>", "mdDesc": "<p>Floating point math is imprecise because of the challenges of storing such values in a binary representation. Even worse, floating point math is\nnot associative; push a <code>float</code> or a <code>double</code> through a series of simple mathematical operations and the answer will be\ndifferent based on the order of those operation because of the rounding that takes place at each step.</p>\n<p>Even simple floating point assignments are not simple:</p>\n<pre>\nfloat f = 0.1; // 0.100000001490116119384765625\ndouble d = 0.1; // 0.1000000000000000055511151231257827021181583404541015625\n</pre>\n<p>(Results will vary based on compiler and compiler settings);</p>\n<p>Therefore, the use of the equality (<code>==</code>) and inequality (<code>!=</code>) operators on <code>float</code> or <code>double</code> values\nis almost always an error. Instead the best course is to avoid floating point comparisons altogether. When that is not possible, you should consider\nusing one of Java's float-handling <code>Numbers</code> such as <code>BigDecimal</code> which can properly handle floating point comparisons. A third\noption is to look not for equality but for whether the value is close enough. I.e. compare the absolute value of the difference between the stored\nvalue and the expected value against a margin of acceptable error. Note that this does not cover all cases (<code>NaN</code> and <code>Infinity</code>\nfor instance).</p>\n<p>This rule checks for the use of direct and indirect equality/inequailty tests on floats and doubles.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfloat myNumber = 3.146;\nif ( myNumber == 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be false\n  // ...\n}\nif ( myNumber != 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be true\n  // ...\n}\n\nif (myNumber &lt; 4 || myNumber &gt; 4) { // Noncompliant; indirect inequality test\n  // ...\n}\n\nfloat zeroFloat = 0.0f;\nif (zeroFloat == 0) {  // Noncompliant. Computations may end up with a value close but not equal to zero.\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Since <code>NaN</code> is not equal to itself, the specific case of testing a floating point value against itself is a valid test for\n<code>NaN</code> and is therefore ignored. Though using <code>Double.isNaN</code> method should be preferred instead, as intent is more explicit.</p>\n<pre>\nfloat f;\ndouble d;\nif(f != f) { // Compliant; test for NaN value\n  System.out.println(\"f is NaN\");\n} else if (f != d) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.3 - Floating-point expressions shall not be tested for equality or inequality. </li>\n  <li> MISRA C++:2008, 6-2-2 - Floating-point expressions shall not be directly or indirectly tested for equality or inequality </li>\n</ul>", "severity": "MAJOR", "status": "READY", "isTemplate": false, "tags": [], "sysTags": ["misra"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "5min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "5min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "5min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "5min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "BUG"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "squid:S00112": {"rule": {"key": "squid:S00112", "repo": "squid", "name": "Generic exceptions should never be thrown", "createdAt": "2023-07-27T03:12:21+0000", "htmlDesc": "<p>Using such generic exceptions as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, and <code>Exception</code> prevents\ncalling methods from handling true, system-generated exceptions differently than application-generated errors. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void foo(String bar) throws Throwable {  // Noncompliant\n  throw new RuntimeException(\"My Message\");     // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void foo(String bar) {\n  throw new MyOwnRuntimeException(\"My Message\");\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Generic exceptions in the signatures of overriding methods are ignored, because overriding method has to follow signature of the throw declaration\nin the superclass. The issue will be raised on superclass declaration of the method (or won't be raised at all if superclass is not part of the\nanalysis).</p>\n<pre>\n@Override\npublic void myMethod() throws Exception {...}\n</pre>\n<p>Generic exceptions are also ignored in the signatures of methods that make calls to methods that throw generic exceptions.</p>\n<pre>\npublic void myOtherMethod throws Exception {\n  doTheThing();  // this method throws Exception\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/397.html\">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/BoB3AQ\">CERT, ERR07-J.</a> - Do not throw RuntimeException, Exception, or Throwable\n  </li>\n</ul>", "mdDesc": "<p>Using such generic exceptions as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, and <code>Exception</code> prevents\ncalling methods from handling true, system-generated exceptions differently than application-generated errors. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void foo(String bar) throws Throwable {  // Noncompliant\n  throw new RuntimeException(\"My Message\");     // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void foo(String bar) {\n  throw new MyOwnRuntimeException(\"My Message\");\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Generic exceptions in the signatures of overriding methods are ignored, because overriding method has to follow signature of the throw declaration\nin the superclass. The issue will be raised on superclass declaration of the method (or won't be raised at all if superclass is not part of the\nanalysis).</p>\n<pre>\n@Override\npublic void myMethod() throws Exception {...}\n</pre>\n<p>Generic exceptions are also ignored in the signatures of methods that make calls to methods that throw generic exceptions.</p>\n<pre>\npublic void myOtherMethod throws Exception {\n  doTheThing();  // this method throws Exception\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/397.html\">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/BoB3AQ\">CERT, ERR07-J.</a> - Do not throw RuntimeException, Exception, or Throwable\n  </li>\n</ul>", "severity": "MAJOR", "status": "READY", "internalKey": "S112", "isTemplate": false, "tags": [], "sysTags": ["cert", "cwe", "error-handling"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "20min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "20min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "20min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "20min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYmVVaAvqMsO3hqTZpQM", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-07-27T03:12:43+0000", "updatedAt": "2023-07-27T03:12:43+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MINOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-09-12T03:30:40+0000"}]}, "squid:S1764": {"rule": {"key": "squid:S1764", "repo": "squid", "name": "Identical expressions should not be used on both sides of a binary operator", "createdAt": "2023-07-27T03:12:21+0000", "htmlDesc": "<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( a == a ) { // always true\n  doZ();\n}\nif ( a != a ) { // always false\n  doY();\n}\nif ( a == b &amp;&amp; a == b ) { // if the first one is true, the second one is too\n  doX();\n}\nif ( a == b || a == b ) { // if the first one is true, the second one is too\n  doW();\n}\n\nint j = 5 / 5; //always 1\nint k = 5 - 5; //always 0\n\nc.equals(c); //always true\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </li>\n  <li> The specific case of testing a floating point value against itself is a valid test for <code>NaN</code> and is therefore ignored. </li>\n  <li> Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored. </li>\n</ul>\n<pre>\nfloat f;\nif(f != f) { //test for NaN value\n  System.out.println(\"f is NaN\");\n}\n\nint i = 1 &lt;&lt; 1; // Compliant\nint j = a &lt;&lt; a; // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href='/coding_rules#rule_key=squid%3AS1656'>S1656</a> - Implements a check on <code>=</code>. </li>\n</ul>", "mdDesc": "<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( a == a ) { // always true\n  doZ();\n}\nif ( a != a ) { // always false\n  doY();\n}\nif ( a == b &amp;&amp; a == b ) { // if the first one is true, the second one is too\n  doX();\n}\nif ( a == b || a == b ) { // if the first one is true, the second one is too\n  doW();\n}\n\nint j = 5 / 5; //always 1\nint k = 5 - 5; //always 0\n\nc.equals(c); //always true\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </li>\n  <li> The specific case of testing a floating point value against itself is a valid test for <code>NaN</code> and is therefore ignored. </li>\n  <li> Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored. </li>\n</ul>\n<pre>\nfloat f;\nif(f != f) { //test for NaN value\n  System.out.println(\"f is NaN\");\n}\n\nint i = 1 &lt;&lt; 1; // Compliant\nint j = a &lt;&lt; a; // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> {rule:squid:S1656} - Implements a check on <code>=</code>. </li>\n</ul>", "severity": "MAJOR", "status": "READY", "isTemplate": false, "tags": [], "sysTags": ["cert"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "BUG"}, "actives": [{"qProfile": "AYmVVaAvqMsO3hqTZpQM", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-07-27T03:12:43+0000", "updatedAt": "2023-07-27T03:12:43+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "pmd:LongInstantiation": {"rule": {"key": "pmd:LongInstantiation", "repo": "pmd", "name": "Java5 migration - Long instantiation", "createdAt": "2023-07-27T03:12:15+0000", "htmlDesc": "In JDK 1.5, calling new Long() causes memory allocation. Long.valueOf() is more memory friendly. Example :\n<pre>\npublic class Foo {\nprivate Long i = new Long(0); // change to Long i =\nLong.valueOf(0);\n}\n  </pre>", "mdDesc": "In JDK 1.5, calling new Long() causes memory allocation. Long.valueOf() is more memory friendly. Example :\n<pre>\npublic class Foo {\nprivate Long i = new Long(0); // change to Long i =\nLong.valueOf(0);\n}\n  </pre>", "severity": "MAJOR", "status": "READY", "internalKey": "category/java/performance.xml/LongInstantiation", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "5min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "5min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "5min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "5min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "squid:S864": {"rule": {"key": "squid:S864", "repo": "squid", "name": "Limited dependence should be placed on operator precedence", "createdAt": "2023-07-27T03:12:21+0000", "htmlDesc": "<p>The rules of operator precedence are complicated and can lead to errors. For this reason, parentheses should be used for clarification in complex\nstatements. However, this does not mean that parentheses should be gratuitously added around every operation. </p>\n<p>This rule raises issues when <code>&amp;&amp;</code> and <code>||</code> are used in combination, when assignment and equality or relational\noperators are used in together in a condition, and for other operator combinations according to the following table:</p>\n<table>\n  <tbody>\n    <tr>\n      <td> </td>\n      <td><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></td>\n      <td><code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code></td>\n      <td><code>&amp;</code></td>\n      <td><code>^</code></td>\n      <td> <code>|</code> </td>\n    </tr>\n    <tr>\n      <td><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></td>\n      <td> </td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n    </tr>\n    <tr>\n      <td><code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code></td>\n      <td>x</td>\n      <td> </td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n    </tr>\n    <tr>\n      <td><code>&amp;</code></td>\n      <td>x</td>\n      <td>x</td>\n      <td> </td>\n      <td>x</td>\n      <td>x</td>\n    </tr>\n    <tr>\n      <td><code>^</code></td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n      <td> </td>\n      <td>x</td>\n    </tr>\n    <tr>\n      <td> <code>|</code> </td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n      <td> </td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\nx = a + b - c;\nx = a + 1 &lt;&lt; b;  // Noncompliant\n\nif ( a &gt; b || c &lt; d || a == d) {...}\nif ( a &gt; b &amp;&amp; c &lt; d || a == b) {...}  // Noncompliant\nif (a = f(b,c) == 1) { ... } // Noncompliant; == evaluated first\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nx = a + b - c;\nx = (a + 1) &lt;&lt; b;\n\nif ( a &gt; b || c &lt; d || a == d) {...}\nif ( (a &gt; b &amp;&amp; c &lt; d) || a == b) {...}\nif ( (a = f(b,c)) == 1) { ... }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 12.1 - Limited dependence should be placed on C's operator precedence rules in expressions </li>\n  <li> MISRA C:2004, 12.2 - The value of an expression shall be the same under any order of evaluation that the standard permits. </li>\n  <li> MISRA C:2004, 12.5 - The operands of a logical &amp;&amp; or || shall be primary-expressions. </li>\n  <li> MISRA C++:2008, 5-0-1 - The value of an expression shall be the same under any order of evaluation that the standard permits. </li>\n  <li> MISRA C++:2008, 5-0-2 - Limited dependence should be placed on C++ operator precedence rules in expressions </li>\n  <li> MISRA C++:2008, 5-2-1 - Each operand of a logical &amp;&amp; or || shall be a postfix-expression. </li>\n  <li> MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/_wI\">CERT, EXP00-C.</a> - Use parentheses for precedence of operation </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/9wHEAw\">CERT, EXP53-J.</a> - Use parentheses for precedence of operation </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/783.html\">MITRE, CWE-783</a> - Operator Precedence Logic Error </li>\n</ul>", "mdDesc": "<p>The rules of operator precedence are complicated and can lead to errors. For this reason, parentheses should be used for clarification in complex\nstatements. However, this does not mean that parentheses should be gratuitously added around every operation. </p>\n<p>This rule raises issues when <code>&amp;&amp;</code> and <code>||</code> are used in combination, when assignment and equality or relational\noperators are used in together in a condition, and for other operator combinations according to the following table:</p>\n<table>\n  <tbody>\n    <tr>\n      <td> </td>\n      <td><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></td>\n      <td><code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code></td>\n      <td><code>&amp;</code></td>\n      <td><code>^</code></td>\n      <td> <code>|</code> </td>\n    </tr>\n    <tr>\n      <td><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></td>\n      <td> </td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n    </tr>\n    <tr>\n      <td><code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code></td>\n      <td>x</td>\n      <td> </td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n    </tr>\n    <tr>\n      <td><code>&amp;</code></td>\n      <td>x</td>\n      <td>x</td>\n      <td> </td>\n      <td>x</td>\n      <td>x</td>\n    </tr>\n    <tr>\n      <td><code>^</code></td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n      <td> </td>\n      <td>x</td>\n    </tr>\n    <tr>\n      <td> <code>|</code> </td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n      <td> </td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\nx = a + b - c;\nx = a + 1 &lt;&lt; b;  // Noncompliant\n\nif ( a &gt; b || c &lt; d || a == d) {...}\nif ( a &gt; b &amp;&amp; c &lt; d || a == b) {...}  // Noncompliant\nif (a = f(b,c) == 1) { ... } // Noncompliant; == evaluated first\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nx = a + b - c;\nx = (a + 1) &lt;&lt; b;\n\nif ( a &gt; b || c &lt; d || a == d) {...}\nif ( (a &gt; b &amp;&amp; c &lt; d) || a == b) {...}\nif ( (a = f(b,c)) == 1) { ... }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 12.1 - Limited dependence should be placed on C's operator precedence rules in expressions </li>\n  <li> MISRA C:2004, 12.2 - The value of an expression shall be the same under any order of evaluation that the standard permits. </li>\n  <li> MISRA C:2004, 12.5 - The operands of a logical &amp;&amp; or || shall be primary-expressions. </li>\n  <li> MISRA C++:2008, 5-0-1 - The value of an expression shall be the same under any order of evaluation that the standard permits. </li>\n  <li> MISRA C++:2008, 5-0-2 - Limited dependence should be placed on C++ operator precedence rules in expressions </li>\n  <li> MISRA C++:2008, 5-2-1 - Each operand of a logical &amp;&amp; or || shall be a postfix-expression. </li>\n  <li> MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/_wI\">CERT, EXP00-C.</a> - Use parentheses for precedence of operation </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/9wHEAw\">CERT, EXP53-J.</a> - Use parentheses for precedence of operation </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/783.html\">MITRE, CWE-783</a> - Operator Precedence Logic Error </li>\n</ul>", "severity": "MAJOR", "status": "READY", "isTemplate": false, "tags": [], "sysTags": ["cert", "cwe", "misra"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MINOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-09-13T08:51:54+0000"}]}, "squid:HiddenFieldCheck": {"rule": {"key": "squid:HiddenFieldCheck", "repo": "squid", "name": "Local variables should not shadow class fields", "createdAt": "2023-07-27T03:12:20+0000", "htmlDesc": "<p>Shadowing fields with a local variable is a bad practice that reduces code readability: it makes it confusing to know whether the field or the\nvariable is being used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  public int myField;\n\n  public void doSomething() {\n    int myField = 0;\n    ...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/2ADEAw\">CERT, DCL51-J.</a> - Do not shadow or obscure identifiers in subscopes </li>\n</ul>", "mdDesc": "<p>Shadowing fields with a local variable is a bad practice that reduces code readability: it makes it confusing to know whether the field or the\nvariable is being used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  public int myField;\n\n  public void doSomething() {\n    int myField = 0;\n    ...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/2ADEAw\">CERT, DCL51-J.</a> - Do not shadow or obscure identifiers in subscopes </li>\n</ul>", "severity": "MAJOR", "status": "READY", "internalKey": "S1117", "isTemplate": false, "tags": [], "sysTags": ["cert", "pitfall"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "5min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "5min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "5min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "5min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYmVVaAvqMsO3hqTZpQM", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-07-27T03:12:43+0000", "updatedAt": "2023-07-27T03:12:43+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "squid:S1751": {"rule": {"key": "squid:S1751", "repo": "squid", "name": "Loops with at most one iteration should be refactored", "createdAt": "2023-07-27T03:12:21+0000", "htmlDesc": "<p>A loop with at most one iteration is equivalent to the use of an <code>if</code> statement to conditionally execute one piece of code. No developer\nexpects to find such a use of a loop statement. If the initial intention of the author was really to conditionally execute one piece of code, an\n<code>if</code> statement should be used instead.</p>\n<p>At worst that was not the initial intention of the author and so the body of the loop should be fixed to use the nested <code>return</code>,\n<code>break</code> or <code>throw</code> statements in a more appropriate way.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 0; i &lt; 10; i++) { // noncompliant, loop only executes once\n  printf(\"i is %d\", i);\n  break;\n}\n...\nfor (int i = 0; i &lt; 10; i++) { // noncompliant, loop only executes once\n  if(i == x) {\n    break;\n  } else {\n    printf(\"i is %d\", i);\n    return;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (int i = 0; i &lt; 10; i++) {\n  printf(\"i is %d\", i);\n}\n...\nfor (int i = 0; i &lt; 10; i++) {\n  if(i == x) {\n    break;\n  } else {\n    printf(\"i is %d\", i);\n  }\n}\n</pre>", "mdDesc": "<p>A loop with at most one iteration is equivalent to the use of an <code>if</code> statement to conditionally execute one piece of code. No developer\nexpects to find such a use of a loop statement. If the initial intention of the author was really to conditionally execute one piece of code, an\n<code>if</code> statement should be used instead.</p>\n<p>At worst that was not the initial intention of the author and so the body of the loop should be fixed to use the nested <code>return</code>,\n<code>break</code> or <code>throw</code> statements in a more appropriate way.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 0; i &lt; 10; i++) { // noncompliant, loop only executes once\n  printf(\"i is %d\", i);\n  break;\n}\n...\nfor (int i = 0; i &lt; 10; i++) { // noncompliant, loop only executes once\n  if(i == x) {\n    break;\n  } else {\n    printf(\"i is %d\", i);\n    return;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (int i = 0; i &lt; 10; i++) {\n  printf(\"i is %d\", i);\n}\n...\nfor (int i = 0; i &lt; 10; i++) {\n  if(i == x) {\n    break;\n  } else {\n    printf(\"i is %d\", i);\n  }\n}\n</pre>", "severity": "MAJOR", "status": "READY", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "5min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "5min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "5min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "5min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "BUG"}, "actives": [{"qProfile": "AYmVVaAvqMsO3hqTZpQM", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-07-27T03:12:43+0000", "updatedAt": "2023-07-27T03:12:43+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "squid:S109": {"rule": {"key": "squid:S109", "repo": "squid", "name": "Magic numbers should not be used", "createdAt": "2023-07-27T03:12:20+0000", "htmlDesc": "<p>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the\nnumber of iterations of a loops, to test the value of a property, etc.</p>\n<p>Using magic numbers may seem obvious and straightforward when you're writing a piece of code, but they are much less obvious and straightforward at\ndebugging time.</p>\n<p>That is why magic numbers must be demystified by first being assigned to clearly named variables before being used.</p>\n<p>-1, 0 and 1 are not considered magic numbers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void doSomething() {\n\tfor(int i = 0; i &lt; 4; i++){                 // Noncompliant, 4 is a magic number\n\t\t...\n\t}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static final int NUMBER_OF_CYCLES = 4;\npublic static void doSomething() {\n  for(int i = 0; i &lt; NUMBER_OF_CYCLES ; i++){\n    ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores <code>hashCode</code> methods.</p>", "mdDesc": "<p>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the\nnumber of iterations of a loops, to test the value of a property, etc.</p>\n<p>Using magic numbers may seem obvious and straightforward when you're writing a piece of code, but they are much less obvious and straightforward at\ndebugging time.</p>\n<p>That is why magic numbers must be demystified by first being assigned to clearly named variables before being used.</p>\n<p>-1, 0 and 1 are not considered magic numbers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void doSomething() {\n\tfor(int i = 0; i &lt; 4; i++){                 // Noncompliant, 4 is a magic number\n\t\t...\n\t}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static final int NUMBER_OF_CYCLES = 4;\npublic static void doSomething() {\n  for(int i = 0; i &lt; NUMBER_OF_CYCLES ; i++){\n    ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores <code>hashCode</code> methods.</p>", "severity": "MAJOR", "status": "READY", "isTemplate": false, "tags": [], "sysTags": ["brain-overload"], "lang": "java", "langName": "Java", "params": [{"key": "Authorized numbers", "htmlDesc": "Comma separated list of authorized numbers. Example: -1,0,1,2", "defaultValue": "-1,0,1", "type": "STRING"}], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "5min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "5min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "5min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "5min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MINOR", "params": [{"key": "Authorized numbers", "value": "-1,0,1"}], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "squid:S2229": {"rule": {"key": "squid:S2229", "repo": "squid", "name": "Methods should not call same-class methods with incompatible \"@Transactional\" values", "createdAt": "2023-07-27T03:12:21+0000", "htmlDesc": "<p>When using Spring proxies, calling a method in the same class (e.g. <code>this.aMethod()</code>) with an incompatible <code>@Transactional</code>\nrequirement will result in runtime exceptions because Spring only \"sees\" the caller and makes no provisions for properly invoking the callee. </p>\n<p>Therefore, certain calls should never be made within the same class:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>From</th>\n      <th>To</th>\n    </tr>\n    <tr>\n      <td> non-<code>@Transactional</code> </td>\n      <td> MANDATORY, NESTED, REQUIRED, REQUIRES_NEW </td>\n    </tr>\n    <tr>\n      <td> MANDATORY </td>\n      <td> NESTED, NEVER, NOT_SUPPORTED, REQUIRES_NEW </td>\n    </tr>\n    <tr>\n      <td> NESTED </td>\n      <td> NESTED, NEVER, NOT_SUPPORTED, REQUIRES_NEW </td>\n    </tr>\n    <tr>\n      <td> NEVER </td>\n      <td> MANDATORY, NESTED, REQUIRED, REQUIRES_NEW </td>\n    </tr>\n    <tr>\n      <td> NOT_SUPPORTED </td>\n      <td> MANDATORY, NESTED, REQUIRED, REQUIRES_NEW </td>\n    </tr>\n    <tr>\n      <td> REQUIRED or <code>@Transactional</code> </td>\n      <td> NESTED, NEVER, NOT_SUPPORTED, REQUIRES_NEW </td>\n    </tr>\n    <tr>\n      <td> REQUIRES_NEW </td>\n      <td> NESTED, NEVER, NOT_SUPPORTED, REQUIRES_NEW </td>\n    </tr>\n    <tr>\n      <td> SUPPORTS </td>\n      <td> MANDATORY, NESTED, NEVER, NOT_SUPPORTED, REQUIRED, REQUIRES_NEW </td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\n\n@Override\npublic void doTheThing() {\n  // ...\n  actuallyDoTheThing();  // Noncompliant\n}\n\n@Override\n@Transactional\npublic void actuallyDoTheThing() {\n  // ...\n}\n</pre>", "mdDesc": "<p>When using Spring proxies, calling a method in the same class (e.g. <code>this.aMethod()</code>) with an incompatible <code>@Transactional</code>\nrequirement will result in runtime exceptions because Spring only \"sees\" the caller and makes no provisions for properly invoking the callee. </p>\n<p>Therefore, certain calls should never be made within the same class:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>From</th>\n      <th>To</th>\n    </tr>\n    <tr>\n      <td> non-<code>@Transactional</code> </td>\n      <td> MANDATORY, NESTED, REQUIRED, REQUIRES_NEW </td>\n    </tr>\n    <tr>\n      <td> MANDATORY </td>\n      <td> NESTED, NEVER, NOT_SUPPORTED, REQUIRES_NEW </td>\n    </tr>\n    <tr>\n      <td> NESTED </td>\n      <td> NESTED, NEVER, NOT_SUPPORTED, REQUIRES_NEW </td>\n    </tr>\n    <tr>\n      <td> NEVER </td>\n      <td> MANDATORY, NESTED, REQUIRED, REQUIRES_NEW </td>\n    </tr>\n    <tr>\n      <td> NOT_SUPPORTED </td>\n      <td> MANDATORY, NESTED, REQUIRED, REQUIRES_NEW </td>\n    </tr>\n    <tr>\n      <td> REQUIRED or <code>@Transactional</code> </td>\n      <td> NESTED, NEVER, NOT_SUPPORTED, REQUIRES_NEW </td>\n    </tr>\n    <tr>\n      <td> REQUIRES_NEW </td>\n      <td> NESTED, NEVER, NOT_SUPPORTED, REQUIRES_NEW </td>\n    </tr>\n    <tr>\n      <td> SUPPORTS </td>\n      <td> MANDATORY, NESTED, NEVER, NOT_SUPPORTED, REQUIRED, REQUIRES_NEW </td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\n\n@Override\npublic void doTheThing() {\n  // ...\n  actuallyDoTheThing();  // Noncompliant\n}\n\n@Override\n@Transactional\npublic void actuallyDoTheThing() {\n  // ...\n}\n</pre>", "severity": "BLOCKER", "status": "READY", "isTemplate": false, "tags": [], "sysTags": ["spring"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "20min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "20min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "20min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "20min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "BUG"}, "actives": [{"qProfile": "AYmVVaAvqMsO3hqTZpQM", "inherit": "NONE", "severity": "BLOCKER", "params": [], "createdAt": "2023-07-27T03:12:43+0000", "updatedAt": "2023-07-27T03:12:43+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "BLOCKER", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.MissingSwitchDefaultCheck": {"rule": {"key": "checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.MissingSwitchDefaultCheck", "repo": "checkstyle", "name": "Missing Switch Default", "createdAt": "2023-07-27T03:12:18+0000", "htmlDesc": "Checks that switch statement has default clause.\n\n<p>\n</p>", "mdDesc": "Checks that switch statement has default clause.\n\n<p>\n</p>", "severity": "MAJOR", "status": "READY", "internalKey": "Checker/TreeWalker/MissingSwitchDefault", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "30min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "30min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "30min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "30min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "squid:S2681": {"rule": {"key": "squid:S2681", "repo": "squid", "name": "Multiline blocks should be enclosed in curly braces", "createdAt": "2023-07-27T03:12:21+0000", "htmlDesc": "<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be\nmisleading and induce bugs. </p>\n<p>This rule raises an issue when the whitespacing of the lines after a one line block indicates an intent to include those lines in the block, but\nthe omission of curly braces means the lines will be unconditionally executed once.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)\n  firstActionInBlock();\n  secondAction();  // Noncompliant; executed unconditionally\nthirdAction();\n\nif (condition) firstActionInBlock(); secondAction();  // Noncompliant; secondAction executed unconditionally\n\nif (condition) firstActionInBlock();  // Noncompliant\n  secondAction();  // Executed unconditionally\n\nif (condition); secondAction();  // Noncompliant; secondAction executed unconditionally\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++)\n  str = array[i];\n  doTheThing(str);  // Noncompliant; executed only on last array element\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  firstActionInBlock();\n  secondAction();\n}\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++) {\n  str = array[i];\n  doTheThing(str);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/483.html\">MITRE, CWE-483</a> - Incorrect Block Delimitation </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>", "mdDesc": "<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be\nmisleading and induce bugs. </p>\n<p>This rule raises an issue when the whitespacing of the lines after a one line block indicates an intent to include those lines in the block, but\nthe omission of curly braces means the lines will be unconditionally executed once.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)\n  firstActionInBlock();\n  secondAction();  // Noncompliant; executed unconditionally\nthirdAction();\n\nif (condition) firstActionInBlock(); secondAction();  // Noncompliant; secondAction executed unconditionally\n\nif (condition) firstActionInBlock();  // Noncompliant\n  secondAction();  // Executed unconditionally\n\nif (condition); secondAction();  // Noncompliant; secondAction executed unconditionally\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++)\n  str = array[i];\n  doTheThing(str);  // Noncompliant; executed only on last array element\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  firstActionInBlock();\n  secondAction();\n}\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++) {\n  str = array[i];\n  doTheThing(str);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/483.html\">MITRE, CWE-483</a> - Incorrect Block Delimitation </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>", "severity": "MAJOR", "status": "READY", "isTemplate": false, "tags": [], "sysTags": ["cert", "cwe"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "5min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "5min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "5min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "5min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYmVVaAvqMsO3hqTZpQM", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-07-27T03:12:43+0000", "updatedAt": "2023-07-27T03:12:43+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "squid:S00108": {"rule": {"key": "squid:S00108", "repo": "squid", "name": "Nested blocks of code should not be left empty", "createdAt": "2023-07-27T03:12:21+0000", "htmlDesc": "<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 0; i &lt; 42; i++){}  // Empty on purpose or missing piece of code ?\n</pre>\n<h2>Exceptions</h2>\n<p>When a block contains a comment, this block is not considered to be empty unless it is a <code>synchronized</code> block. <code>synchronized</code>\nblocks are still considered empty even with comments because they can still affect program flow.</p>", "mdDesc": "<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 0; i &lt; 42; i++){}  // Empty on purpose or missing piece of code ?\n</pre>\n<h2>Exceptions</h2>\n<p>When a block contains a comment, this block is not considered to be empty unless it is a <code>synchronized</code> block. <code>synchronized</code>\nblocks are still considered empty even with comments because they can still affect program flow.</p>", "severity": "MAJOR", "status": "READY", "internalKey": "S108", "isTemplate": false, "tags": [], "sysTags": ["suspicious"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "5min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "5min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "5min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "5min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYmVVaAvqMsO3hqTZpQM", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-07-27T03:12:43+0000", "updatedAt": "2023-07-27T03:12:43+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "squid:S2230": {"rule": {"key": "squid:S2230", "repo": "squid", "name": "Non-public methods should not be \"@Transactional\"", "createdAt": "2023-07-27T03:12:21+0000", "htmlDesc": "<p>Marking a non-public method <code>@Transactional</code> is both useless and misleading because Spring doesn't \"see\" non-<code>public</code>\nmethods, and so makes no provision for their proper invocation. Nor does Spring make provision for the methods invoked by the method it called.</p>\n<p>Therefore marking a <code>private</code> method, for instance, <code>@Transactional</code> can only result in a runtime error or exception if the\nmethod is actually written to be <code>@Transactional</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Transactional  // Noncompliant\nprivate void doTheThing(ArgClass arg) {\n  // ...\n}\n</pre>", "mdDesc": "<p>Marking a non-public method <code>@Transactional</code> is both useless and misleading because Spring doesn't \"see\" non-<code>public</code>\nmethods, and so makes no provision for their proper invocation. Nor does Spring make provision for the methods invoked by the method it called.</p>\n<p>Therefore marking a <code>private</code> method, for instance, <code>@Transactional</code> can only result in a runtime error or exception if the\nmethod is actually written to be <code>@Transactional</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Transactional  // Noncompliant\nprivate void doTheThing(ArgClass arg) {\n  // ...\n}\n</pre>", "severity": "MAJOR", "status": "READY", "isTemplate": false, "tags": [], "sysTags": ["spring"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "20min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "20min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "20min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "20min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "BUG"}, "actives": [{"qProfile": "AYmVVaAvqMsO3hqTZpQM", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-07-27T03:12:43+0000", "updatedAt": "2023-07-27T03:12:43+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "squid:S2885": {"rule": {"key": "squid:S2885", "repo": "squid", "name": "Non-thread-safe fields should not be static", "createdAt": "2023-07-27T03:12:20+0000", "htmlDesc": "<p>Not all classes in the standard Java library were written to be thread-safe. Using them in a multi-threaded manner is highly likely to cause data\nproblems or exceptions at runtime.</p>\n<p>This rule raises an issue when an instance of <code>Calendar</code>, <code>DateFormat</code>, <code>javax.xml.xpath.XPath</code>, or\n<code>javax.xml.validation.SchemaFactory</code> is marked <code>static</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  private static SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");  // Noncompliant\n  private static Calendar calendar = Calendar.getInstance();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  private SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");\n  private Calendar calendar = Calendar.getInstance();\n</pre>", "mdDesc": "<p>Not all classes in the standard Java library were written to be thread-safe. Using them in a multi-threaded manner is highly likely to cause data\nproblems or exceptions at runtime.</p>\n<p>This rule raises an issue when an instance of <code>Calendar</code>, <code>DateFormat</code>, <code>javax.xml.xpath.XPath</code>, or\n<code>javax.xml.validation.SchemaFactory</code> is marked <code>static</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  private static SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");  // Noncompliant\n  private static Calendar calendar = Calendar.getInstance();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  private SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");\n  private Calendar calendar = Calendar.getInstance();\n</pre>", "severity": "MAJOR", "status": "READY", "isTemplate": false, "tags": [], "sysTags": ["multi-threading"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "15min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "15min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "15min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "15min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "BUG"}, "actives": [{"qProfile": "AYmVVaAvqMsO3hqTZpQM", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-07-27T03:12:43+0000", "updatedAt": "2023-07-27T03:12:43+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "squid:S2259": {"rule": {"key": "squid:S2259", "repo": "squid", "name": "Null pointers should not be dereferenced", "createdAt": "2023-07-27T03:12:21+0000", "htmlDesc": "<p>A reference to <code>null</code> should never be dereferenced/accessed. Doing so will cause a <code>NullPointerException</code> to be thrown. At\nbest, such an exception will cause abrupt program termination. At worst, it could expose debugging information that would be useful to an attacker, or\nit could allow an attacker to bypass security measures.</p>\n<p>Note that when they are present, this rule takes advantage of <code>@CheckForNull</code> and <code>@Nonnull</code> annotations defined in <a\nhref=\"https://jcp.org/en/jsr/detail?id=305\">JSR-305</a> to understand which values are and are not nullable except when <code>@Nonnull</code> is used\non the parameter to <code>equals</code>, which by contract should always work with null.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@CheckForNull\nString getName(){...}\n\npublic boolean isNameEmpty() {\n  return getName().length() == 0; // Noncompliant; the result of getName() could be null, but isn't null-checked\n}\n</pre>\n<pre>\nConnection conn = null;\nStatement stmt = null;\ntry{\n  conn = DriverManager.getConnection(DB_URL,USER,PASS);\n  stmt = conn.createStatement();\n  // ...\n\n}catch(Exception e){\n  e.printStackTrace();\n}finally{\n  stmt.close();   // Noncompliant; stmt could be null if an exception was thrown in the try{} block\n  conn.close();  // Noncompliant; conn could be null if an exception was thrown\n}\n</pre>\n<pre>\nprivate void merge(@Nonnull Color firstColor, @Nonnull Color secondColor){...}\n\npublic  void append(@CheckForNull Color color) {\n    merge(currentColor, color);  // Noncompliant; color should be null-checked because merge(...) doesn't accept nullable parameters\n}\n</pre>\n<pre>\nvoid paint(Color color) {\n  if(color == null) {\n    System.out.println(\"Unable to apply color \" + color.toString());  // Noncompliant; NullPointerException will be thrown\n    return;\n  }\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/476.html\">MITRE, CWE-476</a> - NULL Pointer Dereference </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/PAw\">CERT, EXP34-C.</a> - Do not dereference null pointers </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZwDOAQ\">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required\n  </li>\n</ul>", "mdDesc": "<p>A reference to <code>null</code> should never be dereferenced/accessed. Doing so will cause a <code>NullPointerException</code> to be thrown. At\nbest, such an exception will cause abrupt program termination. At worst, it could expose debugging information that would be useful to an attacker, or\nit could allow an attacker to bypass security measures.</p>\n<p>Note that when they are present, this rule takes advantage of <code>@CheckForNull</code> and <code>@Nonnull</code> annotations defined in <a\nhref=\"https://jcp.org/en/jsr/detail?id=305\">JSR-305</a> to understand which values are and are not nullable except when <code>@Nonnull</code> is used\non the parameter to <code>equals</code>, which by contract should always work with null.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@CheckForNull\nString getName(){...}\n\npublic boolean isNameEmpty() {\n  return getName().length() == 0; // Noncompliant; the result of getName() could be null, but isn't null-checked\n}\n</pre>\n<pre>\nConnection conn = null;\nStatement stmt = null;\ntry{\n  conn = DriverManager.getConnection(DB_URL,USER,PASS);\n  stmt = conn.createStatement();\n  // ...\n\n}catch(Exception e){\n  e.printStackTrace();\n}finally{\n  stmt.close();   // Noncompliant; stmt could be null if an exception was thrown in the try{} block\n  conn.close();  // Noncompliant; conn could be null if an exception was thrown\n}\n</pre>\n<pre>\nprivate void merge(@Nonnull Color firstColor, @Nonnull Color secondColor){...}\n\npublic  void append(@CheckForNull Color color) {\n    merge(currentColor, color);  // Noncompliant; color should be null-checked because merge(...) doesn't accept nullable parameters\n}\n</pre>\n<pre>\nvoid paint(Color color) {\n  if(color == null) {\n    System.out.println(\"Unable to apply color \" + color.toString());  // Noncompliant; NullPointerException will be thrown\n    return;\n  }\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/476.html\">MITRE, CWE-476</a> - NULL Pointer Dereference </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/PAw\">CERT, EXP34-C.</a> - Do not dereference null pointers </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZwDOAQ\">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required\n  </li>\n</ul>", "severity": "MAJOR", "status": "READY", "isTemplate": false, "tags": [], "sysTags": ["cert", "cwe"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "10min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "10min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "10min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "10min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "BUG"}, "actives": [{"qProfile": "AYmVVaAvqMsO3hqTZpQM", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-07-27T03:12:43+0000", "updatedAt": "2023-07-27T03:12:43+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-09-22T09:25:52+0000"}]}, "squid:S2447": {"rule": {"key": "squid:S2447", "repo": "squid", "name": "Null should not be returned from a \"Boolean\" method", "createdAt": "2023-07-27T03:12:21+0000", "htmlDesc": "<p>While <code>null</code> is technically a valid <code>Boolean</code> value, that fact, and the distinction between <code>Boolean</code> and\n<code>boolean</code> is easy to forget. So returning <code>null</code> from a <code>Boolean</code> method is likely to cause problems with callers'\ncode.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic Boolean isUsable() {\n  // ...\n  return null;  // Noncompliant\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/476.html\">MITRE CWE-476</a> - NULL Pointer Dereference </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZwDOAQ\">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required\n  </li>\n</ul>", "mdDesc": "<p>While <code>null</code> is technically a valid <code>Boolean</code> value, that fact, and the distinction between <code>Boolean</code> and\n<code>boolean</code> is easy to forget. So returning <code>null</code> from a <code>Boolean</code> method is likely to cause problems with callers'\ncode.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic Boolean isUsable() {\n  // ...\n  return null;  // Noncompliant\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/476.html\">MITRE CWE-476</a> - NULL Pointer Dereference </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZwDOAQ\">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required\n  </li>\n</ul>", "severity": "CRITICAL", "status": "READY", "isTemplate": false, "tags": [], "sysTags": ["cert", "cwe", "pitfall"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "20min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "20min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "20min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "20min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYmVVaAvqMsO3hqTZpQM", "inherit": "NONE", "severity": "CRITICAL", "params": [], "createdAt": "2023-07-27T03:12:43+0000", "updatedAt": "2023-07-27T03:12:43+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "CRITICAL", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "squid:S3457": {"rule": {"key": "squid:S3457", "repo": "squid", "name": "Printf-style format strings should be used correctly", "createdAt": "2023-07-27T03:12:21+0000", "htmlDesc": "<p>Because <code>printf</code>-style format strings are interpreted at runtime, rather than validated by the compiler, they can contain errors that\nresult in the wrong strings being created. This rule statically validates the correlation of <code>printf</code>-style format strings to their\narguments when calling the <code>format(...)</code> methods of <code>java.util.Formatter</code>, <code>java.lang.String</code>,\n<code>java.io.PrintStream</code>, <code>MessageFormat</code>, and <code>java.io.PrintWriter</code> classes and the <code>printf(...)</code> methods of\n<code>java.io.PrintStream</code> or <code>java.io.PrintWriter</code> classes. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString.format(\"First {0} and then {1}\", \"foo\", \"bar\");  //Noncompliant. Looks like there is a confusion with the use of {{java.text.MessageFormat}}, parameters \"foo\" and \"bar\" will be simply ignored here\nString.format(\"Display %3$d and then %d\", 1, 2, 3);   //Noncompliant; the second argument '2' is unused\nString.format(\"Too many arguments %d and %d\", 1, 2, 3);  //Noncompliant; the third argument '3' is unused\nString.format(\"First Line\\n\");   //Noncompliant; %n should be used in place of \\n to produce the platform-specific line separator\nString.format(\"Is myObject null ? %b\", myObject);   //Noncompliant; when a non-boolean argument is formatted with %b, it prints true for any nonnull value, and false for null. Even if intended, this is misleading. It's better to directly inject the boolean value (myObject == null in this case)\nString.format(\"value is \" + value); // Noncompliant\nString s = String.format(\"string without arguments\"); // Noncompliant\n\nMessageFormat.format(\"Result '{0}'.\", value); // Noncompliant; String contains no format specifiers. (quote are discarding format specifiers)\nMessageFormat.format(\"Result {0}.\", value, value);  // Noncompliant; 2nd argument is not used\nMessageFormat.format(\"Result {0}.\", myObject.toString()); // Noncompliant; no need to call toString() on objects\n\njava.util.Logger logger;\nlogger.log(java.util.logging.Level.SEVERE, \"Result {0}.\", myObject.toString()); // Noncompliant; no need to call toString() on objects\nlogger.log(java.util.logging.Level.SEVERE, \"Result.\", new Exception()); // compliant, parameter is an exception\nlogger.log(java.util.logging.Level.SEVERE, \"Result '{0}'\", 14); // Noncompliant {{String contains no format specifiers.}}\n\norg.slf4j.Logger slf4jLog;\norg.slf4j.Marker marker;\n\nslf4jLog.debug(marker, \"message {}\");\nslf4jLog.debug(marker, \"message \", 1); // Noncompliant {{String contains no format specifiers.}}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString.format(\"First %s and then %s\", \"foo\", \"bar\");\nString.format(\"Display %2$d and then %d\", 1, 3);\nString.format(\"Too many arguments %d %d\", 1, 2);\nString.format(\"First Line%n\");\nString.format(\"Is myObject null ? %b\", myObject == null);\nString.format(\"value is %d\", value);\nString s = \"string without arguments\";\n\nMessageFormat.format(\"Result {0}.\", value);\nMessageFormat.format(\"Result '{0}'  =  {0}\", value);\nMessageFormat.format(\"Result {0}.\", myObject);\n\njava.util.Logger logger;\nlogger.log(java.util.logging.Level.SEVERE, \"Result {0}.\", myObject);\nlogger.log(java.util.logging.Level.SEVERE, \"Result {0}'\", 14);\n\n\norg.slf4j.Logger slf4jLog;\norg.slf4j.Marker marker;\n\nslf4jLog.debug(marker, \"message {}\");\nslf4jLog.debug(marker, \"message {}\", 1);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/wQA1\">CERT, FIO47-C.</a> - Use valid format strings </li>\n</ul>", "mdDesc": "<p>Because <code>printf</code>-style format strings are interpreted at runtime, rather than validated by the compiler, they can contain errors that\nresult in the wrong strings being created. This rule statically validates the correlation of <code>printf</code>-style format strings to their\narguments when calling the <code>format(...)</code> methods of <code>java.util.Formatter</code>, <code>java.lang.String</code>,\n<code>java.io.PrintStream</code>, <code>MessageFormat</code>, and <code>java.io.PrintWriter</code> classes and the <code>printf(...)</code> methods of\n<code>java.io.PrintStream</code> or <code>java.io.PrintWriter</code> classes. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString.format(\"First {0} and then {1}\", \"foo\", \"bar\");  //Noncompliant. Looks like there is a confusion with the use of {{java.text.MessageFormat}}, parameters \"foo\" and \"bar\" will be simply ignored here\nString.format(\"Display %3$d and then %d\", 1, 2, 3);   //Noncompliant; the second argument '2' is unused\nString.format(\"Too many arguments %d and %d\", 1, 2, 3);  //Noncompliant; the third argument '3' is unused\nString.format(\"First Line\\n\");   //Noncompliant; %n should be used in place of \\n to produce the platform-specific line separator\nString.format(\"Is myObject null ? %b\", myObject);   //Noncompliant; when a non-boolean argument is formatted with %b, it prints true for any nonnull value, and false for null. Even if intended, this is misleading. It's better to directly inject the boolean value (myObject == null in this case)\nString.format(\"value is \" + value); // Noncompliant\nString s = String.format(\"string without arguments\"); // Noncompliant\n\nMessageFormat.format(\"Result '{0}'.\", value); // Noncompliant; String contains no format specifiers. (quote are discarding format specifiers)\nMessageFormat.format(\"Result {0}.\", value, value);  // Noncompliant; 2nd argument is not used\nMessageFormat.format(\"Result {0}.\", myObject.toString()); // Noncompliant; no need to call toString() on objects\n\njava.util.Logger logger;\nlogger.log(java.util.logging.Level.SEVERE, \"Result {0}.\", myObject.toString()); // Noncompliant; no need to call toString() on objects\nlogger.log(java.util.logging.Level.SEVERE, \"Result.\", new Exception()); // compliant, parameter is an exception\nlogger.log(java.util.logging.Level.SEVERE, \"Result '{0}'\", 14); // Noncompliant {{String contains no format specifiers.}}\n\norg.slf4j.Logger slf4jLog;\norg.slf4j.Marker marker;\n\nslf4jLog.debug(marker, \"message {}\");\nslf4jLog.debug(marker, \"message \", 1); // Noncompliant {{String contains no format specifiers.}}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString.format(\"First %s and then %s\", \"foo\", \"bar\");\nString.format(\"Display %2$d and then %d\", 1, 3);\nString.format(\"Too many arguments %d %d\", 1, 2);\nString.format(\"First Line%n\");\nString.format(\"Is myObject null ? %b\", myObject == null);\nString.format(\"value is %d\", value);\nString s = \"string without arguments\";\n\nMessageFormat.format(\"Result {0}.\", value);\nMessageFormat.format(\"Result '{0}'  =  {0}\", value);\nMessageFormat.format(\"Result {0}.\", myObject);\n\njava.util.Logger logger;\nlogger.log(java.util.logging.Level.SEVERE, \"Result {0}.\", myObject);\nlogger.log(java.util.logging.Level.SEVERE, \"Result {0}'\", 14);\n\n\norg.slf4j.Logger slf4jLog;\norg.slf4j.Marker marker;\n\nslf4jLog.debug(marker, \"message {}\");\nslf4jLog.debug(marker, \"message {}\", 1);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/wQA1\">CERT, FIO47-C.</a> - Use valid format strings </li>\n</ul>", "severity": "MAJOR", "status": "READY", "isTemplate": false, "tags": [], "sysTags": ["cert", "confusing"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "10min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "10min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "10min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "10min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYmVVaAvqMsO3hqTZpQM", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-07-27T03:12:43+0000", "updatedAt": "2023-07-27T03:12:43+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "squid:S2275": {"rule": {"key": "squid:S2275", "repo": "squid", "name": "Printf-style format strings should not lead to unexpected behavior at runtime", "createdAt": "2023-07-27T03:12:21+0000", "htmlDesc": "<p>Because <code>printf</code>-style format strings are interpreted at runtime, rather than validated by the Java compiler, they can contain errors\nthat lead to unexpected behavior or runtime errors. This rule statically validates the good behavior of <code>printf</code>-style formats when calling\nthe <code>format(...)</code> methods of <code>java.util.Formatter</code>, <code>java.lang.String</code>, <code>java.io.PrintStream</code>,\n<code>MessageFormat</code>, and <code>java.io.PrintWriter</code> classes and the <code>printf(...)</code> methods of <code>java.io.PrintStream</code>\nor <code>java.io.PrintWriter</code> classes. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString.format(\"The value of my integer is %d\", \"Hello World\");  // Noncompliant; an 'int' is expected rather than a String\nString.format(\"Duke's Birthday year is %tX\", c);  //Noncompliant; X is not a supported time conversion character\nString.format(\"Display %0$d and then %d\", 1);   //Noncompliant; arguments are numbered starting from 1\nString.format(\"Not enough arguments %d and %d\", 1);  //Noncompliant; the second argument is missing\nString.format(\"%&lt; is equals to %d\", 2);   //Noncompliant; the argument index '&lt;' refers to the previous format specifier but there isn't one\n\nMessageFormat.format(\"Result {1}.\", value); // Noncompliant; Not enough arguments. (first element is {0})\nMessageFormat.format(\"Result {{0}.\", value); // Noncompliant; Unbalanced number of curly brace (single curly braces should be escaped)\nMessageFormat.format(\"Result ' {0}\", value); // Noncompliant; Unbalanced number of quotes (single quote must be escaped)\n\njava.util.logging.Logger logger;\nlogger.log(java.util.logging.Level.SEVERE, \"Result {1}!\", 14); // Noncompliant {{Not enough arguments.}}\n\norg.slf4j.Logger slf4jLog;\norg.slf4j.Marker marker;\n\nslf4jLog.debug(marker, \"message {}\"); // Noncompliant {{Not enough arguments.}}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString.format(\"The value of my integer is %d\", 3);\nString.format(\"Duke's Birthday year is %tY\", c);\nString.format(\"Display %1$d and then %d\", 1);\nString.format(\"Not enough arguments %d and %d\", 1, 2);\nString.format(\"%d is equals to %&lt;\", 2);\n\nMessageFormat.format(\"Result {0}.\", value);\nMessageFormat.format(\"Result {0} &amp; {1}.\", value, value);\nMessageFormat.format(\"Result {0}.\", myObject);\n\njava.util.logging.Logger logger;\nlogger.log(java.util.logging.Level.SEVERE, \"Result {1}!\", 14, 2); // Noncompliant {{Not enough arguments.}}\n\norg.slf4j.Logger slf4jLog;\norg.slf4j.Marker marker;\n\nslf4jLog.debug(marker, \"message {}\", 1);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/wQA1\">CERT, FIO47-C.</a> - Use valid format strings </li>\n</ul>", "mdDesc": "<p>Because <code>printf</code>-style format strings are interpreted at runtime, rather than validated by the Java compiler, they can contain errors\nthat lead to unexpected behavior or runtime errors. This rule statically validates the good behavior of <code>printf</code>-style formats when calling\nthe <code>format(...)</code> methods of <code>java.util.Formatter</code>, <code>java.lang.String</code>, <code>java.io.PrintStream</code>,\n<code>MessageFormat</code>, and <code>java.io.PrintWriter</code> classes and the <code>printf(...)</code> methods of <code>java.io.PrintStream</code>\nor <code>java.io.PrintWriter</code> classes. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString.format(\"The value of my integer is %d\", \"Hello World\");  // Noncompliant; an 'int' is expected rather than a String\nString.format(\"Duke's Birthday year is %tX\", c);  //Noncompliant; X is not a supported time conversion character\nString.format(\"Display %0$d and then %d\", 1);   //Noncompliant; arguments are numbered starting from 1\nString.format(\"Not enough arguments %d and %d\", 1);  //Noncompliant; the second argument is missing\nString.format(\"%&lt; is equals to %d\", 2);   //Noncompliant; the argument index '&lt;' refers to the previous format specifier but there isn't one\n\nMessageFormat.format(\"Result {1}.\", value); // Noncompliant; Not enough arguments. (first element is {0})\nMessageFormat.format(\"Result {{0}.\", value); // Noncompliant; Unbalanced number of curly brace (single curly braces should be escaped)\nMessageFormat.format(\"Result ' {0}\", value); // Noncompliant; Unbalanced number of quotes (single quote must be escaped)\n\njava.util.logging.Logger logger;\nlogger.log(java.util.logging.Level.SEVERE, \"Result {1}!\", 14); // Noncompliant {{Not enough arguments.}}\n\norg.slf4j.Logger slf4jLog;\norg.slf4j.Marker marker;\n\nslf4jLog.debug(marker, \"message {}\"); // Noncompliant {{Not enough arguments.}}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString.format(\"The value of my integer is %d\", 3);\nString.format(\"Duke's Birthday year is %tY\", c);\nString.format(\"Display %1$d and then %d\", 1);\nString.format(\"Not enough arguments %d and %d\", 1, 2);\nString.format(\"%d is equals to %&lt;\", 2);\n\nMessageFormat.format(\"Result {0}.\", value);\nMessageFormat.format(\"Result {0} &amp; {1}.\", value, value);\nMessageFormat.format(\"Result {0}.\", myObject);\n\njava.util.logging.Logger logger;\nlogger.log(java.util.logging.Level.SEVERE, \"Result {1}!\", 14, 2); // Noncompliant {{Not enough arguments.}}\n\norg.slf4j.Logger slf4jLog;\norg.slf4j.Marker marker;\n\nslf4jLog.debug(marker, \"message {}\", 1);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/wQA1\">CERT, FIO47-C.</a> - Use valid format strings </li>\n</ul>", "severity": "BLOCKER", "status": "READY", "isTemplate": false, "tags": [], "sysTags": ["cert", "pitfall"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "10min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "10min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "10min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "10min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "BUG"}, "actives": [{"qProfile": "AYmVVaAvqMsO3hqTZpQM", "inherit": "NONE", "severity": "BLOCKER", "params": [], "createdAt": "2023-07-27T03:12:43+0000", "updatedAt": "2023-07-27T03:12:43+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "BLOCKER", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "squid:S1862": {"rule": {"key": "squid:S1862", "repo": "squid", "name": "Related \"if/else if\" statements should not have the same condition", "createdAt": "2023-07-27T03:12:20+0000", "htmlDesc": "<p>A chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first\none with a condition that evaluates to <code>true</code>. </p>\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and\nat worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 1)  // Noncompliant\n  moveWindowToTheBackground();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 3)\n  moveWindowToTheBackground();\n}\n\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n</ul>", "mdDesc": "<p>A chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first\none with a condition that evaluates to <code>true</code>. </p>\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and\nat worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 1)  // Noncompliant\n  moveWindowToTheBackground();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 3)\n  moveWindowToTheBackground();\n}\n\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n</ul>", "severity": "MAJOR", "status": "READY", "isTemplate": false, "tags": [], "sysTags": ["cert", "pitfall", "unused"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "10min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "10min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "10min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "10min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "BUG"}, "actives": [{"qProfile": "AYmVVaAvqMsO3hqTZpQM", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-07-27T03:12:43+0000", "updatedAt": "2023-07-27T03:12:43+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "squid:S2095": {"rule": {"key": "squid:S2095", "repo": "squid", "name": "Resources should be closed", "createdAt": "2023-07-27T03:12:20+0000", "htmlDesc": "<p>Connections, streams, files, and other classes that implement the <code>Closeable</code> interface or its super-interface,\n<code>AutoCloseable</code>, needs to be closed after use. Further, that <code>close</code> call must be made in a <code>finally</code> block otherwise\nan exception could keep the call from being made. Preferably, when class implements <code>AutoCloseable</code>, resource should be created using\n\"try-with-resources\" pattern and will be closed automatically.</p>\n<p>Failure to properly close resources will result in a resource leak which could bring first the application and then perhaps the box it's on to\ntheir knees.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate void readTheFile() throws IOException {\n  Path path = Paths.get(this.fileName);\n  BufferedReader reader = Files.newBufferedReader(path, this.charset);\n  // ...\n  reader.close();  // Noncompliant\n  // ...\n  Files.lines(\"input.txt\").forEach(System.out::println); // Noncompliant: The stream needs to be closed\n}\n\nprivate void doSomething() {\n  OutputStream stream = null;\n  try {\n    for (String property : propertyList) {\n      stream = new FileOutputStream(\"myfile.txt\");  // Noncompliant\n      // ...\n    }\n  } catch (Exception e) {\n    // ...\n  } finally {\n    stream.close();  // Multiple streams were opened. Only the last is closed.\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate void readTheFile(String fileName) throws IOException {\n    Path path = Paths.get(fileName);\n    try (BufferedReader reader = Files.newBufferedReader(path, StandardCharsets.UTF_8)) {\n      reader.readLine();\n      // ...\n    }\n    // ..\n    try (Stream&lt;String&gt; input = Files.lines(\"input.txt\"))  {\n      input.forEach(System.out::println);\n    }\n}\n\nprivate void doSomething() {\n  OutputStream stream = null;\n  try {\n    stream = new FileOutputStream(\"myfile.txt\");\n    for (String property : propertyList) {\n      // ...\n    }\n  } catch (Exception e) {\n    // ...\n  } finally {\n    stream.close();\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Instances of the following classes are ignored by this rule because <code>close</code> has no effect:</p>\n<ul>\n  <li> <code>java.io.ByteArrayOutputStream</code> </li>\n  <li> <code>java.io.ByteArrayInputStream</code> </li>\n  <li> <code>java.io.CharArrayReader</code> </li>\n  <li> <code>java.io.CharArrayWriter</code> </li>\n  <li> <code>java.io.StringReader</code> </li>\n  <li> <code>java.io.StringWriter</code> </li>\n</ul>\n<p>Java 7 introduced the try-with-resources statement, which implicitly closes <code>Closeables</code>. All resources opened in a try-with-resources\nstatement are ignored by this rule. </p>\n<pre>\ntry (BufferedReader br = new BufferedReader(new FileReader(fileName))) {\n  //...\n}\ncatch ( ... ) {\n  //...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/459.html\">MITRE, CWE-459</a> - Incomplete Cleanup </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/9gFqAQ\">CERT, FIO04-J.</a> - Release resources when they are no longer needed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/GAGQBw\">CERT, FIO42-C.</a> - Close files when they are no longer needed </li>\n  <li> <a href=\"https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html\">Try With Resources</a> </li>\n</ul>", "mdDesc": "<p>Connections, streams, files, and other classes that implement the <code>Closeable</code> interface or its super-interface,\n<code>AutoCloseable</code>, needs to be closed after use. Further, that <code>close</code> call must be made in a <code>finally</code> block otherwise\nan exception could keep the call from being made. Preferably, when class implements <code>AutoCloseable</code>, resource should be created using\n\"try-with-resources\" pattern and will be closed automatically.</p>\n<p>Failure to properly close resources will result in a resource leak which could bring first the application and then perhaps the box it's on to\ntheir knees.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate void readTheFile() throws IOException {\n  Path path = Paths.get(this.fileName);\n  BufferedReader reader = Files.newBufferedReader(path, this.charset);\n  // ...\n  reader.close();  // Noncompliant\n  // ...\n  Files.lines(\"input.txt\").forEach(System.out::println); // Noncompliant: The stream needs to be closed\n}\n\nprivate void doSomething() {\n  OutputStream stream = null;\n  try {\n    for (String property : propertyList) {\n      stream = new FileOutputStream(\"myfile.txt\");  // Noncompliant\n      // ...\n    }\n  } catch (Exception e) {\n    // ...\n  } finally {\n    stream.close();  // Multiple streams were opened. Only the last is closed.\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate void readTheFile(String fileName) throws IOException {\n    Path path = Paths.get(fileName);\n    try (BufferedReader reader = Files.newBufferedReader(path, StandardCharsets.UTF_8)) {\n      reader.readLine();\n      // ...\n    }\n    // ..\n    try (Stream&lt;String&gt; input = Files.lines(\"input.txt\"))  {\n      input.forEach(System.out::println);\n    }\n}\n\nprivate void doSomething() {\n  OutputStream stream = null;\n  try {\n    stream = new FileOutputStream(\"myfile.txt\");\n    for (String property : propertyList) {\n      // ...\n    }\n  } catch (Exception e) {\n    // ...\n  } finally {\n    stream.close();\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Instances of the following classes are ignored by this rule because <code>close</code> has no effect:</p>\n<ul>\n  <li> <code>java.io.ByteArrayOutputStream</code> </li>\n  <li> <code>java.io.ByteArrayInputStream</code> </li>\n  <li> <code>java.io.CharArrayReader</code> </li>\n  <li> <code>java.io.CharArrayWriter</code> </li>\n  <li> <code>java.io.StringReader</code> </li>\n  <li> <code>java.io.StringWriter</code> </li>\n</ul>\n<p>Java 7 introduced the try-with-resources statement, which implicitly closes <code>Closeables</code>. All resources opened in a try-with-resources\nstatement are ignored by this rule. </p>\n<pre>\ntry (BufferedReader br = new BufferedReader(new FileReader(fileName))) {\n  //...\n}\ncatch ( ... ) {\n  //...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/459.html\">MITRE, CWE-459</a> - Incomplete Cleanup </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/9gFqAQ\">CERT, FIO04-J.</a> - Release resources when they are no longer needed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/GAGQBw\">CERT, FIO42-C.</a> - Close files when they are no longer needed </li>\n  <li> <a href=\"https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html\">Try With Resources</a> </li>\n</ul>", "severity": "BLOCKER", "status": "READY", "isTemplate": false, "tags": [], "sysTags": ["cert", "cwe", "denial-of-service", "leak"], "lang": "java", "langName": "Java", "params": [{"key": "excludedResourceTypes", "htmlDesc": "Comma separated list of the excluded resource types, using fully qualified names (example: &quot;org.apache.hadoop.fs.FileSystem&quot;)", "type": "STRING"}], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "5min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "5min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "5min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "5min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "BUG"}, "actives": [{"qProfile": "AYmVVaAvqMsO3hqTZpQM", "inherit": "NONE", "severity": "BLOCKER", "params": [], "createdAt": "2023-07-27T03:12:43+0000", "updatedAt": "2023-07-27T03:12:43+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "BLOCKER", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "squid:CommentedOutCodeLine": {"rule": {"key": "squid:CommentedOutCodeLine", "repo": "squid", "name": "Sections of code should not be commented out", "createdAt": "2023-07-27T03:12:21+0000", "htmlDesc": "<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 2.4 - Sections of code should not be \"commented out\". </li>\n  <li> MISRA C++:2008, 2-7-2 - Sections of code shall not be \"commented out\" using C-style comments. </li>\n  <li> MISRA C++:2008, 2-7-3 - Sections of code should not be \"commented out\" using C++ comments. </li>\n  <li> MISRA C:2012, Dir. 4.4 - Sections of code should not be \"commented out\" </li>\n</ul>", "mdDesc": "<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 2.4 - Sections of code should not be \"commented out\". </li>\n  <li> MISRA C++:2008, 2-7-2 - Sections of code shall not be \"commented out\" using C-style comments. </li>\n  <li> MISRA C++:2008, 2-7-3 - Sections of code should not be \"commented out\" using C++ comments. </li>\n  <li> MISRA C:2012, Dir. 4.4 - Sections of code should not be \"commented out\" </li>\n</ul>", "severity": "MAJOR", "status": "READY", "internalKey": "S125", "isTemplate": false, "tags": [], "sysTags": ["misra", "unused"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "5min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "5min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "5min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "5min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYmVVaAvqMsO3hqTZpQM", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-07-27T03:12:43+0000", "updatedAt": "2023-07-27T03:12:43+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MINOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "findsecbugs:SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING": {"rule": {"key": "findsecbugs:SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING", "repo": "findsecbugs", "name": "Security - Spring CSRF unrestricted RequestMapping", "createdAt": "2023-07-27T03:12:25+0000", "htmlDesc": "<p>Methods annotated with <code>RequestMapping</code> are by default mapped to all the HTTP request methods.\nHowever, Spring Security's CSRF protection is not enabled by default\nfor the HTTP request methods <code>GET</code>, <code>HEAD</code>, <code>TRACE</code>, and <code>OPTIONS</code>\n(as this could cause the tokens to be leaked).\nTherefore, state-changing methods annotated with <code>RequestMapping</code> and not narrowing the mapping\nto the HTTP request methods <code>POST</code>, <code>PUT</code>, <code>DELETE</code>, or <code>PATCH</code>\nare vulnerable to CSRF attacks.</p>\n<p>\n    <b>Vulnerable Code:</b><br/>\n<pre>@Controller\npublic class UnsafeController {\n\n    @RequestMapping(\"/path\")\n    public void writeData() {\n        // State-changing operations performed within this method.\n    }\n}</pre>\n</p>\n<p>\n    <b>Solution (Spring Framework 4.3 and later):</b><br/>\n<pre>@Controller\npublic class SafeController {\n\n    /**\n     * For methods without side-effects use @GetMapping.\n     */\n    @GetMapping(\"/path\")\n    public String readData() {\n        // No state-changing operations performed within this method.\n        return \"\";\n    }\n\n    /**\n     * For state-changing methods use either @PostMapping, @PutMapping, @DeleteMapping, or @PatchMapping.\n     */\n    @PostMapping(\"/path\")\n    public void writeData() {\n        // State-changing operations performed within this method.\n    }\n}</pre>\n</p>\n<p>\n    <b>Solution (Before Spring Framework 4.3):</b><br/>\n<pre>@Controller\npublic class SafeController {\n\n    /**\n     * For methods without side-effects use either\n     * RequestMethod.GET, RequestMethod.HEAD, RequestMethod.TRACE, or RequestMethod.OPTIONS.\n     */\n    @RequestMapping(value = \"/path\", method = RequestMethod.GET)\n    public String readData() {\n        // No state-changing operations performed within this method.\n        return \"\";\n    }\n\n    /**\n     * For state-changing methods use either\n     * RequestMethod.POST, RequestMethod.PUT, RequestMethod.DELETE, or RequestMethod.PATCH.\n     */\n    @RequestMapping(value = \"/path\", method = RequestMethod.POST)\n    public void writeData() {\n        // State-changing operations performed within this method.\n    }\n}</pre>\n</p>\n<p>\n<b>References</b><br/>\n<a href=\"https://docs.spring.io/spring-security/site/docs/current/reference/html/csrf.html#csrf-use-proper-verbs\">Spring Security Official Documentation: Use proper HTTP verbs (CSRF protection)</a><br/>\n<a href=\"https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29\">OWASP: Cross-Site Request Forgery</a><br/>\n<a href=\"https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet\">OWASP: CSRF Prevention Cheat Sheet</a><br/>\n<a href=\"https://cwe.mitre.org/data/definitions/352.html\">CWE-352: Cross-Site Request Forgery (CSRF)</a>\n</p>", "mdDesc": "<p>Methods annotated with <code>RequestMapping</code> are by default mapped to all the HTTP request methods.\nHowever, Spring Security's CSRF protection is not enabled by default\nfor the HTTP request methods <code>GET</code>, <code>HEAD</code>, <code>TRACE</code>, and <code>OPTIONS</code>\n(as this could cause the tokens to be leaked).\nTherefore, state-changing methods annotated with <code>RequestMapping</code> and not narrowing the mapping\nto the HTTP request methods <code>POST</code>, <code>PUT</code>, <code>DELETE</code>, or <code>PATCH</code>\nare vulnerable to CSRF attacks.</p>\n<p>\n    <b>Vulnerable Code:</b><br/>\n<pre>@Controller\npublic class UnsafeController {\n\n    @RequestMapping(\"/path\")\n    public void writeData() {\n        // State-changing operations performed within this method.\n    }\n}</pre>\n</p>\n<p>\n    <b>Solution (Spring Framework 4.3 and later):</b><br/>\n<pre>@Controller\npublic class SafeController {\n\n    /**\n     * For methods without side-effects use @GetMapping.\n     */\n    @GetMapping(\"/path\")\n    public String readData() {\n        // No state-changing operations performed within this method.\n        return \"\";\n    }\n\n    /**\n     * For state-changing methods use either @PostMapping, @PutMapping, @DeleteMapping, or @PatchMapping.\n     */\n    @PostMapping(\"/path\")\n    public void writeData() {\n        // State-changing operations performed within this method.\n    }\n}</pre>\n</p>\n<p>\n    <b>Solution (Before Spring Framework 4.3):</b><br/>\n<pre>@Controller\npublic class SafeController {\n\n    /**\n     * For methods without side-effects use either\n     * RequestMethod.GET, RequestMethod.HEAD, RequestMethod.TRACE, or RequestMethod.OPTIONS.\n     */\n    @RequestMapping(value = \"/path\", method = RequestMethod.GET)\n    public String readData() {\n        // No state-changing operations performed within this method.\n        return \"\";\n    }\n\n    /**\n     * For state-changing methods use either\n     * RequestMethod.POST, RequestMethod.PUT, RequestMethod.DELETE, or RequestMethod.PATCH.\n     */\n    @RequestMapping(value = \"/path\", method = RequestMethod.POST)\n    public void writeData() {\n        // State-changing operations performed within this method.\n    }\n}</pre>\n</p>\n<p>\n<b>References</b><br/>\n<a href=\"https://docs.spring.io/spring-security/site/docs/current/reference/html/csrf.html#csrf-use-proper-verbs\">Spring Security Official Documentation: Use proper HTTP verbs (CSRF protection)</a><br/>\n<a href=\"https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29\">OWASP: Cross-Site Request Forgery</a><br/>\n<a href=\"https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet\">OWASP: CSRF Prevention Cheat Sheet</a><br/>\n<a href=\"https://cwe.mitre.org/data/definitions/352.html\">CWE-352: Cross-Site Request Forgery (CSRF)</a>\n</p>", "severity": "MAJOR", "status": "READY", "internalKey": "SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING", "isTemplate": false, "tags": [], "sysTags": ["cwe"], "lang": "java", "langName": "Java", "params": [], "debtOverloaded": false, "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "VULNERABILITY"}, "actives": [{"qProfile": "AYmVVZ4XqMsO3hqTZpIx", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-07-27T03:12:43+0000", "updatedAt": "2023-07-27T03:12:43+0000"}, {"qProfile": "AYmVVZyPqMsO3hqTZpFV", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-07-27T03:12:43+0000", "updatedAt": "2023-07-27T03:12:43+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "squid:S2178": {"rule": {"key": "squid:S2178", "repo": "squid", "name": "Short-circuit logic should be used in boolean contexts", "createdAt": "2023-07-27T03:12:20+0000", "htmlDesc": "<p>The use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are\nevaluated under the wrong circumstances. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(getTrue() | getFalse()) { ... } // Noncompliant; both sides evaluated\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(getTrue() || getFalse()) { ... } // true short-circuit logic\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/g4FtAg\">CERT, EXP46-C.</a> - Do not use a bitwise operator with a Boolean-like operand\n  </li>\n</ul>", "mdDesc": "<p>The use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are\nevaluated under the wrong circumstances. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(getTrue() | getFalse()) { ... } // Noncompliant; both sides evaluated\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(getTrue() || getFalse()) { ... } // true short-circuit logic\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/g4FtAg\">CERT, EXP46-C.</a> - Do not use a bitwise operator with a Boolean-like operand\n  </li>\n</ul>", "severity": "BLOCKER", "status": "READY", "isTemplate": false, "tags": [], "sysTags": ["cert"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "5min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "5min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "5min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "5min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYmVVaAvqMsO3hqTZpQM", "inherit": "NONE", "severity": "BLOCKER", "params": [], "createdAt": "2023-07-27T03:12:43+0000", "updatedAt": "2023-07-27T03:12:43+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "BLOCKER", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "squid:S2159": {"rule": {"key": "squid:S2159", "repo": "squid", "name": "Silly equality checks should not be made", "createdAt": "2023-07-27T03:12:21+0000", "htmlDesc": "<p>Comparisons of dissimilar types will always return false. The comparison and all its dependent code can simply be removed. This includes:</p>\n<ul>\n  <li> comparing an object with null </li>\n  <li> comparing an object with an unrelated primitive (E.G. a string with an int) </li>\n  <li> comparing unrelated classes </li>\n  <li> comparing an unrelated <code>class</code> and <code>interface</code> </li>\n  <li> comparing unrelated <code>interface</code> types </li>\n  <li> comparing an array to a non-array </li>\n  <li> comparing two arrays </li>\n</ul>\n<p>Specifically in the case of arrays, since arrays don't override <code>Object.equals()</code>, calling <code>equals</code> on two arrays is the same\nas comparing their addresses. This means that <code>array1.equals(array2)</code> is equivalent to <code>array1==array2</code>.</p>\n<p>However, some developers might expect <code>Array.equals(Object obj)</code> to do more than a simple memory address comparison, comparing for\ninstance the size and content of the two arrays. Instead, the <code>==</code> operator or <code>Arrays.equals(array1, array2)</code> should always be\nused with arrays.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ninterface KitchenTool { ... };\ninterface Plant {...}\n\npublic class Spatula implements KitchenTool { ... }\npublic class Tree implements Plant { ...}\n//...\n\nSpatula spatula = new Spatula();\nKitchenTool tool = spatula;\nKitchenTool [] tools = {tool};\n\nTree tree = new Tree();\nPlant plant = tree;\nTree [] trees = {tree};\n\n\nif (spatula.equals(tree)) { // Noncompliant; unrelated classes\n  // ...\n}\nelse if (spatula.equals(plant)) { // Noncompliant; unrelated class and interface\n  // ...\n}\nelse if (tool.equals(plant)) { // Noncompliant; unrelated interfaces\n  // ...\n}\nelse if (tool.equals(tools)) { // Noncompliant; array &amp; non-array\n  // ...\n}\nelse if (trees.equals(tools)) {  // Noncompliant; incompatible arrays\n  // ...\n}\nelse if (tree.equals(null)) {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/IQAlAg\">CERT, EXP02-J.</a> - Do not use the Object.equals() method to compare two\n  arrays </li>\n</ul>", "mdDesc": "<p>Comparisons of dissimilar types will always return false. The comparison and all its dependent code can simply be removed. This includes:</p>\n<ul>\n  <li> comparing an object with null </li>\n  <li> comparing an object with an unrelated primitive (E.G. a string with an int) </li>\n  <li> comparing unrelated classes </li>\n  <li> comparing an unrelated <code>class</code> and <code>interface</code> </li>\n  <li> comparing unrelated <code>interface</code> types </li>\n  <li> comparing an array to a non-array </li>\n  <li> comparing two arrays </li>\n</ul>\n<p>Specifically in the case of arrays, since arrays don't override <code>Object.equals()</code>, calling <code>equals</code> on two arrays is the same\nas comparing their addresses. This means that <code>array1.equals(array2)</code> is equivalent to <code>array1==array2</code>.</p>\n<p>However, some developers might expect <code>Array.equals(Object obj)</code> to do more than a simple memory address comparison, comparing for\ninstance the size and content of the two arrays. Instead, the <code>==</code> operator or <code>Arrays.equals(array1, array2)</code> should always be\nused with arrays.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ninterface KitchenTool { ... };\ninterface Plant {...}\n\npublic class Spatula implements KitchenTool { ... }\npublic class Tree implements Plant { ...}\n//...\n\nSpatula spatula = new Spatula();\nKitchenTool tool = spatula;\nKitchenTool [] tools = {tool};\n\nTree tree = new Tree();\nPlant plant = tree;\nTree [] trees = {tree};\n\n\nif (spatula.equals(tree)) { // Noncompliant; unrelated classes\n  // ...\n}\nelse if (spatula.equals(plant)) { // Noncompliant; unrelated class and interface\n  // ...\n}\nelse if (tool.equals(plant)) { // Noncompliant; unrelated interfaces\n  // ...\n}\nelse if (tool.equals(tools)) { // Noncompliant; array &amp; non-array\n  // ...\n}\nelse if (trees.equals(tools)) {  // Noncompliant; incompatible arrays\n  // ...\n}\nelse if (tree.equals(null)) {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/IQAlAg\">CERT, EXP02-J.</a> - Do not use the Object.equals() method to compare two\n  arrays </li>\n</ul>", "severity": "MAJOR", "status": "READY", "isTemplate": false, "tags": [], "sysTags": ["cert", "unused"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "15min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "15min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "15min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "15min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "BUG"}, "actives": [{"qProfile": "AYmVVaAvqMsO3hqTZpQM", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-07-27T03:12:43+0000", "updatedAt": "2023-07-27T03:12:43+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "squid:S106": {"rule": {"key": "squid:S106", "repo": "squid", "name": "Standard outputs should not be used directly to log anything", "createdAt": "2023-07-27T03:12:20+0000", "htmlDesc": "<p>When logging a message there are several important requirements which must be fulfilled:</p>\n<ul>\n  <li> The user must be able to easily retrieve the logs </li>\n  <li> The format of all logged message must be uniform to allow the user to easily read the log </li>\n  <li> Logged data must actually be recorded </li>\n  <li> Sensitive data must only be logged securely </li>\n</ul>\n<p>If a program directly writes to the standard outputs, there is absolutely no way to comply with those requirements. That's why defining and using a\ndedicated logger is highly recommended.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSystem.out.println(\"My Message\");  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlogger.log(\"My Message\");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/RoElAQ\">CERT, ERR02-J.</a> - Prevent exceptions while logging data </li>\n</ul>", "mdDesc": "<p>When logging a message there are several important requirements which must be fulfilled:</p>\n<ul>\n  <li> The user must be able to easily retrieve the logs </li>\n  <li> The format of all logged message must be uniform to allow the user to easily read the log </li>\n  <li> Logged data must actually be recorded </li>\n  <li> Sensitive data must only be logged securely </li>\n</ul>\n<p>If a program directly writes to the standard outputs, there is absolutely no way to comply with those requirements. That's why defining and using a\ndedicated logger is highly recommended.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSystem.out.println(\"My Message\");  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlogger.log(\"My Message\");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/RoElAQ\">CERT, ERR02-J.</a> - Prevent exceptions while logging data </li>\n</ul>", "severity": "MAJOR", "status": "READY", "isTemplate": false, "tags": [], "sysTags": ["bad-practice", "cert"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "10min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "10min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "10min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "10min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYmVVaAvqMsO3hqTZpQM", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-07-27T03:12:43+0000", "updatedAt": "2023-07-27T03:12:43+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MINOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-09-13T05:55:50+0000"}]}, "squid:S00122": {"rule": {"key": "squid:S00122", "repo": "squid", "name": "Statements should be on separate lines", "createdAt": "2023-07-27T03:12:21+0000", "htmlDesc": "<p>For better readability, do not put more than one statement on a single line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(someCondition) doSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(someCondition) {\n  doSomething();\n}\n</pre>", "mdDesc": "<p>For better readability, do not put more than one statement on a single line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(someCondition) doSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(someCondition) {\n  doSomething();\n}\n</pre>", "severity": "MAJOR", "status": "READY", "internalKey": "S122", "isTemplate": false, "tags": [], "sysTags": ["style"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "1min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "1min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "1min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "1min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "squid:S1192": {"rule": {"key": "squid:S1192", "repo": "squid", "name": "String literals should not be duplicated", "createdAt": "2023-07-27T03:12:20+0000", "htmlDesc": "<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.</p>\n<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\npublic void run() {\n  prepare(\"action1\");                              // Noncompliant - \"action1\" is duplicated 3 times\n  execute(\"action1\");\n  release(\"action1\");\n}\n\n@SuppressWarning(\"all\")                            // Compliant - annotations are excluded\nprivate void method1() { /* ... */ }\n@SuppressWarning(\"all\")\nprivate void method2() { /* ... */ }\n\npublic String method3(String a) {\n  System.out.println(\"'\" + a + \"'\");               // Compliant - literal \"'\" has less than 5 characters and is excluded\n  return \"\";                                       // Compliant - literal \"\" has less than 5 characters and is excluded\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate static final String ACTION_1 = \"action1\";  // Compliant\n\npublic void run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n</pre>\n<h2>Exceptions</h2>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>", "mdDesc": "<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.</p>\n<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\npublic void run() {\n  prepare(\"action1\");                              // Noncompliant - \"action1\" is duplicated 3 times\n  execute(\"action1\");\n  release(\"action1\");\n}\n\n@SuppressWarning(\"all\")                            // Compliant - annotations are excluded\nprivate void method1() { /* ... */ }\n@SuppressWarning(\"all\")\nprivate void method2() { /* ... */ }\n\npublic String method3(String a) {\n  System.out.println(\"'\" + a + \"'\");               // Compliant - literal \"'\" has less than 5 characters and is excluded\n  return \"\";                                       // Compliant - literal \"\" has less than 5 characters and is excluded\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate static final String ACTION_1 = \"action1\";  // Compliant\n\npublic void run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n</pre>\n<h2>Exceptions</h2>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>", "severity": "CRITICAL", "status": "READY", "isTemplate": false, "tags": [], "sysTags": ["design"], "lang": "java", "langName": "Java", "params": [{"key": "threshold", "htmlDesc": "Number of times a literal must be duplicated to trigger an issue", "defaultValue": "3", "type": "INTEGER"}], "defaultDebtRemFnType": "LINEAR_OFFSET", "defaultDebtRemFnCoeff": "2min", "defaultDebtRemFnOffset": "2min", "effortToFixDescription": "per duplicate instance", "debtOverloaded": false, "debtRemFnType": "LINEAR_OFFSET", "debtRemFnCoeff": "2min", "debtRemFnOffset": "2min", "defaultRemFnType": "LINEAR_OFFSET", "defaultRemFnGapMultiplier": "2min", "defaultRemFnBaseEffort": "2min", "remFnType": "LINEAR_OFFSET", "remFnGapMultiplier": "2min", "remFnBaseEffort": "2min", "remFnOverloaded": false, "gapDescription": "per duplicate instance", "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYmVVaAvqMsO3hqTZpQM", "inherit": "NONE", "severity": "CRITICAL", "params": [{"key": "threshold", "value": "3"}], "createdAt": "2023-07-27T03:12:43+0000", "updatedAt": "2023-07-27T03:12:43+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MINOR", "params": [{"key": "threshold", "value": "5"}], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-09-13T05:51:38+0000"}]}, "squid:S4973": {"rule": {"key": "squid:S4973", "repo": "squid", "name": "Strings and Boxed types should be compared using \"equals()\"", "createdAt": "2023-07-27T03:12:20+0000", "htmlDesc": "<p>It's almost always a mistake to compare two instances of <code>java.lang.String</code> or boxed types like <code>java.lang.Integer</code> using\nreference equality <code>==</code> or <code>!=</code>, because it is not comparing actual value but locations in memory.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString firstName = getFirstName(); // String overrides equals\nString lastName = getLastName();\n\nif (firstName == lastName) { ... }; // Non-compliant; false even if the strings have the same value\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString firstName = getFirstName();\nString lastName = getLastName();\n\nif (firstName != null &amp;&amp; firstName.equals(lastName)) { ... };\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/595.html\">MITRE, CWE-595</a> - Comparison of Object References Instead of Object Contents </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/597.html\">MITRE, CWE-597</a> - Use of Wrong Operator in String Comparison </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/wwD1AQ\">CERT, EXP03-J.</a> - Do not use the equality operators when comparing values of\n  boxed primitives </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/8AEqAQ\">CERT, EXP50-J.</a> - Do not confuse abstract object equality with reference\n  equality </li>\n</ul>", "mdDesc": "<p>It's almost always a mistake to compare two instances of <code>java.lang.String</code> or boxed types like <code>java.lang.Integer</code> using\nreference equality <code>==</code> or <code>!=</code>, because it is not comparing actual value but locations in memory.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString firstName = getFirstName(); // String overrides equals\nString lastName = getLastName();\n\nif (firstName == lastName) { ... }; // Non-compliant; false even if the strings have the same value\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString firstName = getFirstName();\nString lastName = getLastName();\n\nif (firstName != null &amp;&amp; firstName.equals(lastName)) { ... };\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/595.html\">MITRE, CWE-595</a> - Comparison of Object References Instead of Object Contents </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/597.html\">MITRE, CWE-597</a> - Use of Wrong Operator in String Comparison </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/wwD1AQ\">CERT, EXP03-J.</a> - Do not use the equality operators when comparing values of\n  boxed primitives </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/8AEqAQ\">CERT, EXP50-J.</a> - Do not confuse abstract object equality with reference\n  equality </li>\n</ul>", "severity": "MAJOR", "status": "READY", "isTemplate": false, "tags": [], "sysTags": ["cert", "cwe"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "5min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "5min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "5min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "5min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "BUG"}, "actives": [{"qProfile": "AYmVVaAvqMsO3hqTZpQM", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-07-27T03:12:43+0000", "updatedAt": "2023-07-27T03:12:43+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "squid:S128": {"rule": {"key": "squid:S128", "repo": "squid", "name": "Switch cases should end with an unconditional \"break\" statement", "createdAt": "2023-07-27T03:12:20+0000", "htmlDesc": "<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While\nthis is sometimes intentional, it often is a mistake which leads to unexpected behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:  // Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?\n    doSomething();\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule is relaxed in the following cases:</p>\n<pre>\nswitch (myVariable) {\n  case 0:                                // Empty case used to specify the same behavior for a group of cases.\n  case 1:\n    doSomething();\n    break;\n  case 2:                                // Use of return statement\n    return;\n  case 3:                                // Use of throw statement\n    throw new IllegalStateException();\n  case 4:                                // Use of continue statement\n    continue;\n  default:                               // For the last case, use of break statement is optional\n    doSomethingElse();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>\n  <li> MISRA C:2004, 15.2 - An unconditional break statement shall terminate every non-empty switch clause </li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>\n  <li> MISRA C++:2008, 6-4-5 - An unconditional throw or break statement shall terminate every non-empty switch-clause </li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>\n  <li> MISRA C:2012, 16.3 - An unconditional break statement shall terminate every switch-clause </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/484.html\">MITRE, CWE-484</a> - Omitted Break Statement in Switch </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/YIFLAQ\">CERT, MSC17-C.</a> - Finish every set of statements associated with a case\n  label with a break statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ewHAAQ\">CERT, MSC52-J.</a> - Finish every set of statements associated with a case\n  label with a break statement </li>\n</ul>", "mdDesc": "<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While\nthis is sometimes intentional, it often is a mistake which leads to unexpected behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:  // Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?\n    doSomething();\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule is relaxed in the following cases:</p>\n<pre>\nswitch (myVariable) {\n  case 0:                                // Empty case used to specify the same behavior for a group of cases.\n  case 1:\n    doSomething();\n    break;\n  case 2:                                // Use of return statement\n    return;\n  case 3:                                // Use of throw statement\n    throw new IllegalStateException();\n  case 4:                                // Use of continue statement\n    continue;\n  default:                               // For the last case, use of break statement is optional\n    doSomethingElse();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>\n  <li> MISRA C:2004, 15.2 - An unconditional break statement shall terminate every non-empty switch clause </li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>\n  <li> MISRA C++:2008, 6-4-5 - An unconditional throw or break statement shall terminate every non-empty switch-clause </li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>\n  <li> MISRA C:2012, 16.3 - An unconditional break statement shall terminate every switch-clause </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/484.html\">MITRE, CWE-484</a> - Omitted Break Statement in Switch </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/YIFLAQ\">CERT, MSC17-C.</a> - Finish every set of statements associated with a case\n  label with a break statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ewHAAQ\">CERT, MSC52-J.</a> - Finish every set of statements associated with a case\n  label with a break statement </li>\n</ul>", "severity": "BLOCKER", "status": "READY", "isTemplate": false, "tags": [], "sysTags": ["cert", "cwe", "misra", "suspicious"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "10min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "10min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "10min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "10min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYmVVaAvqMsO3hqTZpQM", "inherit": "NONE", "severity": "BLOCKER", "params": [], "createdAt": "2023-07-27T03:12:43+0000", "updatedAt": "2023-07-27T03:12:43+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "BLOCKER", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "squid:S1149": {"rule": {"key": "squid:S1149", "repo": "squid", "name": "Synchronized classes Vector, Hashtable, Stack and StringBuffer should not be used", "createdAt": "2023-07-27T03:12:21+0000", "htmlDesc": "<p>Early classes of the Java API, such as <code>Vector</code>, <code>Hashtable</code> and <code>StringBuffer</code>, were synchronized to make them\nthread-safe. Unfortunately, synchronization has a big negative impact on performance, even when using these collections from a single thread.</p>\n<p>It is better to use their new unsynchronized replacements:</p>\n<ul>\n  <li> <code>ArrayList</code> or <code>LinkedList</code> instead of <code>Vector</code> </li>\n  <li> <code>Deque</code> instead of <code>Stack</code> </li>\n  <li> <code>HashMap</code> instead of <code>Hashtable</code> </li>\n  <li> <code>StringBuilder</code> instead of <code>StringBuffer</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nVector cats = new Vector();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nArrayList cats = new ArrayList();\n</pre>\n<h2>Exceptions</h2>\n<p>Use of those synchronized classes is ignored in the signatures of overriding methods.</p>\n<pre>\n@Override\npublic Vector getCats() {...}\n</pre>", "mdDesc": "<p>Early classes of the Java API, such as <code>Vector</code>, <code>Hashtable</code> and <code>StringBuffer</code>, were synchronized to make them\nthread-safe. Unfortunately, synchronization has a big negative impact on performance, even when using these collections from a single thread.</p>\n<p>It is better to use their new unsynchronized replacements:</p>\n<ul>\n  <li> <code>ArrayList</code> or <code>LinkedList</code> instead of <code>Vector</code> </li>\n  <li> <code>Deque</code> instead of <code>Stack</code> </li>\n  <li> <code>HashMap</code> instead of <code>Hashtable</code> </li>\n  <li> <code>StringBuilder</code> instead of <code>StringBuffer</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nVector cats = new Vector();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nArrayList cats = new ArrayList();\n</pre>\n<h2>Exceptions</h2>\n<p>Use of those synchronized classes is ignored in the signatures of overriding methods.</p>\n<pre>\n@Override\npublic Vector getCats() {...}\n</pre>", "severity": "MAJOR", "status": "READY", "isTemplate": false, "tags": [], "sysTags": ["performance"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "20min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "20min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "20min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "20min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYmVVaAvqMsO3hqTZpQM", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-07-27T03:12:43+0000", "updatedAt": "2023-07-27T03:12:43+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MINOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-09-13T07:21:38+0000"}]}, "squid:S1181": {"rule": {"key": "squid:S1181", "repo": "squid", "name": "Throwable and Error should not be caught", "createdAt": "2023-07-27T03:12:21+0000", "htmlDesc": "<p><code>Throwable</code> is the superclass of all errors and exceptions in Java. <code>Error</code> is the superclass of all errors, which are not\nmeant to be caught by applications.</p>\n<p>Catching either <code>Throwable</code> or <code>Error</code> will also catch <code>OutOfMemoryError</code> and <code>InternalError</code>, from\nwhich an application should not attempt to recover.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry { /* ... */ } catch (Throwable t) { /* ... */ }\ntry { /* ... */ } catch (Error e) { /* ... */ }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry { /* ... */ } catch (RuntimeException e) { /* ... */ }\ntry { /* ... */ } catch (MyException e) { /* ... */ }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/396.html\">MITRE, CWE-396</a> - Declaration of Catch for Generic Exception </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/BIB3AQ\">CERT, ERR08-J.</a> - Do not catch NullPointerException or any of its ancestors\n  </li>\n</ul>", "mdDesc": "<p><code>Throwable</code> is the superclass of all errors and exceptions in Java. <code>Error</code> is the superclass of all errors, which are not\nmeant to be caught by applications.</p>\n<p>Catching either <code>Throwable</code> or <code>Error</code> will also catch <code>OutOfMemoryError</code> and <code>InternalError</code>, from\nwhich an application should not attempt to recover.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry { /* ... */ } catch (Throwable t) { /* ... */ }\ntry { /* ... */ } catch (Error e) { /* ... */ }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry { /* ... */ } catch (RuntimeException e) { /* ... */ }\ntry { /* ... */ } catch (MyException e) { /* ... */ }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/396.html\">MITRE, CWE-396</a> - Declaration of Catch for Generic Exception </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/BIB3AQ\">CERT, ERR08-J.</a> - Do not catch NullPointerException or any of its ancestors\n  </li>\n</ul>", "severity": "MAJOR", "status": "READY", "isTemplate": false, "tags": [], "sysTags": ["bad-practice", "cert", "cwe", "error-handling"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "20min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "20min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "20min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "20min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYmVVaAvqMsO3hqTZpQM", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-07-27T03:12:43+0000", "updatedAt": "2023-07-27T03:12:43+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "squid:S1148": {"rule": {"key": "squid:S1148", "repo": "squid", "name": "Throwable.printStackTrace(...) should not be called", "createdAt": "2023-07-27T03:12:21+0000", "htmlDesc": "<p><code>Throwable.printStackTrace(...)</code> prints a <code>Throwable</code> and its stack trace to some stream. By default that stream\n<code>System.Err</code>, which could inadvertently expose sensitive information.</p>\n<p>Loggers should be used instead to print <code>Throwable</code>s, as they have many advantages:</p>\n<ul>\n  <li> Users are able to easily retrieve the logs. </li>\n  <li> The format of log messages is uniform and allow users to browse the logs easily. </li>\n</ul>\n<p>This rule raises an issue when <code>printStackTrace</code> is used without arguments, i.e. when the stack trace is printed to the default\nstream.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  e.printStackTrace();        // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log(\"context\", e);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489.html\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n</ul>", "mdDesc": "<p><code>Throwable.printStackTrace(...)</code> prints a <code>Throwable</code> and its stack trace to some stream. By default that stream\n<code>System.Err</code>, which could inadvertently expose sensitive information.</p>\n<p>Loggers should be used instead to print <code>Throwable</code>s, as they have many advantages:</p>\n<ul>\n  <li> Users are able to easily retrieve the logs. </li>\n  <li> The format of log messages is uniform and allow users to browse the logs easily. </li>\n</ul>\n<p>This rule raises an issue when <code>printStackTrace</code> is used without arguments, i.e. when the stack trace is printed to the default\nstream.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  e.printStackTrace();        // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log(\"context\", e);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489.html\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n</ul>", "severity": "MINOR", "status": "READY", "isTemplate": false, "tags": [], "sysTags": ["cwe", "error-handling"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "10min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "10min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "10min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "10min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "VULNERABILITY"}, "actives": [{"qProfile": "AYmVVaAvqMsO3hqTZpQM", "inherit": "NONE", "severity": "MINOR", "params": [], "createdAt": "2023-07-27T03:12:43+0000", "updatedAt": "2023-07-27T03:12:43+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MINOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "squid:S1871": {"rule": {"key": "squid:S1871", "repo": "squid", "name": "Two branches in a conditional structure should not have exactly the same implementation", "createdAt": "2023-07-27T03:12:21+0000", "htmlDesc": "<p>Having two <code>cases</code> in a <code>switch</code> statement or two branches in an <code>if</code> chain with the same implementation is at\nbest duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if</code> chain they should\nbe combined, or for a <code>switch</code>, one should fall through to the other. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (i) {\n  case 1:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:  // Noncompliant; duplicates case 1's implementation\n    doFirstThing();\n    doSomething();\n    break;\n  default:\n    doTheRest();\n}\n\nif (a &gt;= 0 &amp;&amp; a &lt; 10) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse if (a &gt;= 20 &amp;&amp; a &lt; 50) {\n  doFirstThing();\n  doTheThing();  // Noncompliant; duplicates first condition\n}\nelse {\n  doTheRest();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>switch</code> statement that contain a\nsingle line of code with or without a following <code>break</code>.</p>\n<pre>\nif(a == 1) {\n  doSomething();  //no issue, usually this is done on purpose to increase the readability\n} else if (a == 2) {\n  doSomethingElse();\n} else {\n  doSomething();\n}\n</pre>\n<p>But this exception does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without default clauses when\nall branches have the same single line of code. In case of <code>if</code> chains with <code>else</code>-s, or of <code>switch</code>-es with default\nclauses, rule <a href='/coding_rules#rule_key=squid%3AS3923'>S3923</a> raises a bug. </p>\n<pre>\nif(a == 1) {\n  doSomething();  //Noncompliant, this might have been done on purpose but probably not\n} else if (a == 2) {\n  doSomething();\n}\n</pre>", "mdDesc": "<p>Having two <code>cases</code> in a <code>switch</code> statement or two branches in an <code>if</code> chain with the same implementation is at\nbest duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if</code> chain they should\nbe combined, or for a <code>switch</code>, one should fall through to the other. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (i) {\n  case 1:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:  // Noncompliant; duplicates case 1's implementation\n    doFirstThing();\n    doSomething();\n    break;\n  default:\n    doTheRest();\n}\n\nif (a &gt;= 0 &amp;&amp; a &lt; 10) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse if (a &gt;= 20 &amp;&amp; a &lt; 50) {\n  doFirstThing();\n  doTheThing();  // Noncompliant; duplicates first condition\n}\nelse {\n  doTheRest();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>switch</code> statement that contain a\nsingle line of code with or without a following <code>break</code>.</p>\n<pre>\nif(a == 1) {\n  doSomething();  //no issue, usually this is done on purpose to increase the readability\n} else if (a == 2) {\n  doSomethingElse();\n} else {\n  doSomething();\n}\n</pre>\n<p>But this exception does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without default clauses when\nall branches have the same single line of code. In case of <code>if</code> chains with <code>else</code>-s, or of <code>switch</code>-es with default\nclauses, rule {rule:squid:S3923} raises a bug. </p>\n<pre>\nif(a == 1) {\n  doSomething();  //Noncompliant, this might have been done on purpose but probably not\n} else if (a == 2) {\n  doSomething();\n}\n</pre>", "severity": "MAJOR", "status": "READY", "isTemplate": false, "tags": [], "sysTags": ["design", "suspicious"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "10min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "10min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "10min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "10min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYmVVaAvqMsO3hqTZpQM", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-07-27T03:12:43+0000", "updatedAt": "2023-07-27T03:12:43+0000"}, {"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "pmd:UnnecessaryFullyQualifiedName": {"rule": {"key": "pmd:UnnecessaryFullyQualifiedName", "repo": "pmd", "name": "Unnecessary Fully Qualified Name", "createdAt": "2023-07-27T03:12:15+0000", "htmlDesc": "Import statements allow the use of non-fully qualified names.  The use of a fully qualified name\nwhich is covered by an import statement is redundant.  Consider using the non-fully qualified name. Example:\n<pre>\nimport java.util.List;\n\npublic class Foo {\n   private java.util.List list1; // Unnecessary FQN\n   private List list2; // More appropriate given import of 'java.util.List'\n}\n</pre>", "mdDesc": "Import statements allow the use of non-fully qualified names.  The use of a fully qualified name\nwhich is covered by an import statement is redundant.  Consider using the non-fully qualified name. Example:\n<pre>\nimport java.util.List;\n\npublic class Foo {\n   private java.util.List list1; // Unnecessary FQN\n   private List list2; // More appropriate given import of 'java.util.List'\n}\n</pre>", "severity": "MAJOR", "status": "READY", "internalKey": "category/java/codestyle.xml/UnnecessaryFullyQualifiedName", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "2min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "2min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "2min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "2min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MINOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "pmd:UseIndexOfChar": {"rule": {"key": "pmd:UseIndexOfChar", "repo": "pmd", "name": "Use Index Of Char", "createdAt": "2023-07-27T03:12:15+0000", "htmlDesc": "Use String.indexOf(char) when checking for the index of a single character; it executes faster.", "mdDesc": "Use String.indexOf(char) when checking for the index of a single character; it executes faster.", "severity": "MAJOR", "status": "READY", "internalKey": "category/java/performance.xml/UseIndexOfChar", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "5min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "5min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "5min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "5min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MAJOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "pmd:UseStringBufferForStringAppends": {"rule": {"key": "pmd:UseStringBufferForStringAppends", "repo": "pmd", "name": "Use String Buffer For String Appends", "createdAt": "2023-07-27T03:12:15+0000", "htmlDesc": "Finds usages of += for appending strings.", "mdDesc": "Finds usages of += for appending strings.", "severity": "MAJOR", "status": "READY", "internalKey": "category/java/performance.xml/UseStringBufferForStringAppends", "isTemplate": false, "tags": [], "sysTags": [], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "30min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "30min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "30min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "30min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MINOR", "params": [], "createdAt": "2023-08-31T08:45:59+0000", "updatedAt": "2023-08-31T08:45:59+0000"}]}, "squid:S2208": {"rule": {"key": "squid:S2208", "repo": "squid", "name": "Wildcard imports should not be used", "createdAt": "2023-07-27T03:12:21+0000", "htmlDesc": "<p>Blindly importing all the classes in a package clutters the class namespace and could lead to conflicts between classes in different packages with\nthe same name. On the other hand, specifically listing the necessary classes avoids that problem and makes clear which versions were wanted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.sql.*; // Noncompliant\nimport java.util.*; // Noncompliant\n\nprivate Date date; // Date class exists in java.sql and java.util. Which one is this?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.sql.Date;\nimport java.util.List;\nimport java.util.ArrayList;\n\nprivate Date date;\n</pre>\n<h2>Exceptions</h2>\n<p>Static imports are ignored by this rule. E.G.</p>\n<pre>\nimport static java.lang.Math.*;\n</pre>", "mdDesc": "<p>Blindly importing all the classes in a package clutters the class namespace and could lead to conflicts between classes in different packages with\nthe same name. On the other hand, specifically listing the necessary classes avoids that problem and makes clear which versions were wanted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.sql.*; // Noncompliant\nimport java.util.*; // Noncompliant\n\nprivate Date date; // Date class exists in java.sql and java.util. Which one is this?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.sql.Date;\nimport java.util.List;\nimport java.util.ArrayList;\n\nprivate Date date;\n</pre>\n<h2>Exceptions</h2>\n<p>Static imports are ignored by this rule. E.G.</p>\n<pre>\nimport static java.lang.Math.*;\n</pre>", "severity": "CRITICAL", "status": "READY", "isTemplate": false, "tags": [], "sysTags": ["pitfall"], "lang": "java", "langName": "Java", "params": [], "defaultDebtRemFnType": "CONSTANT_ISSUE", "defaultDebtRemFnOffset": "5min", "debtOverloaded": false, "debtRemFnType": "CONSTANT_ISSUE", "debtRemFnOffset": "5min", "defaultRemFnType": "CONSTANT_ISSUE", "defaultRemFnBaseEffort": "5min", "remFnType": "CONSTANT_ISSUE", "remFnBaseEffort": "5min", "remFnOverloaded": false, "scope": "MAIN", "isExternal": false, "type": "CODE_SMELL"}, "actives": [{"qProfile": "AYpKxU_txqVYNW0noAC0", "inherit": "NONE", "severity": "MINOR", "params": [], "createdAt": "2023-09-04T01:27:17+0000", "updatedAt": "2023-09-04T01:27:17+0000"}]}}